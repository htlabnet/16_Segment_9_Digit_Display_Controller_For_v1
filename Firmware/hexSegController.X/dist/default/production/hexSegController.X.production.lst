

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 03 17:46:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4553 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataBIGRAM
    63  000C02                     __pidataBIGRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _fontList
    67  000C02  0000               	dw	0
    68  000C04  0000               	dw	0
    69  000C06  0000               	dw	0
    70  000C08  0000               	dw	0
    71  000C0A  0000               	dw	0
    72  000C0C  0000               	dw	0
    73  000C0E  0000               	dw	0
    74  000C10  0000               	dw	0
    75  000C12  0000               	dw	0
    76  000C14  0000               	dw	0
    77  000C16  0000               	dw	0
    78  000C18  0000               	dw	0
    79  000C1A  0000               	dw	0
    80  000C1C  0000               	dw	0
    81  000C1E  0000               	dw	0
    82  000C20  0000               	dw	0
    83  000C22  0000               	dw	0
    84  000C24  0000               	dw	0
    85  000C26  0000               	dw	0
    86  000C28  0000               	dw	0
    87  000C2A  0000               	dw	0
    88  000C2C  0000               	dw	0
    89  000C2E  0000               	dw	0
    90  000C30  0000               	dw	0
    91  000C32  0000               	dw	0
    92  000C34  0000               	dw	0
    93  000C36  0000               	dw	0
    94  000C38  0000               	dw	0
    95  000C3A  0000               	dw	0
    96  000C3C  0000               	dw	0
    97  000C3E  0000               	dw	0
    98  000C40  0000               	dw	0
    99  000C42  0000               	dw	0
   100  000C44  1812               	dw	6162
   101  000C46  0880               	dw	2176
   102  000C48  0000               	dw	0
   103  000C4A  CC33               	dw	52275
   104  000C4C  7BA9               	dw	31657
   105  000C4E  B43B               	dw	46139
   106  000C50  0080               	dw	128
   107  000C52  9000               	dw	36864
   108  000C54  2400               	dw	9216
   109  000C56  FF00               	dw	65280
   110  000C58  4B00               	dw	19200
   111  000C5A  0000               	dw	0
   112  000C5C  0300               	dw	768
   113  000C5E  0000               	dw	0
   114  000C60  3000               	dw	12288
   115  000C62  00FF               	dw	255
   116  000C64  4800               	dw	18432
   117  000C66  0377               	dw	887
   118  000C68  033F               	dw	831
   119  000C6A  038C               	dw	908
   120  000C6C  03BB               	dw	955
   121  000C6E  03FB               	dw	1019
   122  000C70  008F               	dw	143
   123  000C72  03FF               	dw	1023
   124  000C74  03BF               	dw	959
   125  000C76  0000               	dw	0
   126  000C78  0000               	dw	0
   127  000C7A  9000               	dw	36864
   128  000C7C  0330               	dw	816
   129  000C7E  2400               	dw	9216
   130  000C80  1013               	dw	4115
   131  000C82  0000               	dw	0
   132  000C84  03CF               	dw	975
   133  000C86  91F3               	dw	37363
   134  000C88  00F3               	dw	243
   135  000C8A  037C               	dw	892
   136  000C8C  03F3               	dw	1011
   137  000C8E  03C3               	dw	963
   138  000C90  02FB               	dw	763
   139  000C92  03CC               	dw	972
   140  000C94  4833               	dw	18483
   141  000C96  4813               	dw	18451
   142  000C98  91C0               	dw	37312
   143  000C9A  00F0               	dw	240
   144  000C9C  14CC               	dw	5324
   145  000C9E  84CC               	dw	33996
   146  000CA0  00FF               	dw	255
   147  000CA2  03C7               	dw	967
   148  000CA4  80FF               	dw	33023
   149  000CA6  83C7               	dw	33735
   150  000CA8  03BB               	dw	955
   151  000CAA  4803               	dw	18435
   152  000CAC  00FC               	dw	252
   153  000CAE  30C0               	dw	12480
   154  000CB0  A0CC               	dw	41164
   155  000CB2  B400               	dw	46080
   156  000CB4  5400               	dw	21504
   157  000CB6  3033               	dw	12339
   158  000CB8  00D1               	dw	209
   159  000CBA  8400               	dw	33792
   160  000CBC  0003               	dw	3
   161  000CBE  0030               	dw	48
   162  000CC0  AB00               	dw	43776
   163  000CC2  34C0               	dw	13504
   164  000CC4  0B7B               	dw	2939
   165  000CC6  5703               	dw	22275
   166  000CC8  0000               	dw	0
   167  000CCA  0000               	dw	0
   168  000CCC  0000               	dw	0
   169  000CCE  FFFF               	dw	65535
   170  000CD0  0001               	dw	1
   171  000CD2  0002               	dw	2
   172  000CD4  0004               	dw	4
   173  000CD6  0008               	dw	8
   174  000CD8  0020               	dw	32
   175  000CDA  0010               	dw	16
   176  000CDC  0040               	dw	64
   177  000CDE  0080               	dw	128
   178  000CE0  0800               	dw	2048
   179  000CE2  1000               	dw	4096
   180  000CE4  0200               	dw	512
   181  000CE6  8000               	dw	32768
   182  000CE8  4000               	dw	16384
   183  000CEA  2000               	dw	8192
   184  000CEC  0100               	dw	256
   185  000CEE  0400               	dw	1024
   186  000CF0  0800               	dw	2048
   187  000CF2  1800               	dw	6144
   188  000CF4  1A00               	dw	6656
   189  000CF6  9A00               	dw	39424
   190  000CF8  DA00               	dw	55808
   191  000CFA  FA00               	dw	64000
   192  000CFC  FB00               	dw	64256
   193  000CFE  FF00               	dw	65280
   194  000D00  0000               	dw	0
   195  000D02  0000               	dw	0
   196                           
   197                           	psect	idataBANK0
   198  000F44                     __pidataBANK0:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _segMap
   202  000F44  00FF               	dw	255
   203  000F46  0003               	dw	3
   204  000F48  00FF               	dw	255
   205  000F4A  0003               	dw	3
   206  000F4C  00FF               	dw	255
   207  000F4E  0003               	dw	3
   208  000F50  00FF               	dw	255
   209  000F52  0003               	dw	3
   210  000F54  00FF               	dw	255
   211  000F56  0003               	dw	3
   212  000F58  00FF               	dw	255
   213  000F5A  0003               	dw	3
   214  000F5C  00FF               	dw	255
   215  000F5E  0003               	dw	3
   216  000F60  00FF               	dw	255
   217  000F62  0003               	dw	3
   218  000F64  00FF               	dw	255
   219  000F66  0003               	dw	3
   220                           
   221                           	psect	smallconst
   222  000800                     __psmallconst:
   223                           	opt stack 0
   224  000800  00                 	db	0
   225  000801                     _MESSAGE_LENGTH:
   226                           	opt stack 0
   227  000801  004A               	dw	74
   228  000803                     __end_of_MESSAGE_LENGTH:
   229                           	opt stack 0
   230  000803  4D                 	db	77
   231  000804  41                 	db	65
   232  000805  4B                 	db	75
   233  000806  45                 	db	69
   234  000807  52                 	db	82
   235  000808  20                 	db	32
   236  000809  46                 	db	70
   237  00080A  41                 	db	65
   238  00080B  49                 	db	73
   239  00080C  52                 	db	82
   240  00080D  45                 	db	69
   241  00080E  20                 	db	32
   242  00080F  54                 	db	84
   243  000810  4F                 	db	79
   244  000811  4B                 	db	75
   245  000812  59                 	db	89
   246  000813  4F                 	db	79
   247  000814  20                 	db	32
   248  000815  32                 	db	50
   249  000816  30                 	db	48
   250  000817  31                 	db	49
   251  000818  38                 	db	56
   252  000819  20                 	db	32
   253  00081A  48                 	db	72
   254  00081B  54                 	db	84
   255  00081C  4C                 	db	76
   256  00081D  41                 	db	65
   257  00081E  42                 	db	66
   258  00081F  4E                 	db	78
   259  000820  45                 	db	69
   260  000821  54                 	db	84
   261  000822  20                 	db	32
   262  000823  42                 	db	66
   263  000824  4F                 	db	79
   264  000825  4F                 	db	79
   265  000826  54                 	db	84
   266  000827  48                 	db	72
   267  000828  21                 	db	33
   268  000829  20                 	db	32
   269  00082A  54                 	db	84
   270  00082B  48                 	db	72
   271  00082C  49                 	db	73
   272  00082D  53                 	db	83
   273  00082E  20                 	db	32
   274  00082F  49                 	db	73
   275  000830  53                 	db	83
   276  000831  20                 	db	32
   277  000832  31                 	db	49
   278  000833  36                 	db	54
   279  000834  20                 	db	32
   280  000835  53                 	db	83
   281  000836  45                 	db	69
   282  000837  47                 	db	71
   283  000838  4D                 	db	77
   284  000839  45                 	db	69
   285  00083A  4E                 	db	78
   286  00083B  54                 	db	84
   287  00083C  20                 	db	32
   288  00083D  39                 	db	57
   289  00083E  20                 	db	32
   290  00083F  44                 	db	68
   291  000840  49                 	db	73
   292  000841  47                 	db	71
   293  000842  49                 	db	73
   294  000843  54                 	db	84
   295  000844  20                 	db	32
   296  000845  44                 	db	68
   297  000846  49                 	db	73
   298  000847  53                 	db	83
   299  000848  50                 	db	80
   300  000849  4C                 	db	76
   301  00084A  41                 	db	65
   302  00084B  59                 	db	89
   303  00084C  00                 	db	0
   304  00084D                     __end_of_DEMO_MESSAGE:
   305                           	opt stack 0
   306  00084D                     STR_1:
   307  00084D  41                 	db	65	;'A'
   308  00084E  42                 	db	66	;'B'
   309  00084F  43                 	db	67	;'C'
   310  000850  44                 	db	68	;'D'
   311  000851  45                 	db	69	;'E'
   312  000852  46                 	db	70	;'F'
   313  000853  47                 	db	71	;'G'
   314  000854  48                 	db	72	;'H'
   315  000855  49                 	db	73	;'I'
   316  000856  00                 	db	0
   317                           
   318                           ; #config settings
   319  000857  00                 	db	0	; dummy byte at the end
   320  0000                     
   321                           	psect	nvCOMRAM
   322  000055                     __pnvCOMRAM:
   323                           	opt stack 0
   324  000055                     _led_stat:
   325                           	opt stack 0
   326  000055                     	ds	1
   327  0000                     _SSPBUF	set	4041
   328  0000                     _SSPCON2bits	set	4037
   329  0000                     _SSPCON1	set	4038
   330  0000                     _SSPADD	set	4040
   331  0000                     _SSPSTAT	set	4039
   332  0000                     _SSPSTATbits	set	4039
   333  0000                     _SSPCON2	set	4037
   334  0000                     _RCREG	set	4014
   335  0000                     _PIR1bits	set	3998
   336  0000                     _SPBRG	set	4015
   337  0000                     _SPBRGH	set	4016
   338  0000                     _BAUDCON	set	4024
   339  0000                     _RCSTA	set	4011
   340  0000                     _INTCONbits	set	4082
   341  0000                     _PIE1bits	set	3997
   342  0000                     _PR2	set	4043
   343  0000                     _TMR2	set	4044
   344  0000                     _T2CON	set	4042
   345  0000                     _LATAbits	set	3977
   346  0000                     _LATCbits	set	3979
   347  0000                     _TRISE	set	3990
   348  0000                     _TRISD	set	3989
   349  0000                     _TRISC	set	3988
   350  0000                     _TRISB	set	3987
   351  0000                     _TRISA	set	3986
   352  0000                     _CMCON	set	4020
   353  0000                     _ADCON1	set	4033
   354  0000                     _LATBbits	set	3978
   355  0000                     _SSPIE	set	31979
   356  0000                     _SSPIF	set	31987
   357  0000                     _BRGH	set	32098
   358                           
   359                           	psect	cinit
   360  000EE0                     __pcinit:
   361                           	opt stack 0
   362  000EE0                     start_initialization:
   363                           	opt stack 0
   364  000EE0                     __initialization:
   365                           	opt stack 0
   366                           
   367                           ; Initialize objects allocated to BIGRAM (258 bytes)
   368                           ; load TBLPTR registers with __pidataBIGRAM
   369  000EE0  0E02               	movlw	low __pidataBIGRAM
   370  000EE2  6EF6               	movwf	tblptrl,c
   371  000EE4  0E0C               	movlw	high __pidataBIGRAM
   372  000EE6  6EF7               	movwf	tblptrh,c
   373  000EE8  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   374  000EEA  6EF8               	movwf	tblptru,c
   375  000EEC  EE00  F0A7         	lfsr	0,__pdataBIGRAM
   376  000EF0  EE11 F002          	lfsr	1,258
   377  000EF4                     copy_data0:
   378  000EF4  0009               	tblrd		*+
   379  000EF6  CFF5 FFEE          	movff	tablat,postinc0
   380  000EFA  50E5               	movf	postdec1,w,c
   381  000EFC  50E1               	movf	fsr1l,w,c
   382  000EFE  E1FA               	bnz	copy_data0
   383  000F00  50E2               	movf	fsr1h,w,c
   384  000F02  E1F8               	bnz	copy_data0
   385                           
   386                           ; Initialize objects allocated to BANK0 (36 bytes)
   387                           ; load TBLPTR registers with __pidataBANK0
   388  000F04  0E44               	movlw	low __pidataBANK0
   389  000F06  6EF6               	movwf	tblptrl,c
   390  000F08  0E0F               	movlw	high __pidataBANK0
   391  000F0A  6EF7               	movwf	tblptrh,c
   392  000F0C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   393  000F0E  6EF8               	movwf	tblptru,c
   394  000F10  EE00  F060         	lfsr	0,__pdataBANK0
   395  000F14  EE10 F024          	lfsr	1,36
   396  000F18                     copy_data1:
   397  000F18  0009               	tblrd		*+
   398  000F1A  CFF5 FFEE          	movff	tablat,postinc0
   399  000F1E  50E5               	movf	postdec1,w,c
   400  000F20  50E1               	movf	fsr1l,w,c
   401  000F22  E1FA               	bnz	copy_data1
   402                           
   403                           ; Clear objects allocated to BANK0 (2 bytes)
   404  000F24  0100               	movlb	0
   405  000F26  6BA6               	clrf	(__pbssBANK0+1)& (0+255),b
   406  000F28  6BA5               	clrf	__pbssBANK0& (0+255),b
   407                           
   408                           ; Clear objects allocated to COMRAM (4 bytes)
   409  000F2A  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   410  000F2C  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   411  000F2E  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   412  000F30  6A51               	clrf	__pbssCOMRAM& (0+255),c
   413  000F32                     end_of_initialization:
   414                           	opt stack 0
   415  000F32                     __end_of__initialization:
   416                           	opt stack 0
   417  000F32  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   418  000F34  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   419  000F36  0E00               	movlw	low (__Lsmallconst shr (0+16))
   420  000F38  6EF8               	movwf	tblptru,c
   421  000F3A  0E08               	movlw	high __Lsmallconst
   422  000F3C  6EF7               	movwf	tblptrh,c
   423  000F3E  0100               	movlb	0
   424  000F40  EF55  F005         	goto	_main	;jump to C main() function
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           postdec1	equ	0xFE5
   431                           fsr1h	equ	0xFE2
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	bssCOMRAM
   435  000051                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000051                     _divisor:
   438                           	opt stack 0
   439  000051                     	ds	2
   440  000053                     _digitPtr:
   441                           	opt stack 0
   442  000053                     	ds	2
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           postdec1	equ	0xFE5
   449                           fsr1h	equ	0xFE2
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssBANK0
   453  0000A5                     __pbssBANK0:
   454                           	opt stack 0
   455  0000A5                     _tmrIsr:
   456                           	opt stack 0
   457  0000A5                     	ds	2
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           postdec1	equ	0xFE5
   464                           fsr1h	equ	0xFE2
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	dataBANK0
   468  000060                     __pdataBANK0:
   469                           	opt stack 0
   470  000060                     _segMap:
   471                           	opt stack 0
   472  000060                     	ds	36
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           postdec1	equ	0xFE5
   479                           fsr1h	equ	0xFE2
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	dataBIGRAM
   483  0000A7                     __pdataBIGRAM:
   484                           	opt stack 0
   485  0000A7                     _fontList:
   486                           	opt stack 0
   487  0000A7                     	ds	258
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           postdec1	equ	0xFE5
   494                           fsr1h	equ	0xFE2
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	cstackBANK0
   498  000084                     __pcstackBANK0:
   499                           	opt stack 0
   500  000084                     setMsg@input:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x0
   504  000084                     	ds	2
   505  000086                     ??_setMsg:
   506                           
   507                           ; 1 bytes @ 0x2
   508  000086                     	ds	10
   509  000090                     setMsg@i:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0xC
   513  000090                     	ds	2
   514  000092                     ??_main:
   515                           
   516                           ; 1 bytes @ 0xE
   517  000092                     	ds	12
   518  00009E                     main@dotflag:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x1A
   522  00009E                     	ds	4
   523  0000A2                     main@digitSelector:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x1E
   527  0000A2                     	ds	2
   528  0000A4                     main@RxData:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x20
   532  0000A4                     	ds	1
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           postdec1	equ	0xFE5
   539                           fsr1h	equ	0xFE2
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	cstackCOMRAM
   543  000001                     __pcstackCOMRAM:
   544                           	opt stack 0
   545  000001                     ?___awmod:
   546                           	opt stack 0
   547  000001                     refreshShiftRegister@ptr:
   548                           	opt stack 0
   549  000001                     ___awmod@dividend:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_refreshShiftRegister:
   555  000003                     ___awmod@divisor:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2
   559  000003                     	ds	2
   560  000005                     ___awmod@counter:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x4
   564  000005                     	ds	1
   565  000006                     ___awmod@sign:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x5
   569  000006                     	ds	49
   570  000037                     refreshShiftRegister@map:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x36
   574  000037                     	ds	4
   575  00003B                     refreshShiftRegister@ledSelector:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x3A
   579  00003B                     	ds	2
   580  00003D                     refreshShiftRegister@i:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x3C
   584  00003D                     	ds	2
   585  00003F                     ??_isr:
   586                           
   587                           ; 1 bytes @ 0x3E
   588  00003F                     	ds	18
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           postinc0	equ	0xFEE
   594                           postdec1	equ	0xFE5
   595                           fsr1h	equ	0xFE2
   596                           fsr1l	equ	0xFE1
   597                           
   598 ;;
   599 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   600 ;;
   601 ;; *************** function _main *****************
   602 ;; Defined at:
   603 ;;		line 94 in file "main.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  dotflag         4   26[BANK0 ] unsigned long 
   608 ;;  digitSelecto    2   30[BANK0 ] short 
   609 ;;  RxData          1   32[BANK0 ] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   619 ;;      Params:         0       0       0       0       0       0       0       0       0
   620 ;;      Locals:         0       7       0       0       0       0       0       0       0
   621 ;;      Temps:          0      12       0       0       0       0       0       0       0
   622 ;;      Totals:         0      19       0       0       0       0       0       0       0
   623 ;;Total ram usage:       19 bytes
   624 ;; Hardware stack levels required when called:    3
   625 ;; This function calls:
   626 ;;		_setMsg
   627 ;; This function is called by:
   628 ;;		Startup code after reset
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text0
   633  000AAA                     __ptext0:
   634                           	opt stack 0
   635  000AAA                     _main:
   636                           	opt stack 28
   637                           
   638                           ;main.c: 96: ADCON1 = 0b00001111;
   639                           
   640                           ;incstack = 0
   641  000AAA  0E0F               	movlw	15
   642  000AAC  6EC1               	movwf	4033,c	;volatile
   643                           
   644                           ;main.c: 97: CMCON = 0b00000111;
   645  000AAE  0E07               	movlw	7
   646  000AB0  6EB4               	movwf	4020,c	;volatile
   647                           
   648                           ;main.c: 98: TRISA = 0b00000000;
   649  000AB2  0E00               	movlw	0
   650  000AB4  6E92               	movwf	3986,c	;volatile
   651                           
   652                           ;main.c: 99: TRISB = 0b00000000;
   653  000AB6  0E00               	movlw	0
   654  000AB8  6E93               	movwf	3987,c	;volatile
   655                           
   656                           ;main.c: 100: TRISC = 0b10000000;
   657  000ABA  0E80               	movlw	128
   658  000ABC  6E94               	movwf	3988,c	;volatile
   659                           
   660                           ;main.c: 101: TRISD = 0b00000000;
   661  000ABE  0E00               	movlw	0
   662  000AC0  6E95               	movwf	3989,c	;volatile
   663                           
   664                           ;main.c: 102: TRISE = 0b00000000;
   665  000AC2  0E00               	movlw	0
   666  000AC4  6E96               	movwf	3990,c	;volatile
   667                           
   668                           ;main.c: 104: LATCbits.LATC0 = 0;
   669  000AC6  908B               	bcf	3979,0,c	;volatile
   670                           
   671                           ;main.c: 105: LATCbits.LATC1 = 1;
   672  000AC8  828B               	bsf	3979,1,c	;volatile
   673                           
   674                           ;main.c: 107: LATCbits.LATC2 = 0;
   675  000ACA  948B               	bcf	3979,2,c	;volatile
   676                           
   677                           ;main.c: 110: LATAbits.LATA4 = 0;
   678  000ACC  9889               	bcf	3977,4,c	;volatile
   679                           
   680                           ;main.c: 111: LATAbits.LATA5 = 0;
   681  000ACE  9A89               	bcf	3977,5,c	;volatile
   682                           
   683                           ;main.c: 124: T2CON = 0;
   684  000AD0  0E00               	movlw	0
   685  000AD2  6ECA               	movwf	4042,c	;volatile
   686                           
   687                           ;main.c: 125: TMR2 = 0;
   688  000AD4  0E00               	movlw	0
   689  000AD6  6ECC               	movwf	4044,c	;volatile
   690                           
   691                           ;main.c: 126: PR2 = 125;
   692  000AD8  0E7D               	movlw	125
   693  000ADA  6ECB               	movwf	4043,c	;volatile
   694                           
   695                           ;main.c: 127: T2CON = 0b01111101;
   696  000ADC  0E7D               	movlw	125
   697  000ADE  6ECA               	movwf	4042,c	;volatile
   698                           
   699                           ;main.c: 130: PIE1bits.TMR2IE = 1;
   700  000AE0  829D               	bsf	3997,1,c	;volatile
   701                           
   702                           ;main.c: 131: INTCONbits.PEIE = 1;
   703  000AE2  8CF2               	bsf	intcon,6,c	;volatile
   704                           
   705                           ;main.c: 132: INTCONbits.GIE = 1;
   706  000AE4  8EF2               	bsf	intcon,7,c	;volatile
   707                           
   708                           ;main.c: 135: RCSTA = 0b10010000;
   709  000AE6  0E90               	movlw	144
   710  000AE8  6EAB               	movwf	4011,c	;volatile
   711                           
   712                           ;main.c: 136: BAUDCON = 0b00001000;
   713  000AEA  0E08               	movlw	8
   714  000AEC  6EB8               	movwf	4024,c	;volatile
   715                           
   716                           ;main.c: 137: SPBRGH = 0;
   717  000AEE  0E00               	movlw	0
   718  000AF0  6EB0               	movwf	4016,c	;volatile
   719                           
   720                           ;main.c: 138: BRGH = 0;
   721  000AF2  94AC               	bcf	4012,2,c	;volatile
   722                           
   723                           ;main.c: 139: SPBRG = 129;
   724  000AF4  0E81               	movlw	129
   725  000AF6  6EAF               	movwf	4015,c	;volatile
   726                           
   727                           ;main.c: 141: led_stat = 0b11110011;
   728  000AF8  0EF3               	movlw	243
   729  000AFA  6E55               	movwf	_led_stat,c
   730                           
   731                           ;main.c: 143: char RxData;
   732                           ;main.c: 144: short digitSelector;
   733                           ;main.c: 145: unsigned long dotflag;
   734                           ;main.c: 148: setMsg("ABCDEFGHI");
   735  000AFC  0E4D               	movlw	low STR_1
   736  000AFE  0100               	movlb	0	; () banked
   737  000B00  6F84               	movwf	setMsg@input& (0+255),b
   738  000B02  0E08               	movlw	high STR_1
   739  000B04  6F85               	movwf	(setMsg@input+1)& (0+255),b
   740  000B06  ECED  F006         	call	_setMsg	;wreg free
   741  000B0A                     l1084:
   742                           
   743                           ;main.c: 152: if (PIR1bits.RCIF) {
   744  000B0A  AA9E               	btfss	3998,5,c	;volatile
   745  000B0C  D070               	goto	l84
   746                           
   747                           ;main.c: 153: PIR1bits.RCIF = 0;
   748  000B0E  9A9E               	bcf	3998,5,c	;volatile
   749                           
   750                           ;main.c: 154: RxData = RCREG;
   751  000B10  CFAE F0A4          	movff	4014,main@RxData	;volatile
   752                           
   753                           ;main.c: 157: if ((RxData & 0b11100000) == 0b11100000) {
   754  000B14  0100               	movlb	0	; () banked
   755  000B16  51A4               	movf	main@RxData& (0+255),w,b
   756  000B18  0BE0               	andlw	224
   757  000B1A  0AE0               	xorlw	224
   758  000B1C  A4D8               	btfss	status,2,c
   759  000B1E  D067               	goto	l84
   760                           
   761                           ; BSR set to: 0
   762                           ;main.c: 158: digitSelector = (RxData & 0b00001111);
   763  000B20  C0A4  F092         	movff	main@RxData,??_main
   764  000B24  0E0F               	movlw	15
   765  000B26  1792               	andwf	??_main& (0+255),f,b
   766  000B28  5192               	movf	??_main& (0+255),w,b
   767  000B2A  6FA2               	movwf	main@digitSelector& (0+255),b
   768  000B2C  6BA3               	clrf	(main@digitSelector+1)& (0+255),b
   769                           
   770                           ;main.c: 159: dotflag = (RxData & 0b00010000) >> 4;
   771  000B2E  C0A4  F092         	movff	main@RxData,??_main
   772  000B32  3B92               	swapf	??_main& (0+255),f,b
   773  000B34  0E0F               	movlw	15
   774  000B36  1792               	andwf	??_main& (0+255),f,b
   775  000B38  0E01               	movlw	1
   776  000B3A  1792               	andwf	??_main& (0+255),f,b
   777  000B3C  5192               	movf	??_main& (0+255),w,b
   778  000B3E  6F9E               	movwf	main@dotflag& (0+255),b
   779  000B40  6B9F               	clrf	(main@dotflag+1)& (0+255),b
   780  000B42  6BA0               	clrf	(main@dotflag+2)& (0+255),b
   781  000B44  6BA1               	clrf	(main@dotflag+3)& (0+255),b
   782  000B46                     
   783                           ; BSR set to: 0
   784  000B46  AA9E               	btfss	3998,5,c	;volatile
   785  000B48  D7FE               	goto	l86
   786                           
   787                           ;main.c: 161: PIR1bits.RCIF = 0;
   788  000B4A  9A9E               	bcf	3998,5,c	;volatile
   789                           
   790                           ;main.c: 162: RxData = RCREG;
   791  000B4C  CFAE F0A4          	movff	4014,main@RxData	;volatile
   792                           
   793                           ;main.c: 163: if (digitSelector > 8) continue;
   794  000B50  0100               	movlb	0	; () banked
   795  000B52  BFA3               	btfsc	(main@digitSelector+1)& (0+255),7,b
   796  000B54  D006               	goto	l88
   797  000B56  51A3               	movf	(main@digitSelector+1)& (0+255),w,b
   798  000B58  E1D8               	bnz	l1084
   799  000B5A  0E09               	movlw	9
   800  000B5C  5DA2               	subwf	main@digitSelector& (0+255),w,b
   801  000B5E  B0D8               	btfsc	status,0,c
   802  000B60  D7D4               	goto	l82
   803  000B62                     l88:
   804                           
   805                           ; BSR set to: 0
   806                           ;main.c: 164: if (RxData > 0b01111111) RxData = ~RxData;
   807                           
   808                           ; BSR set to: 0
   809  000B62  0E7F               	movlw	127
   810  000B64  65A4               	cpfsgt	main@RxData& (0+255),b
   811  000B66  D001               	goto	l90
   812                           
   813                           ; BSR set to: 0
   814  000B68  1FA4               	comf	main@RxData& (0+255),f,b
   815  000B6A                     l90:
   816                           
   817                           ; BSR set to: 0
   818                           ;main.c: 165: segMap[digitSelector] = ~(fontList[RxData] | (dotflag << 16));
   819                           
   820                           ; BSR set to: 0
   821  000B6A  C09E  F092         	movff	main@dotflag,??_main
   822  000B6E  C09F  F093         	movff	main@dotflag+1,??_main+1
   823  000B72  C0A0  F094         	movff	main@dotflag+2,??_main+2
   824  000B76  C0A1  F095         	movff	main@dotflag+3,??_main+3
   825  000B7A  C093  F095         	movff	??_main+1,??_main+3
   826  000B7E  C092  F094         	movff	??_main,??_main+2
   827  000B82  6B93               	clrf	(??_main+1)& (0+255),b
   828  000B84  6B92               	clrf	??_main& (0+255),b
   829  000B86  51A4               	movf	main@RxData& (0+255),w,b
   830  000B88  0D02               	mullw	2
   831  000B8A  0EA7               	movlw	low _fontList
   832  000B8C  24F3               	addwf	prodl,w,c
   833  000B8E  6ED9               	movwf	fsr2l,c
   834  000B90  0E00               	movlw	high _fontList
   835  000B92  20F4               	addwfc	prodh,w,c
   836  000B94  6EDA               	movwf	fsr2h,c
   837  000B96  CFDE F096          	movff	postinc2,??_main+4
   838  000B9A  CFDD F097          	movff	postdec2,??_main+5
   839  000B9E  5196               	movf	(??_main+4)& (0+255),w,b
   840  000BA0  1192               	iorwf	??_main& (0+255),w,b
   841  000BA2  6F98               	movwf	(??_main+6)& (0+255),b
   842  000BA4  5197               	movf	(??_main+5)& (0+255),w,b
   843  000BA6  1193               	iorwf	(??_main+1)& (0+255),w,b
   844  000BA8  6F99               	movwf	(??_main+7)& (0+255),b
   845  000BAA  0E00               	movlw	0
   846  000BAC  1194               	iorwf	(??_main+2)& (0+255),w,b
   847  000BAE  6F9A               	movwf	(??_main+8)& (0+255),b
   848  000BB0  0E00               	movlw	0
   849  000BB2  1195               	iorwf	(??_main+3)& (0+255),w,b
   850  000BB4  6F9B               	movwf	(??_main+9)& (0+255),b
   851  000BB6  1F98               	comf	(??_main+6)& (0+255),f,b
   852  000BB8  1F99               	comf	(??_main+7)& (0+255),f,b
   853  000BBA  1F9A               	comf	(??_main+8)& (0+255),f,b
   854  000BBC  1F9B               	comf	(??_main+9)& (0+255),f,b
   855  000BBE  0E60               	movlw	low _segMap
   856  000BC0  6F9C               	movwf	(??_main+10)& (0+255),b
   857  000BC2  0E00               	movlw	high _segMap
   858  000BC4  6F9D               	movwf	(??_main+11)& (0+255),b
   859  000BC6  90D8               	bcf	status,0,c
   860  000BC8  35A2               	rlcf	main@digitSelector& (0+255),w,b
   861  000BCA  6ED9               	movwf	fsr2l,c
   862  000BCC  35A3               	rlcf	(main@digitSelector+1)& (0+255),w,b
   863  000BCE  6EDA               	movwf	fsr2h,c
   864  000BD0  90D8               	bcf	status,0,c
   865  000BD2  36D9               	rlcf	fsr2l,f,c
   866  000BD4  36DA               	rlcf	fsr2h,f,c
   867  000BD6  519C               	movf	(??_main+10)& (0+255),w,b
   868  000BD8  26D9               	addwf	fsr2l,f,c
   869  000BDA  519D               	movf	(??_main+11)& (0+255),w,b
   870  000BDC  22DA               	addwfc	fsr2h,f,c
   871  000BDE  C098  FFDE         	movff	??_main+6,postinc2
   872  000BE2  C099  FFDE         	movff	??_main+7,postinc2
   873  000BE6  C09A  FFDE         	movff	??_main+8,postinc2
   874  000BEA  C09B  FFDE         	movff	??_main+9,postinc2
   875  000BEE                     l84:
   876                           
   877                           ;main.c: 166: }
   878                           ;main.c: 167: }
   879                           ;main.c: 168: if (tmrIsr == 1) {
   880                           
   881                           ; BSR set to: 0
   882                           
   883                           ; BSR set to: 0
   884  000BEE  0100               	movlb	0	; () banked
   885  000BF0  05A5               	decf	_tmrIsr& (0+255),w,b
   886  000BF2  11A6               	iorwf	(_tmrIsr+1)& (0+255),w,b
   887  000BF4  A4D8               	btfss	status,2,c
   888  000BF6  D789               	goto	l82
   889                           
   890                           ; BSR set to: 0
   891                           ;main.c: 169: tmrIsr = 0;
   892  000BF8  0E00               	movlw	0
   893  000BFA  6FA6               	movwf	(_tmrIsr+1)& (0+255),b
   894  000BFC  0E00               	movlw	0
   895  000BFE  6FA5               	movwf	_tmrIsr& (0+255),b
   896                           
   897                           ; BSR set to: 0
   898                           
   899                           ; BSR set to: 0
   900  000C00  D784               	goto	l82
   901  000C02                     __end_of_main:
   902                           	opt stack 0
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           prodh	equ	0xFF4
   908                           prodl	equ	0xFF3
   909                           intcon	equ	0xFF2
   910                           postinc0	equ	0xFEE
   911                           postdec1	equ	0xFE5
   912                           fsr1h	equ	0xFE2
   913                           fsr1l	equ	0xFE1
   914                           postinc2	equ	0xFDE
   915                           postdec2	equ	0xFDD
   916                           fsr2h	equ	0xFDA
   917                           fsr2l	equ	0xFD9
   918                           status	equ	0xFD8
   919                           
   920 ;; *************** function _setMsg *****************
   921 ;; Defined at:
   922 ;;		line 62 in file "main.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  input           2    0[BANK0 ] PTR unsigned char 
   925 ;;		 -> STR_1(10), 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  i               2   12[BANK0 ] int 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   937 ;;      Params:         0       2       0       0       0       0       0       0       0
   938 ;;      Locals:         0       2       0       0       0       0       0       0       0
   939 ;;      Temps:          0      10       0       0       0       0       0       0       0
   940 ;;      Totals:         0      14       0       0       0       0       0       0       0
   941 ;;Total ram usage:       14 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    2
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text1
   952  000DDA                     __ptext1:
   953                           	opt stack 0
   954  000DDA                     _setMsg:
   955                           	opt stack 28
   956                           
   957                           ;main.c: 63: for (int i = 0; i < 9; i++) {
   958                           
   959                           ; BSR set to: 0
   960                           ;incstack = 0
   961  000DDA  0E00               	movlw	0
   962  000DDC  0100               	movlb	0	; () banked
   963  000DDE  6F91               	movwf	(setMsg@i+1)& (0+255),b
   964  000DE0  0E00               	movlw	0
   965  000DE2  6F90               	movwf	setMsg@i& (0+255),b
   966  000DE4                     l974:
   967                           
   968                           ; BSR set to: 0
   969  000DE4  BF91               	btfsc	(setMsg@i+1)& (0+255),7,b
   970  000DE6  D006               	goto	l68
   971  000DE8  5191               	movf	(setMsg@i+1)& (0+255),w,b
   972  000DEA  E141               	bnz	l70
   973  000DEC  0E09               	movlw	9
   974  000DEE  5D90               	subwf	setMsg@i& (0+255),w,b
   975  000DF0  B0D8               	btfsc	status,0,c
   976  000DF2  0012               	return	
   977  000DF4                     l68:
   978                           
   979                           ; BSR set to: 0
   980                           ;main.c: 64: segMap[i] = ~(uint32_t)(fontList[input[i]] | (1 << 16));
   981                           
   982                           ; BSR set to: 0
   983  000DF4  5190               	movf	setMsg@i& (0+255),w,b
   984  000DF6  2584               	addwf	setMsg@input& (0+255),w,b
   985  000DF8  6F86               	movwf	??_setMsg& (0+255),b
   986  000DFA  5191               	movf	(setMsg@i+1)& (0+255),w,b
   987  000DFC  2185               	addwfc	(setMsg@input+1)& (0+255),w,b
   988  000DFE  6F87               	movwf	(??_setMsg+1)& (0+255),b
   989  000E00  C086  FFF6         	movff	??_setMsg,tblptrl
   990  000E04  C087  FFF7         	movff	??_setMsg+1,tblptrh
   991  000E08                     	if	0	;tblptru may be non-zero
   992  000E08                     	endif
   993  000E08                     	if	0	;tblptru may be non-zero
   994  000E08                     	endif
   995  000E08  0008               	tblrd		*
   996  000E0A  50F5               	movf	tablat,w,c
   997  000E0C  0D02               	mullw	2
   998  000E0E  0EA7               	movlw	low _fontList
   999  000E10  24F3               	addwf	prodl,w,c
  1000  000E12  6ED9               	movwf	fsr2l,c
  1001  000E14  0E00               	movlw	high _fontList
  1002  000E16  20F4               	addwfc	prodh,w,c
  1003  000E18  6EDA               	movwf	fsr2h,c
  1004  000E1A  CFDE F088          	movff	postinc2,??_setMsg+2
  1005  000E1E  CFDD F089          	movff	postdec2,??_setMsg+3
  1006  000E22  0E01               	movlw	1
  1007  000E24  1188               	iorwf	(??_setMsg+2)& (0+255),w,b
  1008  000E26  6F8A               	movwf	(??_setMsg+4)& (0+255),b
  1009  000E28  5189               	movf	(??_setMsg+3)& (0+255),w,b
  1010  000E2A  6F8B               	movwf	(??_setMsg+5)& (0+255),b
  1011  000E2C  6B8C               	clrf	(??_setMsg+6)& (0+255),b
  1012  000E2E  6B8D               	clrf	(??_setMsg+7)& (0+255),b
  1013  000E30  1F8A               	comf	(??_setMsg+4)& (0+255),f,b
  1014  000E32  1F8B               	comf	(??_setMsg+5)& (0+255),f,b
  1015  000E34  1F8C               	comf	(??_setMsg+6)& (0+255),f,b
  1016  000E36  1F8D               	comf	(??_setMsg+7)& (0+255),f,b
  1017  000E38  0E60               	movlw	low _segMap
  1018  000E3A  6F8E               	movwf	(??_setMsg+8)& (0+255),b
  1019  000E3C  0E00               	movlw	high _segMap
  1020  000E3E  6F8F               	movwf	(??_setMsg+9)& (0+255),b
  1021  000E40  90D8               	bcf	status,0,c
  1022  000E42  3590               	rlcf	setMsg@i& (0+255),w,b
  1023  000E44  6ED9               	movwf	fsr2l,c
  1024  000E46  3591               	rlcf	(setMsg@i+1)& (0+255),w,b
  1025  000E48  6EDA               	movwf	fsr2h,c
  1026  000E4A  90D8               	bcf	status,0,c
  1027  000E4C  36D9               	rlcf	fsr2l,f,c
  1028  000E4E  36DA               	rlcf	fsr2h,f,c
  1029  000E50  518E               	movf	(??_setMsg+8)& (0+255),w,b
  1030  000E52  26D9               	addwf	fsr2l,f,c
  1031  000E54  518F               	movf	(??_setMsg+9)& (0+255),w,b
  1032  000E56  22DA               	addwfc	fsr2h,f,c
  1033  000E58  C08A  FFDE         	movff	??_setMsg+4,postinc2
  1034  000E5C  C08B  FFDE         	movff	??_setMsg+5,postinc2
  1035  000E60  C08C  FFDE         	movff	??_setMsg+6,postinc2
  1036  000E64  C08D  FFDE         	movff	??_setMsg+7,postinc2
  1037                           
  1038                           ; BSR set to: 0
  1039  000E68  4B90               	infsnz	setMsg@i& (0+255),f,b
  1040  000E6A  2B91               	incf	(setMsg@i+1)& (0+255),f,b
  1041  000E6C  D7BB               	goto	l974
  1042  000E6E                     l70:
  1043                           
  1044                           ; BSR set to: 0
  1045  000E6E  0012               	return		;funcret
  1046  000E70                     __end_of_setMsg:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           prodh	equ	0xFF4
  1053                           prodl	equ	0xFF3
  1054                           intcon	equ	0xFF2
  1055                           postinc0	equ	0xFEE
  1056                           postdec1	equ	0xFE5
  1057                           fsr1h	equ	0xFE2
  1058                           fsr1l	equ	0xFE1
  1059                           postinc2	equ	0xFDE
  1060                           postdec2	equ	0xFDD
  1061                           fsr2h	equ	0xFDA
  1062                           fsr2l	equ	0xFD9
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _isr *****************
  1066 ;; Defined at:
  1067 ;;		line 186 in file "main.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1083 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1084 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:       18 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    1
  1088 ;; This function calls:
  1089 ;;		___awmod
  1090 ;;		_refreshShiftRegister
  1091 ;;		_timerfunc
  1092 ;; This function is called by:
  1093 ;;		Interrupt level 2
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	intcode
  1098  000008                     __pintcode:
  1099                           	opt stack 0
  1100  000008                     _isr:
  1101                           	opt stack 28
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;incstack = 0
  1105  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1106  00000A  ED82  F006         	call	int_func,f	;refresh shadow registers
  1107                           tblptru	equ	0xFF8
  1108                           tblptrh	equ	0xFF7
  1109                           tblptrl	equ	0xFF6
  1110                           tablat	equ	0xFF5
  1111                           prodh	equ	0xFF4
  1112                           prodl	equ	0xFF3
  1113                           intcon	equ	0xFF2
  1114                           postinc0	equ	0xFEE
  1115                           postdec1	equ	0xFE5
  1116                           fsr1h	equ	0xFE2
  1117                           fsr1l	equ	0xFE1
  1118                           postinc2	equ	0xFDE
  1119                           postdec2	equ	0xFDD
  1120                           fsr2h	equ	0xFDA
  1121                           fsr2l	equ	0xFD9
  1122                           status	equ	0xFD8
  1123                           
  1124                           	psect	intcode_body
  1125  000D04                     __pintcode_body:
  1126                           	opt stack 28
  1127  000D04                     int_func:
  1128                           	opt stack 28
  1129  000D04  0006               	pop		; remove dummy address from shadow register refresh
  1130  000D06  CFFA F03F          	movff	pclath,??_isr
  1131  000D0A  CFFB F040          	movff	pclatu,??_isr+1
  1132  000D0E  CFE9 F041          	movff	fsr0l,??_isr+2
  1133  000D12  CFEA F042          	movff	fsr0h,??_isr+3
  1134  000D16  CFE1 F043          	movff	fsr1l,??_isr+4
  1135  000D1A  CFE2 F044          	movff	fsr1h,??_isr+5
  1136  000D1E  CFD9 F045          	movff	fsr2l,??_isr+6
  1137  000D22  CFDA F046          	movff	fsr2h,??_isr+7
  1138  000D26  CFF3 F047          	movff	prodl,??_isr+8
  1139  000D2A  CFF4 F048          	movff	prodh,??_isr+9
  1140  000D2E  CFF6 F049          	movff	tblptrl,??_isr+10
  1141  000D32  CFF7 F04A          	movff	tblptrh,??_isr+11
  1142  000D36  CFF8 F04B          	movff	tblptru,??_isr+12
  1143  000D3A  CFF5 F04C          	movff	tablat,??_isr+13
  1144  000D3E  C056  F04D         	movff	btemp,??_isr+14
  1145  000D42  C057  F04E         	movff	btemp+1,??_isr+15
  1146  000D46  C058  F04F         	movff	btemp+2,??_isr+16
  1147  000D4A  C059  F050         	movff	btemp+3,??_isr+17
  1148                           
  1149                           ;main.c: 187: if (PIR1bits.TMR2IF) {
  1150  000D4E  A29E               	btfss	3998,1,c	;volatile
  1151  000D50  D01E               	goto	i2l104
  1152                           
  1153                           ;main.c: 188: PIR1bits.TMR2IF = 0;
  1154  000D52  929E               	bcf	3998,1,c	;volatile
  1155                           
  1156                           ;main.c: 189: tmrIsr = 1;
  1157  000D54  0E00               	movlw	0
  1158  000D56  0100               	movlb	0	; () banked
  1159  000D58  6FA6               	movwf	(_tmrIsr+1)& (0+255),b
  1160  000D5A  0E01               	movlw	1
  1161  000D5C  6FA5               	movwf	_tmrIsr& (0+255),b
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;main.c: 190: timerfunc();
  1165  000D5E  ECB4  F007         	call	_timerfunc	;wreg free
  1166                           
  1167                           ;main.c: 191: refreshShiftRegister(digitPtr);
  1168  000D62  C053  F001         	movff	_digitPtr,refreshShiftRegister@ptr
  1169  000D66  C054  F002         	movff	_digitPtr+1,refreshShiftRegister@ptr+1
  1170  000D6A  EC2C  F004         	call	_refreshShiftRegister	;wreg free
  1171                           
  1172                           ;main.c: 192: digitPtr = (digitPtr+1)%9;
  1173  000D6E  0E01               	movlw	1
  1174  000D70  2453               	addwf	_digitPtr,w,c
  1175  000D72  6E01               	movwf	___awmod@dividend,c
  1176  000D74  0E00               	movlw	0
  1177  000D76  2054               	addwfc	_digitPtr+1,w,c
  1178  000D78  6E02               	movwf	___awmod@dividend+1,c
  1179  000D7A  0E00               	movlw	0
  1180  000D7C  6E04               	movwf	___awmod@divisor+1,c
  1181  000D7E  0E09               	movlw	9
  1182  000D80  6E03               	movwf	___awmod@divisor,c
  1183  000D82  EC38  F007         	call	___awmod	;wreg free
  1184  000D86  C001  F053         	movff	?___awmod,_digitPtr
  1185  000D8A  C002  F054         	movff	?___awmod+1,_digitPtr+1
  1186  000D8E                     i2l104:
  1187  000D8E  C050  F059         	movff	??_isr+17,btemp+3
  1188  000D92  C04F  F058         	movff	??_isr+16,btemp+2
  1189  000D96  C04E  F057         	movff	??_isr+15,btemp+1
  1190  000D9A  C04D  F056         	movff	??_isr+14,btemp
  1191  000D9E  C04C  FFF5         	movff	??_isr+13,tablat
  1192  000DA2  C04B  FFF8         	movff	??_isr+12,tblptru
  1193  000DA6  C04A  FFF7         	movff	??_isr+11,tblptrh
  1194  000DAA  C049  FFF6         	movff	??_isr+10,tblptrl
  1195  000DAE  C048  FFF4         	movff	??_isr+9,prodh
  1196  000DB2  C047  FFF3         	movff	??_isr+8,prodl
  1197  000DB6  C046  FFDA         	movff	??_isr+7,fsr2h
  1198  000DBA  C045  FFD9         	movff	??_isr+6,fsr2l
  1199  000DBE  C044  FFE2         	movff	??_isr+5,fsr1h
  1200  000DC2  C043  FFE1         	movff	??_isr+4,fsr1l
  1201  000DC6  C042  FFEA         	movff	??_isr+3,fsr0h
  1202  000DCA  C041  FFE9         	movff	??_isr+2,fsr0l
  1203  000DCE  C040  FFFB         	movff	??_isr+1,pclatu
  1204  000DD2  C03F  FFFA         	movff	??_isr,pclath
  1205  000DD6  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1206  000DD8  0011               	retfie		f
  1207  000DDA                     __end_of_isr:
  1208                           	opt stack 0
  1209                           pclatu	equ	0xFFB
  1210                           pclath	equ	0xFFA
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           prodh	equ	0xFF4
  1216                           prodl	equ	0xFF3
  1217                           intcon	equ	0xFF2
  1218                           postinc0	equ	0xFEE
  1219                           fsr0h	equ	0xFEA
  1220                           fsr0l	equ	0xFE9
  1221                           postdec1	equ	0xFE5
  1222                           fsr1h	equ	0xFE2
  1223                           fsr1l	equ	0xFE1
  1224                           postinc2	equ	0xFDE
  1225                           postdec2	equ	0xFDD
  1226                           fsr2h	equ	0xFDA
  1227                           fsr2l	equ	0xFD9
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function _timerfunc *****************
  1231 ;; Defined at:
  1232 ;;		line 179 in file "main.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		status,2, status,0
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        0 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_isr
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text3
  1260  000F68                     __ptext3:
  1261                           	opt stack 0
  1262  000F68                     _timerfunc:
  1263                           	opt stack 28
  1264                           
  1265                           ;main.c: 180: if (divisor++ == 100) {
  1266                           
  1267                           ;incstack = 0
  1268  000F68  4A51               	infsnz	_divisor,f,c
  1269  000F6A  2A52               	incf	_divisor+1,f,c
  1270  000F6C  0012               	return	
  1271  000F6E                     __end_of_timerfunc:
  1272                           	opt stack 0
  1273                           pclatu	equ	0xFFB
  1274                           pclath	equ	0xFFA
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           intcon	equ	0xFF2
  1282                           postinc0	equ	0xFEE
  1283                           fsr0h	equ	0xFEA
  1284                           fsr0l	equ	0xFE9
  1285                           postdec1	equ	0xFE5
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function _refreshShiftRegister *****************
  1295 ;; Defined at:
  1296 ;;		line 70 in file "main.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  ptr             2    0[COMRAM] int 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  i               2   60[COMRAM] int 
  1301 ;;  map             4   54[COMRAM] unsigned long 
  1302 ;;  ledSelector     2   58[COMRAM] unsigned int 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1312 ;;      Params:         2       0       0       0       0       0       0       0       0
  1313 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1314 ;;      Temps:         52       0       0       0       0       0       0       0       0
  1315 ;;      Totals:        62       0       0       0       0       0       0       0       0
  1316 ;;Total ram usage:       62 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_isr
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text4
  1326  000858                     __ptext4:
  1327                           	opt stack 0
  1328  000858                     _refreshShiftRegister:
  1329                           	opt stack 28
  1330                           
  1331                           ;main.c: 71: uint16_t ledSelector = 0b1 << ptr;
  1332                           
  1333                           ;incstack = 0
  1334  000858  C001  F003         	movff	refreshShiftRegister@ptr,??_refreshShiftRegister
  1335  00085C  0E01               	movlw	1
  1336  00085E  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1337  000860  0E00               	movlw	0
  1338  000862  6E05               	movwf	(??_refreshShiftRegister+2)& (0+255),c
  1339  000864  2A03               	incf	??_refreshShiftRegister,f,c
  1340  000866  D003               	goto	i2u31_44
  1341  000868                     i2u31_45:
  1342  000868  90D8               	bcf	status,0,c
  1343  00086A  3604               	rlcf	??_refreshShiftRegister+1,f,c
  1344  00086C  3605               	rlcf	??_refreshShiftRegister+2,f,c
  1345  00086E                     i2u31_44:
  1346  00086E  2E03               	decfsz	??_refreshShiftRegister,f,c
  1347  000870  D7FB               	goto	i2u31_45
  1348  000872  C004  F03B         	movff	??_refreshShiftRegister+1,refreshShiftRegister@ledSelector
  1349  000876  C005  F03C         	movff	??_refreshShiftRegister+2,refreshShiftRegister@ledSelector+1
  1350                           
  1351                           ;main.c: 73: uint32_t map = ((segMap[ptr] & 0b11111111) << 24)
  1352                           ;main.c: 74: | ((segMap[ptr] & 0b1111111100000000) << 8)
  1353                           ;main.c: 75: | ((ledSelector & 0b0000000011) << 14)
  1354                           ;main.c: 76: | ((led_stat & 0b00001111) << 10)
  1355                           ;main.c: 77: | ((segMap[ptr] & 0b110000000000000000) >> 8)
  1356                           ;main.c: 78: | ((ledSelector & 0b1111111100) >> 2);
  1357  00087A  0E60               	movlw	low _segMap
  1358  00087C  6E03               	movwf	??_refreshShiftRegister& (0+255),c
  1359  00087E  0E00               	movlw	high _segMap
  1360  000880  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1361  000882  90D8               	bcf	status,0,c
  1362  000884  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1363  000886  6ED9               	movwf	fsr2l,c
  1364  000888  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1365  00088A  6EDA               	movwf	fsr2h,c
  1366  00088C  90D8               	bcf	status,0,c
  1367  00088E  36D9               	rlcf	fsr2l,f,c
  1368  000890  36DA               	rlcf	fsr2h,f,c
  1369  000892  5003               	movf	??_refreshShiftRegister,w,c
  1370  000894  26D9               	addwf	fsr2l,f,c
  1371  000896  5004               	movf	??_refreshShiftRegister+1,w,c
  1372  000898  22DA               	addwfc	fsr2h,f,c
  1373  00089A  CFDE F005          	movff	postinc2,??_refreshShiftRegister+2
  1374  00089E  CFDE F006          	movff	postinc2,??_refreshShiftRegister+3
  1375  0008A2  CFDE F007          	movff	postinc2,??_refreshShiftRegister+4
  1376  0008A6  CFDE F008          	movff	postinc2,??_refreshShiftRegister+5
  1377  0008AA  C006  F005         	movff	??_refreshShiftRegister+3,??_refreshShiftRegister+2
  1378  0008AE  C007  F006         	movff	??_refreshShiftRegister+4,??_refreshShiftRegister+3
  1379  0008B2  C008  F007         	movff	??_refreshShiftRegister+5,??_refreshShiftRegister+4
  1380  0008B6  6A08               	clrf	??_refreshShiftRegister+5,c
  1381  0008B8  0E00               	movlw	0
  1382  0008BA  1405               	andwf	??_refreshShiftRegister+2,w,c
  1383  0008BC  6E09               	movwf	(??_refreshShiftRegister+6)& (0+255),c
  1384  0008BE  0E03               	movlw	3
  1385  0008C0  1406               	andwf	??_refreshShiftRegister+3,w,c
  1386  0008C2  6E0A               	movwf	(??_refreshShiftRegister+7)& (0+255),c
  1387  0008C4  0E00               	movlw	0
  1388  0008C6  1407               	andwf	??_refreshShiftRegister+4,w,c
  1389  0008C8  6E0B               	movwf	(??_refreshShiftRegister+8)& (0+255),c
  1390  0008CA  0E00               	movlw	0
  1391  0008CC  1408               	andwf	??_refreshShiftRegister+5,w,c
  1392  0008CE  6E0C               	movwf	(??_refreshShiftRegister+9)& (0+255),c
  1393  0008D0  5055               	movf	_led_stat,w,c
  1394  0008D2  0B0F               	andlw	15
  1395  0008D4  6E0D               	movwf	(??_refreshShiftRegister+10)& (0+255),c
  1396  0008D6  6A0E               	clrf	(??_refreshShiftRegister+11)& (0+255),c
  1397  0008D8  0E0A               	movlw	10
  1398  0008DA                     i2u32_45:
  1399  0008DA  90D8               	bcf	status,0,c
  1400  0008DC  360D               	rlcf	??_refreshShiftRegister+10,f,c
  1401  0008DE  360E               	rlcf	??_refreshShiftRegister+11,f,c
  1402  0008E0  2EE8               	decfsz	wreg,f,c
  1403  0008E2  D7FB               	goto	i2u32_45
  1404  0008E4  C00D  F00F         	movff	??_refreshShiftRegister+10,??_refreshShiftRegister+12
  1405  0008E8  C00E  F010         	movff	??_refreshShiftRegister+11,??_refreshShiftRegister+13
  1406  0008EC  0E00               	movlw	0
  1407  0008EE  BE10               	btfsc	(??_refreshShiftRegister+13)& (0+255),7,c
  1408  0008F0  0EFF               	movlw	255
  1409  0008F2  6E11               	movwf	(??_refreshShiftRegister+14)& (0+255),c
  1410  0008F4  6E12               	movwf	(??_refreshShiftRegister+15)& (0+255),c
  1411  0008F6  0E03               	movlw	3
  1412  0008F8  143B               	andwf	refreshShiftRegister@ledSelector,w,c
  1413  0008FA  6E13               	movwf	(??_refreshShiftRegister+16)& (0+255),c
  1414  0008FC  0E00               	movlw	0
  1415  0008FE  143C               	andwf	refreshShiftRegister@ledSelector+1,w,c
  1416  000900  6E14               	movwf	(??_refreshShiftRegister+17)& (0+255),c
  1417  000902  0E0E               	movlw	14
  1418  000904                     i2u33_45:
  1419  000904  90D8               	bcf	status,0,c
  1420  000906  3613               	rlcf	??_refreshShiftRegister+16,f,c
  1421  000908  3614               	rlcf	??_refreshShiftRegister+17,f,c
  1422  00090A  2EE8               	decfsz	wreg,f,c
  1423  00090C  D7FB               	goto	i2u33_45
  1424  00090E  0E60               	movlw	low _segMap
  1425  000910  6E15               	movwf	(??_refreshShiftRegister+18)& (0+255),c
  1426  000912  0E00               	movlw	high _segMap
  1427  000914  6E16               	movwf	(??_refreshShiftRegister+19)& (0+255),c
  1428  000916  90D8               	bcf	status,0,c
  1429  000918  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1430  00091A  6ED9               	movwf	fsr2l,c
  1431  00091C  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1432  00091E  6EDA               	movwf	fsr2h,c
  1433  000920  90D8               	bcf	status,0,c
  1434  000922  36D9               	rlcf	fsr2l,f,c
  1435  000924  36DA               	rlcf	fsr2h,f,c
  1436  000926  5015               	movf	??_refreshShiftRegister+18,w,c
  1437  000928  26D9               	addwf	fsr2l,f,c
  1438  00092A  5016               	movf	??_refreshShiftRegister+19,w,c
  1439  00092C  22DA               	addwfc	fsr2h,f,c
  1440  00092E  0E00               	movlw	0
  1441  000930  14DE               	andwf	postinc2,w,c
  1442  000932  6E17               	movwf	(??_refreshShiftRegister+20)& (0+255),c
  1443  000934  0EFF               	movlw	255
  1444  000936  14DE               	andwf	postinc2,w,c
  1445  000938  6E18               	movwf	(??_refreshShiftRegister+21)& (0+255),c
  1446  00093A  0E00               	movlw	0
  1447  00093C  14DE               	andwf	postinc2,w,c
  1448  00093E  6E19               	movwf	(??_refreshShiftRegister+22)& (0+255),c
  1449  000940  0E00               	movlw	0
  1450  000942  14DE               	andwf	postinc2,w,c
  1451  000944  6E1A               	movwf	(??_refreshShiftRegister+23)& (0+255),c
  1452  000946  C019  F01A         	movff	??_refreshShiftRegister+22,??_refreshShiftRegister+23
  1453  00094A  C018  F019         	movff	??_refreshShiftRegister+21,??_refreshShiftRegister+22
  1454  00094E  C017  F018         	movff	??_refreshShiftRegister+20,??_refreshShiftRegister+21
  1455  000952  6A17               	clrf	??_refreshShiftRegister+20,c
  1456  000954  0E60               	movlw	low _segMap
  1457  000956  6E1B               	movwf	(??_refreshShiftRegister+24)& (0+255),c
  1458  000958  0E00               	movlw	high _segMap
  1459  00095A  6E1C               	movwf	(??_refreshShiftRegister+25)& (0+255),c
  1460  00095C  90D8               	bcf	status,0,c
  1461  00095E  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1462  000960  6ED9               	movwf	fsr2l,c
  1463  000962  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1464  000964  6EDA               	movwf	fsr2h,c
  1465  000966  90D8               	bcf	status,0,c
  1466  000968  36D9               	rlcf	fsr2l,f,c
  1467  00096A  36DA               	rlcf	fsr2h,f,c
  1468  00096C  501B               	movf	??_refreshShiftRegister+24,w,c
  1469  00096E  26D9               	addwf	fsr2l,f,c
  1470  000970  501C               	movf	??_refreshShiftRegister+25,w,c
  1471  000972  22DA               	addwfc	fsr2h,f,c
  1472  000974  CFDE F01D          	movff	postinc2,??_refreshShiftRegister+26
  1473  000978  CFDE F01E          	movff	postinc2,??_refreshShiftRegister+27
  1474  00097C  CFDE F01F          	movff	postinc2,??_refreshShiftRegister+28
  1475  000980  CFDE F020          	movff	postinc2,??_refreshShiftRegister+29
  1476  000984  0EFF               	movlw	255
  1477  000986  141D               	andwf	??_refreshShiftRegister+26,w,c
  1478  000988  6E21               	movwf	(??_refreshShiftRegister+30)& (0+255),c
  1479  00098A  0E00               	movlw	0
  1480  00098C  141E               	andwf	??_refreshShiftRegister+27,w,c
  1481  00098E  6E22               	movwf	(??_refreshShiftRegister+31)& (0+255),c
  1482  000990  0E00               	movlw	0
  1483  000992  141F               	andwf	??_refreshShiftRegister+28,w,c
  1484  000994  6E23               	movwf	(??_refreshShiftRegister+32)& (0+255),c
  1485  000996  0E00               	movlw	0
  1486  000998  1420               	andwf	??_refreshShiftRegister+29,w,c
  1487  00099A  6E24               	movwf	(??_refreshShiftRegister+33)& (0+255),c
  1488  00099C  C021  F024         	movff	??_refreshShiftRegister+30,??_refreshShiftRegister+33
  1489  0009A0  6A23               	clrf	??_refreshShiftRegister+32,c
  1490  0009A2  6A22               	clrf	??_refreshShiftRegister+31,c
  1491  0009A4  6A21               	clrf	??_refreshShiftRegister+30,c
  1492  0009A6  5017               	movf	??_refreshShiftRegister+20,w,c
  1493  0009A8  1021               	iorwf	??_refreshShiftRegister+30,w,c
  1494  0009AA  6E25               	movwf	(??_refreshShiftRegister+34)& (0+255),c
  1495  0009AC  5018               	movf	??_refreshShiftRegister+21,w,c
  1496  0009AE  1022               	iorwf	??_refreshShiftRegister+31,w,c
  1497  0009B0  6E26               	movwf	(??_refreshShiftRegister+35)& (0+255),c
  1498  0009B2  5019               	movf	??_refreshShiftRegister+22,w,c
  1499  0009B4  1023               	iorwf	??_refreshShiftRegister+32,w,c
  1500  0009B6  6E27               	movwf	(??_refreshShiftRegister+36)& (0+255),c
  1501  0009B8  501A               	movf	??_refreshShiftRegister+23,w,c
  1502  0009BA  1024               	iorwf	??_refreshShiftRegister+33,w,c
  1503  0009BC  6E28               	movwf	(??_refreshShiftRegister+37)& (0+255),c
  1504  0009BE  5013               	movf	??_refreshShiftRegister+16,w,c
  1505  0009C0  1025               	iorwf	??_refreshShiftRegister+34,w,c
  1506  0009C2  6E29               	movwf	(??_refreshShiftRegister+38)& (0+255),c
  1507  0009C4  5014               	movf	??_refreshShiftRegister+17,w,c
  1508  0009C6  1026               	iorwf	??_refreshShiftRegister+35,w,c
  1509  0009C8  6E2A               	movwf	(??_refreshShiftRegister+39)& (0+255),c
  1510  0009CA  0E00               	movlw	0
  1511  0009CC  1027               	iorwf	??_refreshShiftRegister+36,w,c
  1512  0009CE  6E2B               	movwf	(??_refreshShiftRegister+40)& (0+255),c
  1513  0009D0  0E00               	movlw	0
  1514  0009D2  1028               	iorwf	??_refreshShiftRegister+37,w,c
  1515  0009D4  6E2C               	movwf	(??_refreshShiftRegister+41)& (0+255),c
  1516  0009D6  500F               	movf	??_refreshShiftRegister+12,w,c
  1517  0009D8  1029               	iorwf	??_refreshShiftRegister+38,w,c
  1518  0009DA  6E2D               	movwf	(??_refreshShiftRegister+42)& (0+255),c
  1519  0009DC  5010               	movf	??_refreshShiftRegister+13,w,c
  1520  0009DE  102A               	iorwf	??_refreshShiftRegister+39,w,c
  1521  0009E0  6E2E               	movwf	(??_refreshShiftRegister+43)& (0+255),c
  1522  0009E2  5011               	movf	??_refreshShiftRegister+14,w,c
  1523  0009E4  102B               	iorwf	??_refreshShiftRegister+40,w,c
  1524  0009E6  6E2F               	movwf	(??_refreshShiftRegister+44)& (0+255),c
  1525  0009E8  5012               	movf	??_refreshShiftRegister+15,w,c
  1526  0009EA  102C               	iorwf	??_refreshShiftRegister+41,w,c
  1527  0009EC  6E30               	movwf	(??_refreshShiftRegister+45)& (0+255),c
  1528  0009EE  5009               	movf	??_refreshShiftRegister+6,w,c
  1529  0009F0  102D               	iorwf	??_refreshShiftRegister+42,w,c
  1530  0009F2  6E31               	movwf	(??_refreshShiftRegister+46)& (0+255),c
  1531  0009F4  500A               	movf	??_refreshShiftRegister+7,w,c
  1532  0009F6  102E               	iorwf	??_refreshShiftRegister+43,w,c
  1533  0009F8  6E32               	movwf	(??_refreshShiftRegister+47)& (0+255),c
  1534  0009FA  500B               	movf	??_refreshShiftRegister+8,w,c
  1535  0009FC  102F               	iorwf	??_refreshShiftRegister+44,w,c
  1536  0009FE  6E33               	movwf	(??_refreshShiftRegister+48)& (0+255),c
  1537  000A00  500C               	movf	??_refreshShiftRegister+9,w,c
  1538  000A02  1030               	iorwf	??_refreshShiftRegister+45,w,c
  1539  000A04  6E34               	movwf	(??_refreshShiftRegister+49)& (0+255),c
  1540  000A06  C03B  F035         	movff	refreshShiftRegister@ledSelector,??_refreshShiftRegister+50
  1541  000A0A  C03C  F036         	movff	refreshShiftRegister@ledSelector+1,??_refreshShiftRegister+51
  1542  000A0E  90D8               	bcf	status,0,c
  1543  000A10  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1544  000A12  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1545  000A14  90D8               	bcf	status,0,c
  1546  000A16  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1547  000A18  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1548  000A1A  5035               	movf	??_refreshShiftRegister+50,w,c
  1549  000A1C  1031               	iorwf	??_refreshShiftRegister+46,w,c
  1550  000A1E  6E37               	movwf	refreshShiftRegister@map,c
  1551  000A20  5032               	movf	??_refreshShiftRegister+47,w,c
  1552  000A22  6E38               	movwf	refreshShiftRegister@map+1,c
  1553  000A24  5033               	movf	??_refreshShiftRegister+48,w,c
  1554  000A26  6E39               	movwf	refreshShiftRegister@map+2,c
  1555  000A28  5034               	movf	??_refreshShiftRegister+49,w,c
  1556  000A2A  6E3A               	movwf	refreshShiftRegister@map+3,c
  1557                           
  1558                           ;main.c: 80: for (int i = 0; i < 32; i++) {
  1559  000A2C  0E00               	movlw	0
  1560  000A2E  6E3E               	movwf	refreshShiftRegister@i+1,c
  1561  000A30  0E00               	movlw	0
  1562  000A32  6E3D               	movwf	refreshShiftRegister@i,c
  1563  000A34  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1564  000A36  D003               	goto	i2l75
  1565  000A38  503E               	movf	refreshShiftRegister@i+1,w,c
  1566  000A3A  E12E               	bnz	i2l76
  1567  000A3C  D029               	goto	L1
  1568  000A3E                     i2l75:
  1569                           
  1570                           ;main.c: 81: LATBbits.LATB2 = (map >> i) & 1;
  1571  000A3E  503D               	movf	refreshShiftRegister@i,w,c
  1572  000A40  C037  F003         	movff	refreshShiftRegister@map,??_refreshShiftRegister
  1573  000A44  C038  F004         	movff	refreshShiftRegister@map+1,??_refreshShiftRegister+1
  1574  000A48  C039  F005         	movff	refreshShiftRegister@map+2,??_refreshShiftRegister+2
  1575  000A4C  C03A  F006         	movff	refreshShiftRegister@map+3,??_refreshShiftRegister+3
  1576  000A50  2AE8               	incf	wreg,f,c
  1577  000A52  D005               	goto	i2u35_40
  1578  000A54                     i2u35_45:
  1579  000A54  90D8               	bcf	status,0,c
  1580  000A56  3206               	rrcf	??_refreshShiftRegister+3,f,c
  1581  000A58  3205               	rrcf	??_refreshShiftRegister+2,f,c
  1582  000A5A  3204               	rrcf	??_refreshShiftRegister+1,f,c
  1583  000A5C  3203               	rrcf	??_refreshShiftRegister,f,c
  1584  000A5E                     i2u35_40:
  1585  000A5E  2EE8               	decfsz	wreg,f,c
  1586  000A60  D7F9               	goto	i2u35_45
  1587  000A62  0E01               	movlw	1
  1588  000A64  1603               	andwf	??_refreshShiftRegister,f,c
  1589  000A66  4603               	rlncf	??_refreshShiftRegister,f,c
  1590  000A68  4603               	rlncf	??_refreshShiftRegister,f,c
  1591  000A6A  508A               	movf	3978,w,c	;volatile
  1592  000A6C  1803               	xorwf	??_refreshShiftRegister,w,c
  1593  000A6E  0BFB               	andlw	-5
  1594  000A70  1803               	xorwf	??_refreshShiftRegister,w,c
  1595  000A72  6E8A               	movwf	3978,c	;volatile
  1596                           
  1597                           ;main.c: 82: LATBbits.LATB3 = 1;
  1598  000A74  868A               	bsf	3978,3,c	;volatile
  1599                           
  1600                           ;main.c: 83: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1601  000A76  D000               	nop2		;2 cycle nop
  1602  000A78  D000               	nop2		;2 cycle nop
  1603  000A7A  F000               	nop	
  1604                           
  1605                           ;main.c: 84: LATBbits.LATB3 = 0;
  1606  000A7C  968A               	bcf	3978,3,c	;volatile
  1607                           
  1608                           ;main.c: 85: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1609  000A7E  D000               	nop2		;2 cycle nop
  1610  000A80  D000               	nop2		;2 cycle nop
  1611  000A82  F000               	nop	
  1612  000A84  4A3D               	infsnz	refreshShiftRegister@i,f,c
  1613  000A86  2A3E               	incf	refreshShiftRegister@i+1,f,c
  1614  000A88  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1615  000A8A  D7D9               	goto	i2l75
  1616  000A8C  503E               	movf	refreshShiftRegister@i+1,w,c
  1617  000A8E  E104               	bnz	i2u36_40
  1618  000A90                     L1:
  1619  000A90  0E20               	movlw	32
  1620  000A92  5C3D               	subwf	refreshShiftRegister@i,w,c
  1621  000A94  A0D8               	btfss	status,0,c
  1622  000A96  D7D3               	goto	i2l75
  1623  000A98                     i2u36_40:
  1624  000A98                     i2l76:
  1625                           
  1626                           ;main.c: 86: }
  1627                           ;main.c: 88: LATBbits.LATB4 = 1;
  1628  000A98  888A               	bsf	3978,4,c	;volatile
  1629                           
  1630                           ;main.c: 89: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1631  000A9A  D000               	nop2		;2 cycle nop
  1632  000A9C  D000               	nop2		;2 cycle nop
  1633  000A9E  F000               	nop	
  1634                           
  1635                           ;main.c: 90: LATBbits.LATB4 = 0;
  1636  000AA0  988A               	bcf	3978,4,c	;volatile
  1637                           
  1638                           ;main.c: 91: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1639  000AA2  D000               	nop2		;2 cycle nop
  1640  000AA4  D000               	nop2		;2 cycle nop
  1641  000AA6  F000               	nop	
  1642  000AA8  0012               	return		;funcret
  1643  000AAA                     __end_of_refreshShiftRegister:
  1644                           	opt stack 0
  1645                           pclatu	equ	0xFFB
  1646                           pclath	equ	0xFFA
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           prodh	equ	0xFF4
  1652                           prodl	equ	0xFF3
  1653                           intcon	equ	0xFF2
  1654                           postinc0	equ	0xFEE
  1655                           fsr0h	equ	0xFEA
  1656                           fsr0l	equ	0xFE9
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1h	equ	0xFE2
  1660                           fsr1l	equ	0xFE1
  1661                           postinc2	equ	0xFDE
  1662                           postdec2	equ	0xFDD
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function ___awmod *****************
  1668 ;; Defined at:
  1669 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\awmod.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  dividend        2    0[COMRAM] int 
  1672 ;;  divisor         2    2[COMRAM] int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  sign            1    5[COMRAM] unsigned char 
  1675 ;;  counter         1    4[COMRAM] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    0[COMRAM] int 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1685 ;;      Params:         4       0       0       0       0       0       0       0       0
  1686 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1688 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1689 ;;Total ram usage:        6 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_isr
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text5
  1699  000E70                     __ptext5:
  1700                           	opt stack 0
  1701  000E70                     ___awmod:
  1702                           	opt stack 28
  1703                           
  1704                           ;incstack = 0
  1705  000E70  0E00               	movlw	0
  1706  000E72  6E06               	movwf	___awmod@sign,c
  1707  000E74  AE02               	btfss	___awmod@dividend+1,7,c
  1708  000E76  D006               	goto	i2l339
  1709  000E78  6C01               	negf	___awmod@dividend,c
  1710  000E7A  1E02               	comf	___awmod@dividend+1,f,c
  1711  000E7C  B0D8               	btfsc	status,0,c
  1712  000E7E  2A02               	incf	___awmod@dividend+1,f,c
  1713  000E80  0E01               	movlw	1
  1714  000E82  6E06               	movwf	___awmod@sign,c
  1715  000E84                     i2l339:
  1716  000E84  AE04               	btfss	___awmod@divisor+1,7,c
  1717  000E86  D004               	goto	i2l340
  1718  000E88  6C03               	negf	___awmod@divisor,c
  1719  000E8A  1E04               	comf	___awmod@divisor+1,f,c
  1720  000E8C  B0D8               	btfsc	status,0,c
  1721  000E8E  2A04               	incf	___awmod@divisor+1,f,c
  1722  000E90                     i2l340:
  1723  000E90  5003               	movf	___awmod@divisor,w,c
  1724  000E92  1004               	iorwf	___awmod@divisor+1,w,c
  1725  000E94  B4D8               	btfsc	status,2,c
  1726  000E96  D018               	goto	i2l347
  1727  000E98  0E01               	movlw	1
  1728  000E9A  6E05               	movwf	___awmod@counter,c
  1729  000E9C  D004               	goto	i2l342
  1730  000E9E  90D8               	bcf	status,0,c
  1731  000EA0  3603               	rlcf	___awmod@divisor,f,c
  1732  000EA2  3604               	rlcf	___awmod@divisor+1,f,c
  1733  000EA4  2A05               	incf	___awmod@counter,f,c
  1734  000EA6                     i2l342:
  1735  000EA6  AE04               	btfss	___awmod@divisor+1,7,c
  1736  000EA8  D7FA               	goto	i2l343
  1737  000EAA                     i2u40_40:
  1738  000EAA  5003               	movf	___awmod@divisor,w,c
  1739  000EAC  5C01               	subwf	___awmod@dividend,w,c
  1740  000EAE  5004               	movf	___awmod@divisor+1,w,c
  1741  000EB0  5802               	subwfb	___awmod@dividend+1,w,c
  1742  000EB2  A0D8               	btfss	status,0,c
  1743  000EB4  D004               	goto	i2l346
  1744  000EB6  5003               	movf	___awmod@divisor,w,c
  1745  000EB8  5E01               	subwf	___awmod@dividend,f,c
  1746  000EBA  5004               	movf	___awmod@divisor+1,w,c
  1747  000EBC  5A02               	subwfb	___awmod@dividend+1,f,c
  1748  000EBE                     i2l346:
  1749  000EBE  90D8               	bcf	status,0,c
  1750  000EC0  3204               	rrcf	___awmod@divisor+1,f,c
  1751  000EC2  3203               	rrcf	___awmod@divisor,f,c
  1752  000EC4  2E05               	decfsz	___awmod@counter,f,c
  1753  000EC6  D7F1               	goto	i2u40_40
  1754  000EC8                     i2l347:
  1755  000EC8  5006               	movf	___awmod@sign,w,c
  1756  000ECA  B4D8               	btfsc	status,2,c
  1757  000ECC  D004               	goto	i2l348
  1758  000ECE  6C01               	negf	___awmod@dividend,c
  1759  000ED0  1E02               	comf	___awmod@dividend+1,f,c
  1760  000ED2  B0D8               	btfsc	status,0,c
  1761  000ED4  2A02               	incf	___awmod@dividend+1,f,c
  1762  000ED6                     i2l348:
  1763  000ED6  C001  F001         	movff	___awmod@dividend,?___awmod
  1764  000EDA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1765  000EDE  0012               	return	
  1766  000EE0                     __end_of___awmod:
  1767                           	opt stack 0
  1768                           pclatu	equ	0xFFB
  1769                           pclath	equ	0xFFA
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodh	equ	0xFF4
  1775                           prodl	equ	0xFF3
  1776                           intcon	equ	0xFF2
  1777                           postinc0	equ	0xFEE
  1778                           fsr0h	equ	0xFEA
  1779                           fsr0l	equ	0xFE9
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1h	equ	0xFE2
  1783                           fsr1l	equ	0xFE1
  1784                           postinc2	equ	0xFDE
  1785                           postdec2	equ	0xFDD
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           pclatu	equ	0xFFB
  1790                           pclath	equ	0xFFA
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           prodh	equ	0xFF4
  1796                           prodl	equ	0xFF3
  1797                           intcon	equ	0xFF2
  1798                           postinc0	equ	0xFEE
  1799                           fsr0h	equ	0xFEA
  1800                           fsr0l	equ	0xFE9
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1h	equ	0xFE2
  1804                           fsr1l	equ	0xFE1
  1805                           postinc2	equ	0xFDE
  1806                           postdec2	equ	0xFDD
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811                           	psect	rparam
  1812  0000                     pclatu	equ	0xFFB
  1813                           pclath	equ	0xFFA
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           postinc0	equ	0xFEE
  1822                           fsr0h	equ	0xFEA
  1823                           fsr0l	equ	0xFE9
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           postinc2	equ	0xFDE
  1829                           postdec2	equ	0xFDD
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834                           	psect	temp
  1835  000056                     btemp:
  1836                           	opt stack 0
  1837  000056                     	ds	1
  1838  0000                     int$flags	set	btemp
  1839  0000                     wtemp6	set	btemp+1
  1840                           pclatu	equ	0xFFB
  1841                           pclath	equ	0xFFA
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           fsr0h	equ	0xFEA
  1851                           fsr0l	equ	0xFE9
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    76
    Data        294
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      85
    BANK0           160     33      71
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    setMsg@input	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_refreshShiftRegister

Critical Paths under _main in BANK0

    _main->_setMsg

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0     391
                                             14 BANK0     19    19      0
                             _setMsg
 ---------------------------------------------------------------------------------
 (1) _setMsg                                              14    12      2     188
                                              0 BANK0     14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                 18    18      0     748
                                             62 COMRAM    18    18      0
                            ___awmod
               _refreshShiftRegister
                          _timerfunc
 ---------------------------------------------------------------------------------
 (3) _timerfunc                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _refreshShiftRegister                                62    60      2     300
                                              0 COMRAM    62    60      2
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setMsg

 _isr (ROOT)
   ___awmod
   _refreshShiftRegister
   _timerfunc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     102      21       12.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      47       5       44.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      20        0.0%
DATA                 0      0     19E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 03 17:46:41 2018

                    _SSPSTATbits 000FC7                               l70 0E6E  
                             l90 0B6A                               l82 0B0A  
                             l68 0DF4                               l84 0BEE  
                             l86 0B46                               l88 0B62  
           __end_of_DEMO_MESSAGE 084D                              l974 0DE4  
                            _PR2 000FCB                              _isr 0008  
                   ___awmod@sign 0006                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                     __CFG_WDT$OFF 000000  
                           l1084 0B0A                             ?_isr 0001  
                           STR_1 084D                      main@dotflag 009E  
                           _BRGH 007D62                             i2l75 0A3E  
                           i2l76 0A98                             _TMR2 000FCC  
                           _main 0AAA                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 0056  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000    __size_of_refreshShiftRegister 0252  
                          ??_isr 003F                            ?_main 0001  
                __end_of___awmod 0EE0                            _CMCON 000FB4  
                          _T2CON 000FCA                            i2l104 0D8E  
                          i2l340 0E90                            i2l342 0EA6  
                          i2l343 0E9E                            i2l346 0EBE  
                          i2l347 0EC8                            i2l339 0E84  
                          i2l348 0ED6                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _SSPIE 007CEB                            _TRISE 000F96  
                          _SSPIF 007CF3                            pclath 000FFA  
                          tablat 000FF5                            status 000FD8  
                          wtemp6 0057                  __initialization 0EE0  
                   __end_of_main 0C02                           ??_main 0092  
                  __activetblptr 000001                           _ADCON1 000FC1  
        refreshShiftRegister@map 0037          refreshShiftRegister@ptr 0001  
                         _SPBRGH 000FB0                           _SSPADD 000FC8  
                         _SSPBUF 000FC9                        ??___awmod 0005  
                         _segMap 0060                           _setMsg 0DDA  
                ___awmod@divisor 0003                           _tmrIsr 00A5  
                ___awmod@counter 0005                   _MESSAGE_LENGTH 0801  
                   __pdataBIGRAM 00A7                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                     _DEMO_MESSAGE 0803  
                     __accesstop 0060          __end_of__initialization 0F32  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                   __pidataBANK0 0F44           __end_of_MESSAGE_LENGTH 0803  
          refreshShiftRegister@i 003D                       __pbssBANK0 00A5  
                     __pnvCOMRAM 0055                          _BAUDCON 000FB8  
                        ?_setMsg 0084                      setMsg@input 0084  
             __size_of_timerfunc 0006                          i2u31_44 086E  
   __end_of_refreshShiftRegister 0AAA                          i2u31_45 0868  
                        i2u40_40 0EAA                          i2u32_45 08DA  
                        i2u33_45 0904                          i2u35_40 0A5E  
                        i2u35_45 0A54                          i2u36_40 0A98  
                        _SSPCON1 000FC6                          _SSPCON2 000FC5  
                        _SSPSTAT 000FC7                          __Hparam 0000  
                        __Lparam 0000                          ___awmod 0E70  
                   __psmallconst 0800                          __pcinit 0EE0  
                        __ramtop 0800                  __size_of_setMsg 0096  
                        __ptext0 0AAA                          __ptext1 0DDA  
                        __ptext3 0F68                          __ptext4 0858  
                        __ptext5 0E70                          _divisor 0051  
                   __size_of_isr 0DD2                 ___awmod@dividend 0001  
              main@digitSelector 00A2                   __pintcode_body 0D04  
           end_of_initialization 0F32                          int_func 0D04  
                        setMsg@i 0090                __end_of_timerfunc 0F6E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     main@RxData 00A4             _refreshShiftRegister 0858  
                  __pidataBIGRAM 0C02                   __end_of_setMsg 0E70  
            start_initialization 0EE0                      __end_of_isr 0DDA  
          ?_refreshShiftRegister 0001                      __pdataBANK0 0060  
                       ??_setMsg 0086                      __pbssCOMRAM 0051  
                  __pcstackBANK0 0084  refreshShiftRegister@ledSelector 003B  
                      __pintcode 0008                         ?___awmod 0001  
                    __smallconst 0800                         _LATAbits 000F89  
                       _LATBbits 000F8A                         _LATCbits 000F8B  
                       _PIE1bits 000F9D           ??_refreshShiftRegister 0003  
                       _PIR1bits 000F9E                        _timerfunc 0F68  
                      copy_data0 0EF4                        copy_data1 0F18  
                       __Hrparam 0000                         __Lrparam 0000  
                   __Lsmallconst 0800                       ?_timerfunc 0001  
               __size_of___awmod 0070                         _digitPtr 0053  
                       _led_stat 0055                         _fontList 00A7  
                  __size_of_main 0158                         int$flags 0056  
                     _INTCONbits 000FF2                         intlevel2 0000  
                    ??_timerfunc 0001                      _SSPCON2bits 000FC5  
