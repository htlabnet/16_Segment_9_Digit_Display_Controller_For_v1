

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 03 18:29:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4553 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataBIGRAM
    64  000AFA                     __pidataBIGRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _fontList
    68  000AFA  0000               	dw	0
    69  000AFC  0000               	dw	0
    70  000AFE  0000               	dw	0
    71  000B00  0000               	dw	0
    72  000B02  0000               	dw	0
    73  000B04  0000               	dw	0
    74  000B06  0000               	dw	0
    75  000B08  0000               	dw	0
    76  000B0A  0000               	dw	0
    77  000B0C  0000               	dw	0
    78  000B0E  0000               	dw	0
    79  000B10  0000               	dw	0
    80  000B12  0000               	dw	0
    81  000B14  0000               	dw	0
    82  000B16  0000               	dw	0
    83  000B18  0000               	dw	0
    84  000B1A  0000               	dw	0
    85  000B1C  0000               	dw	0
    86  000B1E  0000               	dw	0
    87  000B20  0000               	dw	0
    88  000B22  0000               	dw	0
    89  000B24  0000               	dw	0
    90  000B26  0000               	dw	0
    91  000B28  0000               	dw	0
    92  000B2A  0000               	dw	0
    93  000B2C  0000               	dw	0
    94  000B2E  0000               	dw	0
    95  000B30  0000               	dw	0
    96  000B32  0000               	dw	0
    97  000B34  0000               	dw	0
    98  000B36  0000               	dw	0
    99  000B38  0000               	dw	0
   100  000B3A  0000               	dw	0
   101  000B3C  0000               	dw	0
   102  000B3E  0000               	dw	0
   103  000B40  0000               	dw	0
   104  000B42  0000               	dw	0
   105  000B44  0000               	dw	0
   106  000B46  0000               	dw	0
   107  000B48  0000               	dw	0
   108  000B4A  0000               	dw	0
   109  000B4C  0000               	dw	0
   110  000B4E  0000               	dw	0
   111  000B50  0000               	dw	0
   112  000B52  0000               	dw	0
   113  000B54  0000               	dw	0
   114  000B56  0000               	dw	0
   115  000B58  0000               	dw	0
   116  000B5A  0000               	dw	0
   117  000B5C  0000               	dw	0
   118  000B5E  0000               	dw	0
   119  000B60  0000               	dw	0
   120  000B62  0000               	dw	0
   121  000B64  0000               	dw	0
   122  000B66  0000               	dw	0
   123  000B68  0000               	dw	0
   124  000B6A  0000               	dw	0
   125  000B6C  0000               	dw	0
   126  000B6E  0000               	dw	0
   127  000B70  0000               	dw	0
   128  000B72  0000               	dw	0
   129  000B74  0000               	dw	0
   130  000B76  0000               	dw	0
   131  000B78  0000               	dw	0
   132  000B7A  0000               	dw	0
   133  000B7C  0000               	dw	0
   134  000B7E  1812               	dw	6162
   135  000B80  0000               	dw	0
   136  000B82  0880               	dw	2176
   137  000B84  0000               	dw	0
   138  000B86  0000               	dw	0
   139  000B88  0000               	dw	0
   140  000B8A  CC33               	dw	52275
   141  000B8C  0000               	dw	0
   142  000B8E  7BA9               	dw	31657
   143  000B90  0000               	dw	0
   144  000B92  B43B               	dw	46139
   145  000B94  0000               	dw	0
   146  000B96  0080               	dw	128
   147  000B98  0000               	dw	0
   148  000B9A  9000               	dw	36864
   149  000B9C  0000               	dw	0
   150  000B9E  2400               	dw	9216
   151  000BA0  0000               	dw	0
   152  000BA2  FF00               	dw	65280
   153  000BA4  0000               	dw	0
   154  000BA6  4B00               	dw	19200
   155  000BA8  0000               	dw	0
   156  000BAA  0000               	dw	0
   157  000BAC  0000               	dw	0
   158  000BAE  0300               	dw	768
   159  000BB0  0000               	dw	0
   160  000BB2  0000               	dw	0
   161  000BB4  0000               	dw	0
   162  000BB6  3000               	dw	12288
   163  000BB8  0000               	dw	0
   164  000BBA  00FF               	dw	255
   165  000BBC  0000               	dw	0
   166  000BBE  4800               	dw	18432
   167  000BC0  0000               	dw	0
   168  000BC2  0377               	dw	887
   169  000BC4  0000               	dw	0
   170  000BC6  033F               	dw	831
   171  000BC8  0000               	dw	0
   172  000BCA  038C               	dw	908
   173  000BCC  0000               	dw	0
   174  000BCE  03BB               	dw	955
   175  000BD0  0000               	dw	0
   176  000BD2  03FB               	dw	1019
   177  000BD4  0000               	dw	0
   178  000BD6  008F               	dw	143
   179  000BD8  0000               	dw	0
   180  000BDA  03FF               	dw	1023
   181  000BDC  0000               	dw	0
   182  000BDE  03BF               	dw	959
   183  000BE0  0000               	dw	0
   184  000BE2  0000               	dw	0
   185  000BE4  0000               	dw	0
   186  000BE6  0000               	dw	0
   187  000BE8  0000               	dw	0
   188  000BEA  9000               	dw	36864
   189  000BEC  0000               	dw	0
   190  000BEE  0330               	dw	816
   191  000BF0  0000               	dw	0
   192  000BF2  2400               	dw	9216
   193  000BF4  0000               	dw	0
   194  000BF6  1013               	dw	4115
   195  000BF8  0000               	dw	0
   196  000BFA  0000               	dw	0
   197  000BFC  0000               	dw	0
   198  000BFE  03CF               	dw	975
   199  000C00  0000               	dw	0
   200  000C02  91F3               	dw	37363
   201  000C04  0000               	dw	0
   202  000C06  00F3               	dw	243
   203  000C08  0000               	dw	0
   204  000C0A  037C               	dw	892
   205  000C0C  0000               	dw	0
   206  000C0E  03F3               	dw	1011
   207  000C10  0000               	dw	0
   208  000C12  03C3               	dw	963
   209  000C14  0000               	dw	0
   210  000C16  02FB               	dw	763
   211  000C18  0000               	dw	0
   212  000C1A  03CC               	dw	972
   213  000C1C  0000               	dw	0
   214  000C1E  4833               	dw	18483
   215  000C20  0000               	dw	0
   216  000C22  4813               	dw	18451
   217  000C24  0000               	dw	0
   218  000C26  91C0               	dw	37312
   219  000C28  0000               	dw	0
   220  000C2A  00F0               	dw	240
   221  000C2C  0000               	dw	0
   222  000C2E  14CC               	dw	5324
   223  000C30  0000               	dw	0
   224  000C32  84CC               	dw	33996
   225  000C34  0000               	dw	0
   226  000C36  00FF               	dw	255
   227  000C38  0000               	dw	0
   228  000C3A  03C7               	dw	967
   229  000C3C  0000               	dw	0
   230  000C3E  80FF               	dw	33023
   231  000C40  0000               	dw	0
   232  000C42  83C7               	dw	33735
   233  000C44  0000               	dw	0
   234  000C46  03BB               	dw	955
   235  000C48  0000               	dw	0
   236  000C4A  4803               	dw	18435
   237  000C4C  0000               	dw	0
   238  000C4E  00FC               	dw	252
   239  000C50  0000               	dw	0
   240  000C52  30C0               	dw	12480
   241  000C54  0000               	dw	0
   242  000C56  A0CC               	dw	41164
   243  000C58  0000               	dw	0
   244  000C5A  B400               	dw	46080
   245  000C5C  0000               	dw	0
   246  000C5E  5400               	dw	21504
   247  000C60  0000               	dw	0
   248  000C62  3033               	dw	12339
   249  000C64  0000               	dw	0
   250  000C66  00D1               	dw	209
   251  000C68  0000               	dw	0
   252  000C6A  8400               	dw	33792
   253  000C6C  0000               	dw	0
   254  000C6E  0003               	dw	3
   255  000C70  0000               	dw	0
   256  000C72  0030               	dw	48
   257  000C74  0000               	dw	0
   258  000C76  AB00               	dw	43776
   259  000C78  0000               	dw	0
   260  000C7A  34C0               	dw	13504
   261  000C7C  0000               	dw	0
   262  000C7E  0B7B               	dw	2939
   263  000C80  0000               	dw	0
   264  000C82  5703               	dw	22275
   265  000C84  0000               	dw	0
   266  000C86  0000               	dw	0
   267  000C88  0000               	dw	0
   268  000C8A  0000               	dw	0
   269  000C8C  0000               	dw	0
   270  000C8E  0000               	dw	0
   271  000C90  0000               	dw	0
   272  000C92  FFFF               	dw	65535
   273  000C94  0000               	dw	0
   274  000C96  0001               	dw	1
   275  000C98  0000               	dw	0
   276  000C9A  0002               	dw	2
   277  000C9C  0000               	dw	0
   278  000C9E  0004               	dw	4
   279  000CA0  0000               	dw	0
   280  000CA2  0008               	dw	8
   281  000CA4  0000               	dw	0
   282  000CA6  0020               	dw	32
   283  000CA8  0000               	dw	0
   284  000CAA  0010               	dw	16
   285  000CAC  0000               	dw	0
   286  000CAE  0040               	dw	64
   287  000CB0  0000               	dw	0
   288  000CB2  0080               	dw	128
   289  000CB4  0000               	dw	0
   290  000CB6  0800               	dw	2048
   291  000CB8  0000               	dw	0
   292  000CBA  1000               	dw	4096
   293  000CBC  0000               	dw	0
   294  000CBE  0200               	dw	512
   295  000CC0  0000               	dw	0
   296  000CC2  8000               	dw	32768
   297  000CC4  0000               	dw	0
   298  000CC6  4000               	dw	16384
   299  000CC8  0000               	dw	0
   300  000CCA  2000               	dw	8192
   301  000CCC  0000               	dw	0
   302  000CCE  0100               	dw	256
   303  000CD0  0000               	dw	0
   304  000CD2  0400               	dw	1024
   305  000CD4  0000               	dw	0
   306  000CD6  0800               	dw	2048
   307  000CD8  0000               	dw	0
   308  000CDA  1800               	dw	6144
   309  000CDC  0000               	dw	0
   310  000CDE  1A00               	dw	6656
   311  000CE0  0000               	dw	0
   312  000CE2  9A00               	dw	39424
   313  000CE4  0000               	dw	0
   314  000CE6  DA00               	dw	55808
   315  000CE8  0000               	dw	0
   316  000CEA  FA00               	dw	64000
   317  000CEC  0000               	dw	0
   318  000CEE  FB00               	dw	64256
   319  000CF0  0000               	dw	0
   320  000CF2  FF00               	dw	65280
   321  000CF4  0000               	dw	0
   322  000CF6  0000               	dw	0
   323  000CF8  0000               	dw	0
   324  000CFA  0000               	dw	0
   325  000CFC  0000               	dw	0
   326                           
   327                           	psect	idataBANK0
   328  0011B2                     __pidataBANK0:
   329                           	opt stack 0
   330                           
   331                           ;initializer for _segMap
   332  0011B2  00FF               	dw	255
   333  0011B4  0003               	dw	3
   334  0011B6  00FF               	dw	255
   335  0011B8  0003               	dw	3
   336  0011BA  00FF               	dw	255
   337  0011BC  0003               	dw	3
   338  0011BE  00FF               	dw	255
   339  0011C0  0003               	dw	3
   340  0011C2  00FF               	dw	255
   341  0011C4  0003               	dw	3
   342  0011C6  00FF               	dw	255
   343  0011C8  0003               	dw	3
   344  0011CA  00FF               	dw	255
   345  0011CC  0003               	dw	3
   346  0011CE  00FF               	dw	255
   347  0011D0  0003               	dw	3
   348  0011D2  00FF               	dw	255
   349  0011D4  0003               	dw	3
   350                           
   351                           	psect	smallconst
   352  000800                     __psmallconst:
   353                           	opt stack 0
   354  000800  00                 	db	0
   355  000801                     _MESSAGE_LENGTH:
   356                           	opt stack 0
   357  000801  0052               	dw	82
   358  000803                     __end_of_MESSAGE_LENGTH:
   359                           	opt stack 0
   360  000803                     _DEMO_DOTFLAG:
   361                           	opt stack 0
   362  000803  20                 	db	32
   363  000804  20                 	db	32
   364  000805  20                 	db	32
   365  000806  20                 	db	32
   366  000807  20                 	db	32
   367  000808  20                 	db	32
   368  000809  20                 	db	32
   369  00080A  20                 	db	32
   370  00080B  20                 	db	32
   371  00080C  20                 	db	32
   372  00080D  20                 	db	32
   373  00080E  20                 	db	32
   374  00080F  20                 	db	32
   375  000810  20                 	db	32
   376  000811  20                 	db	32
   377  000812  20                 	db	32
   378  000813  20                 	db	32
   379  000814  20                 	db	32
   380  000815  20                 	db	32
   381  000816  20                 	db	32
   382  000817  20                 	db	32
   383  000818  20                 	db	32
   384  000819  20                 	db	32
   385  00081A  20                 	db	32
   386  00081B  20                 	db	32
   387  00081C  20                 	db	32
   388  00081D  20                 	db	32
   389  00081E  2E                 	db	46
   390  00081F  20                 	db	32
   391  000820  20                 	db	32
   392  000821  20                 	db	32
   393  000822  20                 	db	32
   394  000823  20                 	db	32
   395  000824  20                 	db	32
   396  000825  20                 	db	32
   397  000826  20                 	db	32
   398  000827  20                 	db	32
   399  000828  20                 	db	32
   400  000829  20                 	db	32
   401  00082A  20                 	db	32
   402  00082B  20                 	db	32
   403  00082C  20                 	db	32
   404  00082D  20                 	db	32
   405  00082E  20                 	db	32
   406  00082F  20                 	db	32
   407  000830  20                 	db	32
   408  000831  20                 	db	32
   409  000832  20                 	db	32
   410  000833  20                 	db	32
   411  000834  20                 	db	32
   412  000835  20                 	db	32
   413  000836  20                 	db	32
   414  000837  20                 	db	32
   415  000838  20                 	db	32
   416  000839  20                 	db	32
   417  00083A  20                 	db	32
   418  00083B  20                 	db	32
   419  00083C  20                 	db	32
   420  00083D  20                 	db	32
   421  00083E  20                 	db	32
   422  00083F  20                 	db	32
   423  000840  20                 	db	32
   424  000841  20                 	db	32
   425  000842  20                 	db	32
   426  000843  20                 	db	32
   427  000844  20                 	db	32
   428  000845  20                 	db	32
   429  000846  20                 	db	32
   430  000847  20                 	db	32
   431  000848  20                 	db	32
   432  000849  20                 	db	32
   433  00084A  20                 	db	32
   434  00084B  20                 	db	32
   435  00084C  20                 	db	32
   436  00084D  20                 	db	32
   437  00084E  20                 	db	32
   438  00084F  20                 	db	32
   439  000850  20                 	db	32
   440  000851  20                 	db	32
   441  000852  20                 	db	32
   442  000853  20                 	db	32
   443  000854  00                 	db	0
   444  000855                     __end_of_DEMO_DOTFLAG:
   445                           	opt stack 0
   446  000855                     _DEMO_MESSAGE:
   447                           	opt stack 0
   448  000855  4D                 	db	77
   449  000856  41                 	db	65
   450  000857  4B                 	db	75
   451  000858  45                 	db	69
   452  000859  52                 	db	82
   453  00085A  20                 	db	32
   454  00085B  46                 	db	70
   455  00085C  41                 	db	65
   456  00085D  49                 	db	73
   457  00085E  52                 	db	82
   458  00085F  45                 	db	69
   459  000860  20                 	db	32
   460  000861  54                 	db	84
   461  000862  4F                 	db	79
   462  000863  4B                 	db	75
   463  000864  59                 	db	89
   464  000865  4F                 	db	79
   465  000866  20                 	db	32
   466  000867  32                 	db	50
   467  000868  30                 	db	48
   468  000869  31                 	db	49
   469  00086A  38                 	db	56
   470  00086B  20                 	db	32
   471  00086C  48                 	db	72
   472  00086D  54                 	db	84
   473  00086E  4C                 	db	76
   474  00086F  41                 	db	65
   475  000870  42                 	db	66
   476  000871  4E                 	db	78
   477  000872  45                 	db	69
   478  000873  54                 	db	84
   479  000874  20                 	db	32
   480  000875  42                 	db	66
   481  000876  4F                 	db	79
   482  000877  4F                 	db	79
   483  000878  54                 	db	84
   484  000879  48                 	db	72
   485  00087A  21                 	db	33
   486  00087B  20                 	db	32
   487  00087C  54                 	db	84
   488  00087D  48                 	db	72
   489  00087E  49                 	db	73
   490  00087F  53                 	db	83
   491  000880  20                 	db	32
   492  000881  49                 	db	73
   493  000882  53                 	db	83
   494  000883  20                 	db	32
   495  000884  31                 	db	49
   496  000885  36                 	db	54
   497  000886  20                 	db	32
   498  000887  53                 	db	83
   499  000888  45                 	db	69
   500  000889  47                 	db	71
   501  00088A  4D                 	db	77
   502  00088B  45                 	db	69
   503  00088C  4E                 	db	78
   504  00088D  54                 	db	84
   505  00088E  20                 	db	32
   506  00088F  39                 	db	57
   507  000890  20                 	db	32
   508  000891  44                 	db	68
   509  000892  49                 	db	73
   510  000893  47                 	db	71
   511  000894  49                 	db	73
   512  000895  54                 	db	84
   513  000896  20                 	db	32
   514  000897  44                 	db	68
   515  000898  49                 	db	73
   516  000899  53                 	db	83
   517  00089A  50                 	db	80
   518  00089B  4C                 	db	76
   519  00089C  41                 	db	65
   520  00089D  59                 	db	89
   521  00089E  20                 	db	32
   522  00089F  20                 	db	32
   523  0008A0  20                 	db	32
   524  0008A1  20                 	db	32
   525  0008A2  20                 	db	32
   526  0008A3  20                 	db	32
   527  0008A4  20                 	db	32
   528  0008A5  20                 	db	32
   529  0008A6  00                 	db	0
   530  0008A7                     __end_of_DEMO_MESSAGE:
   531                           	opt stack 0
   532  0008A7  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	nvCOMRAM
   535  000056                     __pnvCOMRAM:
   536                           	opt stack 0
   537  000056                     _led_stat:
   538                           	opt stack 0
   539  000056                     	ds	1
   540  0000                     _SSPBUF	set	4041
   541  0000                     _SSPCON2bits	set	4037
   542  0000                     _SSPCON1	set	4038
   543  0000                     _SSPADD	set	4040
   544  0000                     _SSPSTAT	set	4039
   545  0000                     _SSPSTATbits	set	4039
   546  0000                     _SSPCON2	set	4037
   547  0000                     _RCREG	set	4014
   548  0000                     _PIR1bits	set	3998
   549  0000                     _SPBRG	set	4015
   550  0000                     _SPBRGH	set	4016
   551  0000                     _BAUDCON	set	4024
   552  0000                     _RCSTA	set	4011
   553  0000                     _INTCONbits	set	4082
   554  0000                     _PIE1bits	set	3997
   555  0000                     _PR2	set	4043
   556  0000                     _TMR2	set	4044
   557  0000                     _T2CON	set	4042
   558  0000                     _LATAbits	set	3977
   559  0000                     _LATCbits	set	3979
   560  0000                     _TRISE	set	3990
   561  0000                     _TRISD	set	3989
   562  0000                     _TRISC	set	3988
   563  0000                     _TRISB	set	3987
   564  0000                     _TRISA	set	3986
   565  0000                     _CMCON	set	4020
   566  0000                     _ADCON1	set	4033
   567  0000                     _LATBbits	set	3978
   568  0000                     _SSPIE	set	31979
   569  0000                     _SSPIF	set	31987
   570  0000                     _BRGH	set	32098
   571                           
   572                           ; #config settings
   573  0000                     
   574                           	psect	cinit
   575  0010E6                     __pcinit:
   576                           	opt stack 0
   577  0010E6                     start_initialization:
   578                           	opt stack 0
   579  0010E6                     __initialization:
   580                           	opt stack 0
   581                           
   582                           ; Initialize objects allocated to BIGRAM (516 bytes)
   583                           ; load TBLPTR registers with __pidataBIGRAM
   584  0010E6  0EFA               	movlw	low __pidataBIGRAM
   585  0010E8  6EF6               	movwf	tblptrl,c
   586  0010EA  0E0A               	movlw	high __pidataBIGRAM
   587  0010EC  6EF7               	movwf	tblptrh,c
   588  0010EE  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   589  0010F0  6EF8               	movwf	tblptru,c
   590  0010F2  EE00  F0A9         	lfsr	0,__pdataBIGRAM
   591  0010F6  EE12 F004          	lfsr	1,516
   592  0010FA                     copy_data0:
   593  0010FA  0009               	tblrd		*+
   594  0010FC  CFF5 FFEE          	movff	tablat,postinc0
   595  001100  50E5               	movf	postdec1,w,c
   596  001102  50E1               	movf	fsr1l,w,c
   597  001104  E1FA               	bnz	copy_data0
   598  001106  50E2               	movf	fsr1h,w,c
   599  001108  E1F8               	bnz	copy_data0
   600                           
   601                           ; Initialize objects allocated to BANK0 (36 bytes)
   602                           ; load TBLPTR registers with __pidataBANK0
   603  00110A  0EB2               	movlw	low __pidataBANK0
   604  00110C  6EF6               	movwf	tblptrl,c
   605  00110E  0E11               	movlw	high __pidataBANK0
   606  001110  6EF7               	movwf	tblptrh,c
   607  001112  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   608  001114  6EF8               	movwf	tblptru,c
   609  001116  EE00  F060         	lfsr	0,__pdataBANK0
   610  00111A  EE10 F024          	lfsr	1,36
   611  00111E                     copy_data1:
   612  00111E  0009               	tblrd		*+
   613  001120  CFF5 FFEE          	movff	tablat,postinc0
   614  001124  50E5               	movf	postdec1,w,c
   615  001126  50E1               	movf	fsr1l,w,c
   616  001128  E1FA               	bnz	copy_data1
   617                           
   618                           ; Clear objects allocated to BANK0 (19 bytes)
   619  00112A  EE00  F084         	lfsr	0,__pbssBANK0
   620  00112E  0E13               	movlw	19
   621  001130                     clear_0:
   622  001130  6AEE               	clrf	postinc0,c
   623  001132  06E8               	decf	wreg,f,c
   624  001134  E1FD               	bnz	clear_0
   625                           
   626                           ; Clear objects allocated to COMRAM (5 bytes)
   627  001136  6A55               	clrf	(__pbssCOMRAM+4)& (0+255),c
   628  001138  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   629  00113A  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   630  00113C  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   631  00113E  6A51               	clrf	__pbssCOMRAM& (0+255),c
   632  001140                     end_of_initialization:
   633                           	opt stack 0
   634  001140                     __end_of__initialization:
   635                           	opt stack 0
   636  001140  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   637  001142  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   638  001144  0E00               	movlw	low (__Lsmallconst shr (0+16))
   639  001146  6EF8               	movwf	tblptru,c
   640  001148  0E08               	movlw	high __Lsmallconst
   641  00114A  6EF7               	movwf	tblptrh,c
   642  00114C  0100               	movlb	0
   643  00114E  EF7F  F006         	goto	_main	;jump to C main() function
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1h	equ	0xFE2
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	bssCOMRAM
   655  000051                     __pbssCOMRAM:
   656                           	opt stack 0
   657  000051                     _writeItr:
   658                           	opt stack 0
   659  000051                     	ds	2
   660  000053                     _divisor:
   661                           	opt stack 0
   662  000053                     	ds	2
   663  000055                     _digitPtr:
   664                           	opt stack 0
   665  000055                     	ds	1
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           postdec1	equ	0xFE5
   673                           fsr1h	equ	0xFE2
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	bssBANK0
   677  000084                     __pbssBANK0:
   678                           	opt stack 0
   679  000084                     _tmrIsr:
   680                           	opt stack 0
   681  000084                     	ds	1
   682  000085                     _disdot:
   683                           	opt stack 0
   684  000085                     	ds	9
   685  00008E                     _display:
   686                           	opt stack 0
   687  00008E                     	ds	9
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1h	equ	0xFE2
   696                           fsr1l	equ	0xFE1
   697                           
   698                           	psect	dataBANK0
   699  000060                     __pdataBANK0:
   700                           	opt stack 0
   701  000060                     _segMap:
   702                           	opt stack 0
   703  000060                     	ds	36
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           postdec1	equ	0xFE5
   711                           fsr1h	equ	0xFE2
   712                           fsr1l	equ	0xFE1
   713                           
   714                           	psect	dataBIGRAM
   715  0000A9                     __pdataBIGRAM:
   716                           	opt stack 0
   717  0000A9                     _fontList:
   718                           	opt stack 0
   719  0000A9                     	ds	516
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1h	equ	0xFE2
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	cstackBANK0
   731  000097                     __pcstackBANK0:
   732                           	opt stack 0
   733  000097                     ??_main:
   734                           
   735                           ; 1 bytes @ 0x0
   736  000097                     	ds	12
   737  0000A3                     main@dotflag:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0xC
   741  0000A3                     	ds	4
   742  0000A7                     main@digitSelector:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x10
   746  0000A7                     	ds	1
   747  0000A8                     main@RxData:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x11
   751  0000A8                     	ds	1
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1h	equ	0xFE2
   760                           fsr1l	equ	0xFE1
   761                           
   762                           	psect	cstackCOMRAM
   763  000001                     __pcstackCOMRAM:
   764                           	opt stack 0
   765  000001                     ?___awmod:
   766                           	opt stack 0
   767  000001                     setMsgWithDot@message:
   768                           	opt stack 0
   769  000001                     refreshShiftRegister@ptr:
   770                           	opt stack 0
   771  000001                     ___awmod@dividend:
   772                           	opt stack 0
   773  000001                     strncpy@to:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x0
   777  000001                     	ds	2
   778  000003                     ??_refreshShiftRegister:
   779  000003                     setMsgWithDot@dotFlag:
   780                           	opt stack 0
   781  000003                     ___awmod@divisor:
   782                           	opt stack 0
   783  000003                     strncpy@from:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x2
   787  000003                     	ds	2
   788  000005                     ??_setMsgWithDot:
   789  000005                     ___awmod@counter:
   790                           	opt stack 0
   791  000005                     strncpy@size:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x4
   795  000005                     	ds	1
   796  000006                     ___awmod@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x5
   800  000006                     	ds	1
   801  000007                     strncpy@cp:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x6
   805  000007                     	ds	14
   806  000015                     setMsgWithDot@i:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x14
   810  000015                     	ds	2
   811  000017                     ??_handleMessage:
   812                           
   813                           ; 1 bytes @ 0x16
   814  000017                     	ds	32
   815  000037                     refreshShiftRegister@map:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x36
   819  000037                     	ds	4
   820  00003B                     refreshShiftRegister@ledSelector:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x3A
   824  00003B                     	ds	2
   825  00003D                     refreshShiftRegister@i:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x3C
   829  00003D                     	ds	2
   830  00003F                     ??_isr:
   831                           
   832                           ; 1 bytes @ 0x3E
   833  00003F                     	ds	18
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           
   844 ;;
   845 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   846 ;;
   847 ;; *************** function _main *****************
   848 ;; Defined at:
   849 ;;		line 101 in file "main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  dotflag         4   12[BANK0 ] unsigned long 
   854 ;;  RxData          1   17[BANK0 ] unsigned char 
   855 ;;  digitSelecto    1   16[BANK0 ] unsigned char 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   865 ;;      Params:         0       0       0       0       0       0       0       0       0
   866 ;;      Locals:         0       6       0       0       0       0       0       0       0
   867 ;;      Temps:          0      12       0       0       0       0       0       0       0
   868 ;;      Totals:         0      18       0       0       0       0       0       0       0
   869 ;;Total ram usage:       18 bytes
   870 ;; Hardware stack levels required when called:    3
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  000CFE                     __ptext0:
   880                           	opt stack 0
   881  000CFE                     _main:
   882                           	opt stack 28
   883                           
   884                           ;main.c: 103: ADCON1 = 0b00001111;
   885                           
   886                           ;incstack = 0
   887  000CFE  0E0F               	movlw	15
   888  000D00  6EC1               	movwf	4033,c	;volatile
   889                           
   890                           ;main.c: 104: CMCON = 0b00000111;
   891  000D02  0E07               	movlw	7
   892  000D04  6EB4               	movwf	4020,c	;volatile
   893                           
   894                           ;main.c: 105: TRISA = 0b00000000;
   895  000D06  0E00               	movlw	0
   896  000D08  6E92               	movwf	3986,c	;volatile
   897                           
   898                           ;main.c: 106: TRISB = 0b00000000;
   899  000D0A  0E00               	movlw	0
   900  000D0C  6E93               	movwf	3987,c	;volatile
   901                           
   902                           ;main.c: 107: TRISC = 0b10000000;
   903  000D0E  0E80               	movlw	128
   904  000D10  6E94               	movwf	3988,c	;volatile
   905                           
   906                           ;main.c: 108: TRISD = 0b00000000;
   907  000D12  0E00               	movlw	0
   908  000D14  6E95               	movwf	3989,c	;volatile
   909                           
   910                           ;main.c: 109: TRISE = 0b00000000;
   911  000D16  0E00               	movlw	0
   912  000D18  6E96               	movwf	3990,c	;volatile
   913                           
   914                           ;main.c: 111: LATCbits.LATC0 = 0;
   915  000D1A  908B               	bcf	3979,0,c	;volatile
   916                           
   917                           ;main.c: 112: LATCbits.LATC1 = 1;
   918  000D1C  828B               	bsf	3979,1,c	;volatile
   919                           
   920                           ;main.c: 114: LATCbits.LATC2 = 0;
   921  000D1E  948B               	bcf	3979,2,c	;volatile
   922                           
   923                           ;main.c: 117: LATAbits.LATA4 = 0;
   924  000D20  9889               	bcf	3977,4,c	;volatile
   925                           
   926                           ;main.c: 118: LATAbits.LATA5 = 0;
   927  000D22  9A89               	bcf	3977,5,c	;volatile
   928                           
   929                           ;main.c: 129: T2CON = 0;
   930  000D24  0E00               	movlw	0
   931  000D26  6ECA               	movwf	4042,c	;volatile
   932                           
   933                           ;main.c: 130: TMR2 = 0;
   934  000D28  0E00               	movlw	0
   935  000D2A  6ECC               	movwf	4044,c	;volatile
   936                           
   937                           ;main.c: 131: PR2 = 125;
   938  000D2C  0E7D               	movlw	125
   939  000D2E  6ECB               	movwf	4043,c	;volatile
   940                           
   941                           ;main.c: 132: T2CON = 0b01111101;
   942  000D30  0E7D               	movlw	125
   943  000D32  6ECA               	movwf	4042,c	;volatile
   944                           
   945                           ;main.c: 135: PIE1bits.TMR2IE = 1;
   946  000D34  829D               	bsf	3997,1,c	;volatile
   947                           
   948                           ;main.c: 136: INTCONbits.PEIE = 1;
   949  000D36  8CF2               	bsf	intcon,6,c	;volatile
   950                           
   951                           ;main.c: 137: INTCONbits.GIE = 1;
   952  000D38  8EF2               	bsf	intcon,7,c	;volatile
   953                           
   954                           ;main.c: 140: RCSTA = 0b10010000;
   955  000D3A  0E90               	movlw	144
   956  000D3C  6EAB               	movwf	4011,c	;volatile
   957                           
   958                           ;main.c: 141: BAUDCON = 0b00001000;
   959  000D3E  0E08               	movlw	8
   960  000D40  6EB8               	movwf	4024,c	;volatile
   961                           
   962                           ;main.c: 142: SPBRGH = 0;
   963  000D42  0E00               	movlw	0
   964  000D44  6EB0               	movwf	4016,c	;volatile
   965                           
   966                           ;main.c: 143: BRGH = 0;
   967  000D46  94AC               	bcf	4012,2,c	;volatile
   968                           
   969                           ;main.c: 144: SPBRG = 129;
   970  000D48  0E81               	movlw	129
   971  000D4A  6EAF               	movwf	4015,c	;volatile
   972                           
   973                           ;main.c: 146: led_stat = 0b11110011;
   974  000D4C  0EF3               	movlw	243
   975  000D4E  6E56               	movwf	_led_stat,c
   976  000D50                     
   977                           ;main.c: 155: if (PIR1bits.RCIF) {
   978  000D50  AA9E               	btfss	3998,5,c	;volatile
   979  000D52  D064               	goto	l93
   980                           
   981                           ;main.c: 156: PIR1bits.RCIF = 0;
   982  000D54  9A9E               	bcf	3998,5,c	;volatile
   983                           
   984                           ;main.c: 157: RxData = RCREG;
   985  000D56  CFAE F0A8          	movff	4014,main@RxData	;volatile
   986                           
   987                           ;main.c: 160: if ((RxData & 0b11100000) == 0b11100000) {
   988  000D5A  0100               	movlb	0	; () banked
   989  000D5C  51A8               	movf	main@RxData& (0+255),w,b
   990  000D5E  0BE0               	andlw	224
   991  000D60  0AE0               	xorlw	224
   992  000D62  A4D8               	btfss	status,2,c
   993  000D64  D05B               	goto	l93
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 161: digitSelector = (RxData & 0b00001111);
   997  000D66  51A8               	movf	main@RxData& (0+255),w,b
   998  000D68  0B0F               	andlw	15
   999  000D6A  6FA7               	movwf	main@digitSelector& (0+255),b
  1000                           
  1001                           ;main.c: 162: dotflag = (RxData & 0b00010000) >> 4;
  1002  000D6C  C0A8  F097         	movff	main@RxData,??_main
  1003  000D70  3B97               	swapf	??_main& (0+255),f,b
  1004  000D72  0E0F               	movlw	15
  1005  000D74  1797               	andwf	??_main& (0+255),f,b
  1006  000D76  0E01               	movlw	1
  1007  000D78  1797               	andwf	??_main& (0+255),f,b
  1008  000D7A  5197               	movf	??_main& (0+255),w,b
  1009  000D7C  6FA3               	movwf	main@dotflag& (0+255),b
  1010  000D7E  6BA4               	clrf	(main@dotflag+1)& (0+255),b
  1011  000D80  6BA5               	clrf	(main@dotflag+2)& (0+255),b
  1012  000D82  6BA6               	clrf	(main@dotflag+3)& (0+255),b
  1013  000D84                     
  1014                           ; BSR set to: 0
  1015  000D84  AA9E               	btfss	3998,5,c	;volatile
  1016  000D86  D7FE               	goto	l95
  1017                           
  1018                           ;main.c: 164: PIR1bits.RCIF = 0;
  1019  000D88  9A9E               	bcf	3998,5,c	;volatile
  1020                           
  1021                           ;main.c: 165: RxData = RCREG;
  1022  000D8A  CFAE F0A8          	movff	4014,main@RxData	;volatile
  1023                           
  1024                           ;main.c: 166: if (digitSelector > 8) continue;
  1025  000D8E  0E08               	movlw	8
  1026  000D90  0100               	movlb	0	; () banked
  1027  000D92  65A7               	cpfsgt	main@digitSelector& (0+255),b
  1028  000D94  D001               	goto	l97
  1029  000D96  D7DC               	goto	l91
  1030  000D98                     l97:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 167: if (RxData > 0b01111111) RxData = ~RxData;
  1034                           
  1035                           ; BSR set to: 0
  1036  000D98  0E7F               	movlw	127
  1037  000D9A  65A8               	cpfsgt	main@RxData& (0+255),b
  1038  000D9C  D001               	goto	l99
  1039                           
  1040                           ; BSR set to: 0
  1041  000D9E  1FA8               	comf	main@RxData& (0+255),f,b
  1042  000DA0                     l99:
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;main.c: 168: segMap[digitSelector] = ~(fontList[RxData] | (dotflag << 16));
  1046                           
  1047                           ; BSR set to: 0
  1048  000DA0  51A8               	movf	main@RxData& (0+255),w,b
  1049  000DA2  0D04               	mullw	4
  1050  000DA4  0EA9               	movlw	low _fontList
  1051  000DA6  24F3               	addwf	prodl,w,c
  1052  000DA8  6ED9               	movwf	fsr2l,c
  1053  000DAA  0E00               	movlw	high _fontList
  1054  000DAC  20F4               	addwfc	prodh,w,c
  1055  000DAE  6EDA               	movwf	fsr2h,c
  1056  000DB0  CFDE F097          	movff	postinc2,??_main
  1057  000DB4  CFDE F098          	movff	postinc2,??_main+1
  1058  000DB8  CFDE F099          	movff	postinc2,??_main+2
  1059  000DBC  CFDE F09A          	movff	postinc2,??_main+3
  1060  000DC0  C0A3  F09B         	movff	main@dotflag,??_main+4
  1061  000DC4  C0A4  F09C         	movff	main@dotflag+1,??_main+5
  1062  000DC8  C0A5  F09D         	movff	main@dotflag+2,??_main+6
  1063  000DCC  C0A6  F09E         	movff	main@dotflag+3,??_main+7
  1064  000DD0  C09C  F09E         	movff	??_main+5,??_main+7
  1065  000DD4  C09B  F09D         	movff	??_main+4,??_main+6
  1066  000DD8  6B9C               	clrf	(??_main+5)& (0+255),b
  1067  000DDA  6B9B               	clrf	(??_main+4)& (0+255),b
  1068  000DDC  5197               	movf	??_main& (0+255),w,b
  1069  000DDE  119B               	iorwf	(??_main+4)& (0+255),w,b
  1070  000DE0  6F9F               	movwf	(??_main+8)& (0+255),b
  1071  000DE2  5198               	movf	(??_main+1)& (0+255),w,b
  1072  000DE4  119C               	iorwf	(??_main+5)& (0+255),w,b
  1073  000DE6  6FA0               	movwf	(??_main+9)& (0+255),b
  1074  000DE8  5199               	movf	(??_main+2)& (0+255),w,b
  1075  000DEA  119D               	iorwf	(??_main+6)& (0+255),w,b
  1076  000DEC  6FA1               	movwf	(??_main+10)& (0+255),b
  1077  000DEE  519A               	movf	(??_main+3)& (0+255),w,b
  1078  000DF0  119E               	iorwf	(??_main+7)& (0+255),w,b
  1079  000DF2  6FA2               	movwf	(??_main+11)& (0+255),b
  1080  000DF4  1F9F               	comf	(??_main+8)& (0+255),f,b
  1081  000DF6  1FA0               	comf	(??_main+9)& (0+255),f,b
  1082  000DF8  1FA1               	comf	(??_main+10)& (0+255),f,b
  1083  000DFA  1FA2               	comf	(??_main+11)& (0+255),f,b
  1084  000DFC  51A7               	movf	main@digitSelector& (0+255),w,b
  1085  000DFE  0D04               	mullw	4
  1086  000E00  0E60               	movlw	low _segMap
  1087  000E02  24F3               	addwf	prodl,w,c
  1088  000E04  6ED9               	movwf	fsr2l,c
  1089  000E06  0E00               	movlw	high _segMap
  1090  000E08  20F4               	addwfc	prodh,w,c
  1091  000E0A  6EDA               	movwf	fsr2h,c
  1092  000E0C  C09F  FFDE         	movff	??_main+8,postinc2
  1093  000E10  C0A0  FFDE         	movff	??_main+9,postinc2
  1094  000E14  C0A1  FFDE         	movff	??_main+10,postinc2
  1095  000E18  C0A2  FFDE         	movff	??_main+11,postinc2
  1096  000E1C                     l93:
  1097                           
  1098                           ;main.c: 169: }
  1099                           ;main.c: 170: }
  1100                           ;main.c: 171: if (tmrIsr == 1) {
  1101                           
  1102                           ; BSR set to: 0
  1103                           
  1104                           ; BSR set to: 0
  1105  000E1C  0100               	movlb	0	; () banked
  1106  000E1E  0584               	decf	_tmrIsr& (0+255),w,b
  1107  000E20  A4D8               	btfss	status,2,c
  1108  000E22  D796               	goto	l91
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 172: tmrIsr = 0;
  1112  000E24  0E00               	movlw	0
  1113  000E26  6F84               	movwf	_tmrIsr& (0+255),b
  1114                           
  1115                           ; BSR set to: 0
  1116                           
  1117                           ; BSR set to: 0
  1118  000E28  D793               	goto	l91
  1119  000E2A                     __end_of_main:
  1120                           	opt stack 0
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           prodh	equ	0xFF4
  1126                           prodl	equ	0xFF3
  1127                           intcon	equ	0xFF2
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1h	equ	0xFE2
  1132                           fsr1l	equ	0xFE1
  1133                           postinc2	equ	0xFDE
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _isr *****************
  1139 ;; Defined at:
  1140 ;;		line 200 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1154 ;;      Params:         0       0       0       0       0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1156 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1157 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1158 ;;Total ram usage:       18 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		___awmod
  1163 ;;		_handleMessage
  1164 ;;		_refreshShiftRegister
  1165 ;; This function is called by:
  1166 ;;		Interrupt level 2
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	intcode
  1171  000008                     __pintcode:
  1172                           	opt stack 0
  1173  000008                     _isr:
  1174                           	opt stack 28
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;incstack = 0
  1178  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1179  00000A  ED7C  F007         	call	int_func,f	;refresh shadow registers
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           intcon	equ	0xFF2
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           postdec1	equ	0xFE5
  1190                           fsr1h	equ	0xFE2
  1191                           fsr1l	equ	0xFE1
  1192                           postinc2	equ	0xFDE
  1193                           fsr2h	equ	0xFDA
  1194                           fsr2l	equ	0xFD9
  1195                           status	equ	0xFD8
  1196                           
  1197                           	psect	intcode_body
  1198  000EF8                     __pintcode_body:
  1199                           	opt stack 28
  1200  000EF8                     int_func:
  1201                           	opt stack 28
  1202  000EF8  0006               	pop		; remove dummy address from shadow register refresh
  1203  000EFA  CFFA F03F          	movff	pclath,??_isr
  1204  000EFE  CFFB F040          	movff	pclatu,??_isr+1
  1205  000F02  CFE9 F041          	movff	fsr0l,??_isr+2
  1206  000F06  CFEA F042          	movff	fsr0h,??_isr+3
  1207  000F0A  CFE1 F043          	movff	fsr1l,??_isr+4
  1208  000F0E  CFE2 F044          	movff	fsr1h,??_isr+5
  1209  000F12  CFD9 F045          	movff	fsr2l,??_isr+6
  1210  000F16  CFDA F046          	movff	fsr2h,??_isr+7
  1211  000F1A  CFF3 F047          	movff	prodl,??_isr+8
  1212  000F1E  CFF4 F048          	movff	prodh,??_isr+9
  1213  000F22  CFF6 F049          	movff	tblptrl,??_isr+10
  1214  000F26  CFF7 F04A          	movff	tblptrh,??_isr+11
  1215  000F2A  CFF8 F04B          	movff	tblptru,??_isr+12
  1216  000F2E  CFF5 F04C          	movff	tablat,??_isr+13
  1217  000F32  C057  F04D         	movff	btemp,??_isr+14
  1218  000F36  C058  F04E         	movff	btemp+1,??_isr+15
  1219  000F3A  C059  F04F         	movff	btemp+2,??_isr+16
  1220  000F3E  C05A  F050         	movff	btemp+3,??_isr+17
  1221                           
  1222                           ;main.c: 201: if (PIR1bits.TMR2IF) {
  1223  000F42  A29E               	btfss	3998,1,c	;volatile
  1224  000F44  D019               	goto	i2l120
  1225                           
  1226                           ;main.c: 202: PIR1bits.TMR2IF = 0;
  1227  000F46  929E               	bcf	3998,1,c	;volatile
  1228                           
  1229                           ;main.c: 203: tmrIsr = 1;
  1230  000F48  0E01               	movlw	1
  1231  000F4A  0100               	movlb	0	; () banked
  1232  000F4C  6F84               	movwf	_tmrIsr& (0+255),b
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 204: handleMessage();
  1236  000F4E  ECE2  F007         	call	_handleMessage	;wreg free
  1237                           
  1238                           ;main.c: 205: refreshShiftRegister(digitPtr);
  1239  000F52  C055  F001         	movff	_digitPtr,refreshShiftRegister@ptr
  1240  000F56  6A02               	clrf	refreshShiftRegister@ptr+1,c
  1241  000F58  EC54  F004         	call	_refreshShiftRegister	;wreg free
  1242                           
  1243                           ;main.c: 206: digitPtr = (digitPtr+1)%9;
  1244  000F5C  0E01               	movlw	1
  1245  000F5E  2455               	addwf	_digitPtr,w,c
  1246  000F60  6E01               	movwf	___awmod@dividend,c
  1247  000F62  6A02               	clrf	___awmod@dividend+1,c
  1248  000F64  0E00               	movlw	0
  1249  000F66  2202               	addwfc	___awmod@dividend+1,f,c
  1250  000F68  0E00               	movlw	0
  1251  000F6A  6E04               	movwf	___awmod@divisor+1,c
  1252  000F6C  0E09               	movlw	9
  1253  000F6E  6E03               	movwf	___awmod@divisor,c
  1254  000F70  EC3B  F008         	call	___awmod	;wreg free
  1255  000F74  5001               	movf	?___awmod,w,c
  1256  000F76  6E55               	movwf	_digitPtr,c
  1257  000F78                     i2l120:
  1258  000F78  C050  F05A         	movff	??_isr+17,btemp+3
  1259  000F7C  C04F  F059         	movff	??_isr+16,btemp+2
  1260  000F80  C04E  F058         	movff	??_isr+15,btemp+1
  1261  000F84  C04D  F057         	movff	??_isr+14,btemp
  1262  000F88  C04C  FFF5         	movff	??_isr+13,tablat
  1263  000F8C  C04B  FFF8         	movff	??_isr+12,tblptru
  1264  000F90  C04A  FFF7         	movff	??_isr+11,tblptrh
  1265  000F94  C049  FFF6         	movff	??_isr+10,tblptrl
  1266  000F98  C048  FFF4         	movff	??_isr+9,prodh
  1267  000F9C  C047  FFF3         	movff	??_isr+8,prodl
  1268  000FA0  C046  FFDA         	movff	??_isr+7,fsr2h
  1269  000FA4  C045  FFD9         	movff	??_isr+6,fsr2l
  1270  000FA8  C044  FFE2         	movff	??_isr+5,fsr1h
  1271  000FAC  C043  FFE1         	movff	??_isr+4,fsr1l
  1272  000FB0  C042  FFEA         	movff	??_isr+3,fsr0h
  1273  000FB4  C041  FFE9         	movff	??_isr+2,fsr0l
  1274  000FB8  C040  FFFB         	movff	??_isr+1,pclatu
  1275  000FBC  C03F  FFFA         	movff	??_isr,pclath
  1276  000FC0  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1277  000FC2  0011               	retfie		f
  1278  000FC4                     __end_of_isr:
  1279                           	opt stack 0
  1280                           pclatu	equ	0xFFB
  1281                           pclath	equ	0xFFA
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           prodh	equ	0xFF4
  1287                           prodl	equ	0xFF3
  1288                           intcon	equ	0xFF2
  1289                           postinc0	equ	0xFEE
  1290                           fsr0h	equ	0xFEA
  1291                           fsr0l	equ	0xFE9
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1h	equ	0xFE2
  1295                           fsr1l	equ	0xFE1
  1296                           postinc2	equ	0xFDE
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _refreshShiftRegister *****************
  1302 ;; Defined at:
  1303 ;;		line 77 in file "main.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  ptr             2    0[COMRAM] int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  i               2   60[COMRAM] int 
  1308 ;;  map             4   54[COMRAM] unsigned long 
  1309 ;;  ledSelector     2   58[COMRAM] unsigned int 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1319 ;;      Params:         2       0       0       0       0       0       0       0       0
  1320 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1321 ;;      Temps:         52       0       0       0       0       0       0       0       0
  1322 ;;      Totals:        62       0       0       0       0       0       0       0       0
  1323 ;;Total ram usage:       62 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_isr
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text2
  1333  0008A8                     __ptext2:
  1334                           	opt stack 0
  1335  0008A8                     _refreshShiftRegister:
  1336                           	opt stack 29
  1337                           
  1338                           ;main.c: 78: uint16_t ledSelector = 0b1 << ptr;
  1339                           
  1340                           ;incstack = 0
  1341  0008A8  C001  F003         	movff	refreshShiftRegister@ptr,??_refreshShiftRegister
  1342  0008AC  0E01               	movlw	1
  1343  0008AE  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1344  0008B0  0E00               	movlw	0
  1345  0008B2  6E05               	movwf	(??_refreshShiftRegister+2)& (0+255),c
  1346  0008B4  2A03               	incf	??_refreshShiftRegister,f,c
  1347  0008B6  D003               	goto	i2u45_44
  1348  0008B8                     i2u45_45:
  1349  0008B8  90D8               	bcf	status,0,c
  1350  0008BA  3604               	rlcf	??_refreshShiftRegister+1,f,c
  1351  0008BC  3605               	rlcf	??_refreshShiftRegister+2,f,c
  1352  0008BE                     i2u45_44:
  1353  0008BE  2E03               	decfsz	??_refreshShiftRegister,f,c
  1354  0008C0  D7FB               	goto	i2u45_45
  1355  0008C2  C004  F03B         	movff	??_refreshShiftRegister+1,refreshShiftRegister@ledSelector
  1356  0008C6  C005  F03C         	movff	??_refreshShiftRegister+2,refreshShiftRegister@ledSelector+1
  1357                           
  1358                           ;main.c: 80: uint32_t map = ((segMap[ptr] & 0b11111111) << 24)
  1359                           ;main.c: 81: | ((segMap[ptr] & 0b1111111100000000) << 8)
  1360                           ;main.c: 82: | ((ledSelector & 0b0000000011) << 14)
  1361                           ;main.c: 83: | ((led_stat & 0b00001111) << 10)
  1362                           ;main.c: 84: | ((segMap[ptr] & 0b110000000000000000) >> 8)
  1363                           ;main.c: 85: | ((ledSelector & 0b1111111100) >> 2);
  1364  0008CA  0E60               	movlw	low _segMap
  1365  0008CC  6E03               	movwf	??_refreshShiftRegister& (0+255),c
  1366  0008CE  0E00               	movlw	high _segMap
  1367  0008D0  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1368  0008D2  90D8               	bcf	status,0,c
  1369  0008D4  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1370  0008D6  6ED9               	movwf	fsr2l,c
  1371  0008D8  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1372  0008DA  6EDA               	movwf	fsr2h,c
  1373  0008DC  90D8               	bcf	status,0,c
  1374  0008DE  36D9               	rlcf	fsr2l,f,c
  1375  0008E0  36DA               	rlcf	fsr2h,f,c
  1376  0008E2  5003               	movf	??_refreshShiftRegister,w,c
  1377  0008E4  26D9               	addwf	fsr2l,f,c
  1378  0008E6  5004               	movf	??_refreshShiftRegister+1,w,c
  1379  0008E8  22DA               	addwfc	fsr2h,f,c
  1380  0008EA  CFDE F005          	movff	postinc2,??_refreshShiftRegister+2
  1381  0008EE  CFDE F006          	movff	postinc2,??_refreshShiftRegister+3
  1382  0008F2  CFDE F007          	movff	postinc2,??_refreshShiftRegister+4
  1383  0008F6  CFDE F008          	movff	postinc2,??_refreshShiftRegister+5
  1384  0008FA  C006  F005         	movff	??_refreshShiftRegister+3,??_refreshShiftRegister+2
  1385  0008FE  C007  F006         	movff	??_refreshShiftRegister+4,??_refreshShiftRegister+3
  1386  000902  C008  F007         	movff	??_refreshShiftRegister+5,??_refreshShiftRegister+4
  1387  000906  6A08               	clrf	??_refreshShiftRegister+5,c
  1388  000908  0E00               	movlw	0
  1389  00090A  1405               	andwf	??_refreshShiftRegister+2,w,c
  1390  00090C  6E09               	movwf	(??_refreshShiftRegister+6)& (0+255),c
  1391  00090E  0E03               	movlw	3
  1392  000910  1406               	andwf	??_refreshShiftRegister+3,w,c
  1393  000912  6E0A               	movwf	(??_refreshShiftRegister+7)& (0+255),c
  1394  000914  0E00               	movlw	0
  1395  000916  1407               	andwf	??_refreshShiftRegister+4,w,c
  1396  000918  6E0B               	movwf	(??_refreshShiftRegister+8)& (0+255),c
  1397  00091A  0E00               	movlw	0
  1398  00091C  1408               	andwf	??_refreshShiftRegister+5,w,c
  1399  00091E  6E0C               	movwf	(??_refreshShiftRegister+9)& (0+255),c
  1400  000920  5056               	movf	_led_stat,w,c
  1401  000922  0B0F               	andlw	15
  1402  000924  6E0D               	movwf	(??_refreshShiftRegister+10)& (0+255),c
  1403  000926  6A0E               	clrf	(??_refreshShiftRegister+11)& (0+255),c
  1404  000928  0E0A               	movlw	10
  1405  00092A                     i2u46_45:
  1406  00092A  90D8               	bcf	status,0,c
  1407  00092C  360D               	rlcf	??_refreshShiftRegister+10,f,c
  1408  00092E  360E               	rlcf	??_refreshShiftRegister+11,f,c
  1409  000930  2EE8               	decfsz	wreg,f,c
  1410  000932  D7FB               	goto	i2u46_45
  1411  000934  C00D  F00F         	movff	??_refreshShiftRegister+10,??_refreshShiftRegister+12
  1412  000938  C00E  F010         	movff	??_refreshShiftRegister+11,??_refreshShiftRegister+13
  1413  00093C  0E00               	movlw	0
  1414  00093E  BE10               	btfsc	(??_refreshShiftRegister+13)& (0+255),7,c
  1415  000940  0EFF               	movlw	255
  1416  000942  6E11               	movwf	(??_refreshShiftRegister+14)& (0+255),c
  1417  000944  6E12               	movwf	(??_refreshShiftRegister+15)& (0+255),c
  1418  000946  0E03               	movlw	3
  1419  000948  143B               	andwf	refreshShiftRegister@ledSelector,w,c
  1420  00094A  6E13               	movwf	(??_refreshShiftRegister+16)& (0+255),c
  1421  00094C  0E00               	movlw	0
  1422  00094E  143C               	andwf	refreshShiftRegister@ledSelector+1,w,c
  1423  000950  6E14               	movwf	(??_refreshShiftRegister+17)& (0+255),c
  1424  000952  0E0E               	movlw	14
  1425  000954                     i2u47_45:
  1426  000954  90D8               	bcf	status,0,c
  1427  000956  3613               	rlcf	??_refreshShiftRegister+16,f,c
  1428  000958  3614               	rlcf	??_refreshShiftRegister+17,f,c
  1429  00095A  2EE8               	decfsz	wreg,f,c
  1430  00095C  D7FB               	goto	i2u47_45
  1431  00095E  0E60               	movlw	low _segMap
  1432  000960  6E15               	movwf	(??_refreshShiftRegister+18)& (0+255),c
  1433  000962  0E00               	movlw	high _segMap
  1434  000964  6E16               	movwf	(??_refreshShiftRegister+19)& (0+255),c
  1435  000966  90D8               	bcf	status,0,c
  1436  000968  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1437  00096A  6ED9               	movwf	fsr2l,c
  1438  00096C  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1439  00096E  6EDA               	movwf	fsr2h,c
  1440  000970  90D8               	bcf	status,0,c
  1441  000972  36D9               	rlcf	fsr2l,f,c
  1442  000974  36DA               	rlcf	fsr2h,f,c
  1443  000976  5015               	movf	??_refreshShiftRegister+18,w,c
  1444  000978  26D9               	addwf	fsr2l,f,c
  1445  00097A  5016               	movf	??_refreshShiftRegister+19,w,c
  1446  00097C  22DA               	addwfc	fsr2h,f,c
  1447  00097E  0E00               	movlw	0
  1448  000980  14DE               	andwf	postinc2,w,c
  1449  000982  6E17               	movwf	(??_refreshShiftRegister+20)& (0+255),c
  1450  000984  0EFF               	movlw	255
  1451  000986  14DE               	andwf	postinc2,w,c
  1452  000988  6E18               	movwf	(??_refreshShiftRegister+21)& (0+255),c
  1453  00098A  0E00               	movlw	0
  1454  00098C  14DE               	andwf	postinc2,w,c
  1455  00098E  6E19               	movwf	(??_refreshShiftRegister+22)& (0+255),c
  1456  000990  0E00               	movlw	0
  1457  000992  14DE               	andwf	postinc2,w,c
  1458  000994  6E1A               	movwf	(??_refreshShiftRegister+23)& (0+255),c
  1459  000996  C019  F01A         	movff	??_refreshShiftRegister+22,??_refreshShiftRegister+23
  1460  00099A  C018  F019         	movff	??_refreshShiftRegister+21,??_refreshShiftRegister+22
  1461  00099E  C017  F018         	movff	??_refreshShiftRegister+20,??_refreshShiftRegister+21
  1462  0009A2  6A17               	clrf	??_refreshShiftRegister+20,c
  1463  0009A4  0E60               	movlw	low _segMap
  1464  0009A6  6E1B               	movwf	(??_refreshShiftRegister+24)& (0+255),c
  1465  0009A8  0E00               	movlw	high _segMap
  1466  0009AA  6E1C               	movwf	(??_refreshShiftRegister+25)& (0+255),c
  1467  0009AC  90D8               	bcf	status,0,c
  1468  0009AE  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1469  0009B0  6ED9               	movwf	fsr2l,c
  1470  0009B2  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1471  0009B4  6EDA               	movwf	fsr2h,c
  1472  0009B6  90D8               	bcf	status,0,c
  1473  0009B8  36D9               	rlcf	fsr2l,f,c
  1474  0009BA  36DA               	rlcf	fsr2h,f,c
  1475  0009BC  501B               	movf	??_refreshShiftRegister+24,w,c
  1476  0009BE  26D9               	addwf	fsr2l,f,c
  1477  0009C0  501C               	movf	??_refreshShiftRegister+25,w,c
  1478  0009C2  22DA               	addwfc	fsr2h,f,c
  1479  0009C4  CFDE F01D          	movff	postinc2,??_refreshShiftRegister+26
  1480  0009C8  CFDE F01E          	movff	postinc2,??_refreshShiftRegister+27
  1481  0009CC  CFDE F01F          	movff	postinc2,??_refreshShiftRegister+28
  1482  0009D0  CFDE F020          	movff	postinc2,??_refreshShiftRegister+29
  1483  0009D4  0EFF               	movlw	255
  1484  0009D6  141D               	andwf	??_refreshShiftRegister+26,w,c
  1485  0009D8  6E21               	movwf	(??_refreshShiftRegister+30)& (0+255),c
  1486  0009DA  0E00               	movlw	0
  1487  0009DC  141E               	andwf	??_refreshShiftRegister+27,w,c
  1488  0009DE  6E22               	movwf	(??_refreshShiftRegister+31)& (0+255),c
  1489  0009E0  0E00               	movlw	0
  1490  0009E2  141F               	andwf	??_refreshShiftRegister+28,w,c
  1491  0009E4  6E23               	movwf	(??_refreshShiftRegister+32)& (0+255),c
  1492  0009E6  0E00               	movlw	0
  1493  0009E8  1420               	andwf	??_refreshShiftRegister+29,w,c
  1494  0009EA  6E24               	movwf	(??_refreshShiftRegister+33)& (0+255),c
  1495  0009EC  C021  F024         	movff	??_refreshShiftRegister+30,??_refreshShiftRegister+33
  1496  0009F0  6A23               	clrf	??_refreshShiftRegister+32,c
  1497  0009F2  6A22               	clrf	??_refreshShiftRegister+31,c
  1498  0009F4  6A21               	clrf	??_refreshShiftRegister+30,c
  1499  0009F6  5017               	movf	??_refreshShiftRegister+20,w,c
  1500  0009F8  1021               	iorwf	??_refreshShiftRegister+30,w,c
  1501  0009FA  6E25               	movwf	(??_refreshShiftRegister+34)& (0+255),c
  1502  0009FC  5018               	movf	??_refreshShiftRegister+21,w,c
  1503  0009FE  1022               	iorwf	??_refreshShiftRegister+31,w,c
  1504  000A00  6E26               	movwf	(??_refreshShiftRegister+35)& (0+255),c
  1505  000A02  5019               	movf	??_refreshShiftRegister+22,w,c
  1506  000A04  1023               	iorwf	??_refreshShiftRegister+32,w,c
  1507  000A06  6E27               	movwf	(??_refreshShiftRegister+36)& (0+255),c
  1508  000A08  501A               	movf	??_refreshShiftRegister+23,w,c
  1509  000A0A  1024               	iorwf	??_refreshShiftRegister+33,w,c
  1510  000A0C  6E28               	movwf	(??_refreshShiftRegister+37)& (0+255),c
  1511  000A0E  5013               	movf	??_refreshShiftRegister+16,w,c
  1512  000A10  1025               	iorwf	??_refreshShiftRegister+34,w,c
  1513  000A12  6E29               	movwf	(??_refreshShiftRegister+38)& (0+255),c
  1514  000A14  5014               	movf	??_refreshShiftRegister+17,w,c
  1515  000A16  1026               	iorwf	??_refreshShiftRegister+35,w,c
  1516  000A18  6E2A               	movwf	(??_refreshShiftRegister+39)& (0+255),c
  1517  000A1A  0E00               	movlw	0
  1518  000A1C  1027               	iorwf	??_refreshShiftRegister+36,w,c
  1519  000A1E  6E2B               	movwf	(??_refreshShiftRegister+40)& (0+255),c
  1520  000A20  0E00               	movlw	0
  1521  000A22  1028               	iorwf	??_refreshShiftRegister+37,w,c
  1522  000A24  6E2C               	movwf	(??_refreshShiftRegister+41)& (0+255),c
  1523  000A26  500F               	movf	??_refreshShiftRegister+12,w,c
  1524  000A28  1029               	iorwf	??_refreshShiftRegister+38,w,c
  1525  000A2A  6E2D               	movwf	(??_refreshShiftRegister+42)& (0+255),c
  1526  000A2C  5010               	movf	??_refreshShiftRegister+13,w,c
  1527  000A2E  102A               	iorwf	??_refreshShiftRegister+39,w,c
  1528  000A30  6E2E               	movwf	(??_refreshShiftRegister+43)& (0+255),c
  1529  000A32  5011               	movf	??_refreshShiftRegister+14,w,c
  1530  000A34  102B               	iorwf	??_refreshShiftRegister+40,w,c
  1531  000A36  6E2F               	movwf	(??_refreshShiftRegister+44)& (0+255),c
  1532  000A38  5012               	movf	??_refreshShiftRegister+15,w,c
  1533  000A3A  102C               	iorwf	??_refreshShiftRegister+41,w,c
  1534  000A3C  6E30               	movwf	(??_refreshShiftRegister+45)& (0+255),c
  1535  000A3E  5009               	movf	??_refreshShiftRegister+6,w,c
  1536  000A40  102D               	iorwf	??_refreshShiftRegister+42,w,c
  1537  000A42  6E31               	movwf	(??_refreshShiftRegister+46)& (0+255),c
  1538  000A44  500A               	movf	??_refreshShiftRegister+7,w,c
  1539  000A46  102E               	iorwf	??_refreshShiftRegister+43,w,c
  1540  000A48  6E32               	movwf	(??_refreshShiftRegister+47)& (0+255),c
  1541  000A4A  500B               	movf	??_refreshShiftRegister+8,w,c
  1542  000A4C  102F               	iorwf	??_refreshShiftRegister+44,w,c
  1543  000A4E  6E33               	movwf	(??_refreshShiftRegister+48)& (0+255),c
  1544  000A50  500C               	movf	??_refreshShiftRegister+9,w,c
  1545  000A52  1030               	iorwf	??_refreshShiftRegister+45,w,c
  1546  000A54  6E34               	movwf	(??_refreshShiftRegister+49)& (0+255),c
  1547  000A56  C03B  F035         	movff	refreshShiftRegister@ledSelector,??_refreshShiftRegister+50
  1548  000A5A  C03C  F036         	movff	refreshShiftRegister@ledSelector+1,??_refreshShiftRegister+51
  1549  000A5E  90D8               	bcf	status,0,c
  1550  000A60  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1551  000A62  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1552  000A64  90D8               	bcf	status,0,c
  1553  000A66  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1554  000A68  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1555  000A6A  5035               	movf	??_refreshShiftRegister+50,w,c
  1556  000A6C  1031               	iorwf	??_refreshShiftRegister+46,w,c
  1557  000A6E  6E37               	movwf	refreshShiftRegister@map,c
  1558  000A70  5032               	movf	??_refreshShiftRegister+47,w,c
  1559  000A72  6E38               	movwf	refreshShiftRegister@map+1,c
  1560  000A74  5033               	movf	??_refreshShiftRegister+48,w,c
  1561  000A76  6E39               	movwf	refreshShiftRegister@map+2,c
  1562  000A78  5034               	movf	??_refreshShiftRegister+49,w,c
  1563  000A7A  6E3A               	movwf	refreshShiftRegister@map+3,c
  1564                           
  1565                           ;main.c: 87: for (int i = 0; i < 32; i++) {
  1566  000A7C  0E00               	movlw	0
  1567  000A7E  6E3E               	movwf	refreshShiftRegister@i+1,c
  1568  000A80  0E00               	movlw	0
  1569  000A82  6E3D               	movwf	refreshShiftRegister@i,c
  1570  000A84  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1571  000A86  D003               	goto	i2l84
  1572  000A88  503E               	movf	refreshShiftRegister@i+1,w,c
  1573  000A8A  E12E               	bnz	i2l85
  1574  000A8C  D029               	goto	L1
  1575  000A8E                     i2l84:
  1576                           
  1577                           ;main.c: 88: LATBbits.LATB2 = (map >> i) & 1;
  1578  000A8E  503D               	movf	refreshShiftRegister@i,w,c
  1579  000A90  C037  F003         	movff	refreshShiftRegister@map,??_refreshShiftRegister
  1580  000A94  C038  F004         	movff	refreshShiftRegister@map+1,??_refreshShiftRegister+1
  1581  000A98  C039  F005         	movff	refreshShiftRegister@map+2,??_refreshShiftRegister+2
  1582  000A9C  C03A  F006         	movff	refreshShiftRegister@map+3,??_refreshShiftRegister+3
  1583  000AA0  2AE8               	incf	wreg,f,c
  1584  000AA2  D005               	goto	i2u49_40
  1585  000AA4                     i2u49_45:
  1586  000AA4  90D8               	bcf	status,0,c
  1587  000AA6  3206               	rrcf	??_refreshShiftRegister+3,f,c
  1588  000AA8  3205               	rrcf	??_refreshShiftRegister+2,f,c
  1589  000AAA  3204               	rrcf	??_refreshShiftRegister+1,f,c
  1590  000AAC  3203               	rrcf	??_refreshShiftRegister,f,c
  1591  000AAE                     i2u49_40:
  1592  000AAE  2EE8               	decfsz	wreg,f,c
  1593  000AB0  D7F9               	goto	i2u49_45
  1594  000AB2  0E01               	movlw	1
  1595  000AB4  1603               	andwf	??_refreshShiftRegister,f,c
  1596  000AB6  4603               	rlncf	??_refreshShiftRegister,f,c
  1597  000AB8  4603               	rlncf	??_refreshShiftRegister,f,c
  1598  000ABA  508A               	movf	3978,w,c	;volatile
  1599  000ABC  1803               	xorwf	??_refreshShiftRegister,w,c
  1600  000ABE  0BFB               	andlw	-5
  1601  000AC0  1803               	xorwf	??_refreshShiftRegister,w,c
  1602  000AC2  6E8A               	movwf	3978,c	;volatile
  1603                           
  1604                           ;main.c: 89: LATBbits.LATB3 = 1;
  1605  000AC4  868A               	bsf	3978,3,c	;volatile
  1606                           
  1607                           ;main.c: 90: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1608  000AC6  D000               	nop2		;2 cycle nop
  1609  000AC8  D000               	nop2		;2 cycle nop
  1610  000ACA  F000               	nop	
  1611                           
  1612                           ;main.c: 91: LATBbits.LATB3 = 0;
  1613  000ACC  968A               	bcf	3978,3,c	;volatile
  1614                           
  1615                           ;main.c: 92: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1616  000ACE  D000               	nop2		;2 cycle nop
  1617  000AD0  D000               	nop2		;2 cycle nop
  1618  000AD2  F000               	nop	
  1619  000AD4  4A3D               	infsnz	refreshShiftRegister@i,f,c
  1620  000AD6  2A3E               	incf	refreshShiftRegister@i+1,f,c
  1621  000AD8  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1622  000ADA  D7D9               	goto	i2l84
  1623  000ADC  503E               	movf	refreshShiftRegister@i+1,w,c
  1624  000ADE  E104               	bnz	i2u50_40
  1625  000AE0                     L1:
  1626  000AE0  0E20               	movlw	32
  1627  000AE2  5C3D               	subwf	refreshShiftRegister@i,w,c
  1628  000AE4  A0D8               	btfss	status,0,c
  1629  000AE6  D7D3               	goto	i2l84
  1630  000AE8                     i2u50_40:
  1631  000AE8                     i2l85:
  1632                           
  1633                           ;main.c: 93: }
  1634                           ;main.c: 95: LATBbits.LATB4 = 1;
  1635  000AE8  888A               	bsf	3978,4,c	;volatile
  1636                           
  1637                           ;main.c: 96: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1638  000AEA  D000               	nop2		;2 cycle nop
  1639  000AEC  D000               	nop2		;2 cycle nop
  1640  000AEE  F000               	nop	
  1641                           
  1642                           ;main.c: 97: LATBbits.LATB4 = 0;
  1643  000AF0  988A               	bcf	3978,4,c	;volatile
  1644                           
  1645                           ;main.c: 98: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1646  000AF2  D000               	nop2		;2 cycle nop
  1647  000AF4  D000               	nop2		;2 cycle nop
  1648  000AF6  F000               	nop	
  1649  000AF8  0012               	return		;funcret
  1650  000AFA                     __end_of_refreshShiftRegister:
  1651                           	opt stack 0
  1652                           pclatu	equ	0xFFB
  1653                           pclath	equ	0xFFA
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           prodh	equ	0xFF4
  1659                           prodl	equ	0xFF3
  1660                           intcon	equ	0xFF2
  1661                           postinc0	equ	0xFEE
  1662                           fsr0h	equ	0xFEA
  1663                           fsr0l	equ	0xFE9
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           fsr1h	equ	0xFE2
  1667                           fsr1l	equ	0xFE1
  1668                           postinc2	equ	0xFDE
  1669                           fsr2h	equ	0xFDA
  1670                           fsr2l	equ	0xFD9
  1671                           status	equ	0xFD8
  1672                           
  1673 ;; *************** function _handleMessage *****************
  1674 ;; Defined at:
  1675 ;;		line 186 in file "main.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1691 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1692 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1693 ;;Total ram usage:        6 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    1
  1696 ;; This function calls:
  1697 ;;		_setMsgWithDot
  1698 ;;		_strncpy
  1699 ;; This function is called by:
  1700 ;;		_isr
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text3
  1705  000FC4                     __ptext3:
  1706                           	opt stack 0
  1707  000FC4                     _handleMessage:
  1708                           	opt stack 28
  1709                           
  1710                           ;main.c: 187: if (divisor++ == 500) {
  1711                           
  1712                           ;incstack = 0
  1713  000FC4  4A53               	infsnz	_divisor,f,c
  1714  000FC6  2A54               	incf	_divisor+1,f,c
  1715  000FC8  0EF5               	movlw	245
  1716  000FCA  1853               	xorwf	_divisor,w,c
  1717  000FCC  E153               	bnz	i2l115
  1718  000FCE  0454               	decf	_divisor+1,w,c
  1719  000FD0  A4D8               	btfss	status,2,c
  1720  000FD2  0012               	return	
  1721                           
  1722                           ;main.c: 188: divisor = 0;
  1723  000FD4  0E00               	movlw	0
  1724  000FD6  6E54               	movwf	_divisor+1,c
  1725  000FD8  0E00               	movlw	0
  1726  000FDA  6E53               	movwf	_divisor,c
  1727                           
  1728                           ;main.c: 190: if (writeItr++ == MESSAGE_LENGTH-9) writeItr = 0;
  1729  000FDC  5051               	movf	_writeItr,w,c
  1730  000FDE  6E17               	movwf	??_handleMessage& (0+255),c
  1731  000FE0  5052               	movf	_writeItr+1,w,c
  1732  000FE2  6E18               	movwf	(??_handleMessage+1)& (0+255),c
  1733  000FE4  4A51               	infsnz	_writeItr,f,c
  1734  000FE6  2A52               	incf	_writeItr+1,f,c
  1735  000FE8  0EF7               	movlw	247
  1736  000FEA  6E19               	movwf	(??_handleMessage+2)& (0+255),c
  1737  000FEC  0EFF               	movlw	255
  1738  000FEE  6E1A               	movwf	(??_handleMessage+3)& (0+255),c
  1739  000FF0  0E01               	movlw	low _MESSAGE_LENGTH
  1740  000FF2  6EF6               	movwf	tblptrl,c
  1741  000FF4                     	if	0	;There is only one active tblptr byte
  1742  000FF4                     	endif
  1743  000FF4                     	if	0	;There are less than 3 active tblptr bytes
  1744  000FF4                     	endif
  1745  000FF4  0009               	tblrd		*+
  1746  000FF6  CFF5 F01B          	movff	tablat,??_handleMessage+4
  1747  000FFA  0009               	tblrd		*+
  1748  000FFC  CFF5 F01C          	movff	tablat,??_handleMessage+5
  1749  001000  5019               	movf	??_handleMessage+2,w,c
  1750  001002  261B               	addwf	??_handleMessage+4,f,c
  1751  001004  501A               	movf	??_handleMessage+3,w,c
  1752  001006  221C               	addwfc	??_handleMessage+5,f,c
  1753  001008  5017               	movf	??_handleMessage,w,c
  1754  00100A  181B               	xorwf	??_handleMessage+4,w,c
  1755  00100C  E108               	bnz	i2l1096
  1756  00100E  5018               	movf	??_handleMessage+1,w,c
  1757  001010  181C               	xorwf	??_handleMessage+5,w,c
  1758  001012  A4D8               	btfss	status,2,c
  1759  001014  D004               	goto	i2l114
  1760  001016  0E00               	movlw	0
  1761  001018  6E52               	movwf	_writeItr+1,c
  1762  00101A  0E00               	movlw	0
  1763  00101C  6E51               	movwf	_writeItr,c
  1764  00101E                     i2l114:
  1765  00101E                     i2l1096:
  1766                           
  1767                           ;main.c: 191: strncpy(display, DEMO_MESSAGE + writeItr, 9);
  1768  00101E  0E8E               	movlw	low _display
  1769  001020  6E01               	movwf	strncpy@to,c
  1770  001022  0E00               	movlw	high _display
  1771  001024  6E02               	movwf	strncpy@to+1,c
  1772  001026  0E55               	movlw	low _DEMO_MESSAGE
  1773  001028  2451               	addwf	_writeItr,w,c
  1774  00102A  6E03               	movwf	strncpy@from,c
  1775  00102C  0E08               	movlw	high _DEMO_MESSAGE
  1776  00102E  2052               	addwfc	_writeItr+1,w,c
  1777  001030  6E04               	movwf	strncpy@from+1,c
  1778  001032  0E00               	movlw	0
  1779  001034  6E06               	movwf	strncpy@size+1,c
  1780  001036  0E09               	movlw	9
  1781  001038  6E05               	movwf	strncpy@size,c
  1782  00103A  ECA9  F008         	call	_strncpy	;wreg free
  1783                           
  1784                           ;main.c: 192: strncpy(disdot, DEMO_DOTFLAG + writeItr, 9);
  1785  00103E  0E85               	movlw	low _disdot
  1786  001040  6E01               	movwf	strncpy@to,c
  1787  001042  0E00               	movlw	high _disdot
  1788  001044  6E02               	movwf	strncpy@to+1,c
  1789  001046  0E03               	movlw	low _DEMO_DOTFLAG
  1790  001048  2451               	addwf	_writeItr,w,c
  1791  00104A  6E03               	movwf	strncpy@from,c
  1792  00104C  0E08               	movlw	high _DEMO_DOTFLAG
  1793  00104E  2052               	addwfc	_writeItr+1,w,c
  1794  001050  6E04               	movwf	strncpy@from+1,c
  1795  001052  0E00               	movlw	0
  1796  001054  6E06               	movwf	strncpy@size+1,c
  1797  001056  0E09               	movlw	9
  1798  001058  6E05               	movwf	strncpy@size,c
  1799  00105A  ECA9  F008         	call	_strncpy	;wreg free
  1800                           
  1801                           ;main.c: 194: setMsgWithDot(display, disdot);
  1802  00105E  0E8E               	movlw	low _display
  1803  001060  6E01               	movwf	setMsgWithDot@message,c
  1804  001062  0E00               	movlw	high _display
  1805  001064  6E02               	movwf	setMsgWithDot@message+1,c
  1806  001066  0E85               	movlw	low _disdot
  1807  001068  6E03               	movwf	setMsgWithDot@dotFlag,c
  1808  00106A  0E00               	movlw	high _disdot
  1809  00106C  6E04               	movwf	setMsgWithDot@dotFlag+1,c
  1810  00106E  EC15  F007         	call	_setMsgWithDot	;wreg free
  1811  001072  0012               	return	
  1812  001074                     i2l115:
  1813  001074  0012               	return		;funcret
  1814  001076                     __end_of_handleMessage:
  1815                           	opt stack 0
  1816                           pclatu	equ	0xFFB
  1817                           pclath	equ	0xFFA
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           prodh	equ	0xFF4
  1823                           prodl	equ	0xFF3
  1824                           intcon	equ	0xFF2
  1825                           postinc0	equ	0xFEE
  1826                           fsr0h	equ	0xFEA
  1827                           fsr0l	equ	0xFE9
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1h	equ	0xFE2
  1831                           fsr1l	equ	0xFE1
  1832                           postinc2	equ	0xFDE
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _strncpy *****************
  1838 ;; Defined at:
  1839 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\strncpy.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  to              2    0[COMRAM] PTR unsigned char 
  1842 ;;		 -> disdot(9), display(9), 
  1843 ;;  from            2    2[COMRAM] PTR const unsigned char 
  1844 ;;		 -> DEMO_DOTFLAG(82), DEMO_MESSAGE(82), 
  1845 ;;  size            2    4[COMRAM] unsigned int 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  cp              2    6[COMRAM] PTR unsigned char 
  1848 ;;		 -> disdot(9), display(9), 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  2    0[COMRAM] PTR unsigned char 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         6       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        8 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_handleMessage
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text4
  1872  001152                     __ptext4:
  1873                           	opt stack 0
  1874  001152                     _strncpy:
  1875                           	opt stack 28
  1876                           
  1877                           ;incstack = 0
  1878  001152  C001  F007         	movff	strncpy@to,strncpy@cp
  1879  001156  C002  F008         	movff	strncpy@to+1,strncpy@cp+1
  1880  00115A  D015               	goto	i2l724
  1881  00115C  0605               	decf	strncpy@size,f,c
  1882  00115E  A0D8               	btfss	status,0,c
  1883  001160  0606               	decf	strncpy@size+1,f,c
  1884  001162  C003  FFF6         	movff	strncpy@from,tblptrl
  1885  001166  C004  FFF7         	movff	strncpy@from+1,tblptrh
  1886  00116A  4A03               	infsnz	strncpy@from,f,c
  1887  00116C  2A04               	incf	strncpy@from+1,f,c
  1888  00116E                     	if	0	;tblptru may be non-zero
  1889  00116E                     	endif
  1890  00116E                     	if	0	;tblptru may be non-zero
  1891  00116E                     	endif
  1892  00116E  C007  FFD9         	movff	strncpy@cp,fsr2l
  1893  001172  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  1894  001176  4A07               	infsnz	strncpy@cp,f,c
  1895  001178  2A08               	incf	strncpy@cp+1,f,c
  1896  00117A  0008               	tblrd		*
  1897  00117C  CFF5 FFDF          	movff	tablat,indf2
  1898  001180  50DF               	movf	indf2,w,c
  1899  001182  B4D8               	btfsc	status,2,c
  1900  001184  D00D               	goto	i2l726
  1901  001186                     i2l724:
  1902  001186  5005               	movf	strncpy@size,w,c
  1903  001188  1006               	iorwf	strncpy@size+1,w,c
  1904  00118A  B4D8               	btfsc	status,2,c
  1905  00118C  D009               	goto	i2l726
  1906  00118E  D7E6               	goto	i2l723
  1907  001190                     i2l1058:
  1908  001190  C007  FFD9         	movff	strncpy@cp,fsr2l
  1909  001194  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  1910  001198  0E00               	movlw	0
  1911  00119A  6EDF               	movwf	indf2,c
  1912  00119C  4A07               	infsnz	strncpy@cp,f,c
  1913  00119E  2A08               	incf	strncpy@cp+1,f,c
  1914  0011A0                     i2l726:
  1915  0011A0  0605               	decf	strncpy@size,f,c
  1916  0011A2  A0D8               	btfss	status,0,c
  1917  0011A4  0606               	decf	strncpy@size+1,f,c
  1918  0011A6  2805               	incf	strncpy@size,w,c
  1919  0011A8  E1F3               	bnz	i2l1058
  1920  0011AA  2806               	incf	strncpy@size+1,w,c
  1921  0011AC  B4D8               	btfsc	status,2,c
  1922  0011AE  0012               	return	
  1923  0011B0  D7EF               	goto	i2l727
  1924  0011B2                     __end_of_strncpy:
  1925                           	opt stack 0
  1926                           pclatu	equ	0xFFB
  1927                           pclath	equ	0xFFA
  1928                           tblptru	equ	0xFF8
  1929                           tblptrh	equ	0xFF7
  1930                           tblptrl	equ	0xFF6
  1931                           tablat	equ	0xFF5
  1932                           prodh	equ	0xFF4
  1933                           prodl	equ	0xFF3
  1934                           intcon	equ	0xFF2
  1935                           postinc0	equ	0xFEE
  1936                           fsr0h	equ	0xFEA
  1937                           fsr0l	equ	0xFE9
  1938                           wreg	equ	0xFE8
  1939                           postdec1	equ	0xFE5
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _setMsgWithDot *****************
  1949 ;; Defined at:
  1950 ;;		line 71 in file "main.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  message         2    0[COMRAM] PTR unsigned char 
  1953 ;;		 -> display(9), 
  1954 ;;  dotFlag         2    2[COMRAM] PTR unsigned char 
  1955 ;;		 -> disdot(9), 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  i               2   20[COMRAM] int 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1967 ;;      Params:         4       0       0       0       0       0       0       0       0
  1968 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1969 ;;      Temps:         16       0       0       0       0       0       0       0       0
  1970 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1971 ;;Total ram usage:       22 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_handleMessage
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text5
  1981  000E2A                     __ptext5:
  1982                           	opt stack 0
  1983  000E2A                     _setMsgWithDot:
  1984                           	opt stack 28
  1985                           
  1986                           ;main.c: 72: for (int i = 0; i < 9; i++) {
  1987                           
  1988                           ;incstack = 0
  1989  000E2A  0E00               	movlw	0
  1990  000E2C  6E16               	movwf	setMsgWithDot@i+1,c
  1991  000E2E  0E00               	movlw	0
  1992  000E30  6E15               	movwf	setMsgWithDot@i,c
  1993  000E32                     i2l1038:
  1994  000E32  BE16               	btfsc	setMsgWithDot@i+1,7,c
  1995  000E34  D006               	goto	i2l79
  1996  000E36  5016               	movf	setMsgWithDot@i+1,w,c
  1997  000E38  E15E               	bnz	i2l81
  1998  000E3A  0E09               	movlw	9
  1999  000E3C  5C15               	subwf	setMsgWithDot@i,w,c
  2000  000E3E  B0D8               	btfsc	status,0,c
  2001  000E40  0012               	return	
  2002  000E42                     i2l79:
  2003                           
  2004                           ;main.c: 73: segMap[i] = ~(fontList[message[i]] | ((uint32_t)(dotFlag[i] == '.') << 16))
      +                          ;
  2005  000E42  5015               	movf	setMsgWithDot@i,w,c
  2006  000E44  2401               	addwf	setMsgWithDot@message,w,c
  2007  000E46  6ED9               	movwf	fsr2l,c
  2008  000E48  5016               	movf	setMsgWithDot@i+1,w,c
  2009  000E4A  2002               	addwfc	setMsgWithDot@message+1,w,c
  2010  000E4C  6EDA               	movwf	fsr2h,c
  2011  000E4E  50DF               	movf	indf2,w,c
  2012  000E50  6E05               	movwf	??_setMsgWithDot& (0+255),c
  2013  000E52  5005               	movf	??_setMsgWithDot,w,c
  2014  000E54  0D04               	mullw	4
  2015  000E56  0EA9               	movlw	low _fontList
  2016  000E58  24F3               	addwf	prodl,w,c
  2017  000E5A  6ED9               	movwf	fsr2l,c
  2018  000E5C  0E00               	movlw	high _fontList
  2019  000E5E  20F4               	addwfc	prodh,w,c
  2020  000E60  6EDA               	movwf	fsr2h,c
  2021  000E62  CFDE F006          	movff	postinc2,??_setMsgWithDot+1
  2022  000E66  CFDE F007          	movff	postinc2,??_setMsgWithDot+2
  2023  000E6A  CFDE F008          	movff	postinc2,??_setMsgWithDot+3
  2024  000E6E  CFDE F009          	movff	postinc2,??_setMsgWithDot+4
  2025  000E72  5015               	movf	setMsgWithDot@i,w,c
  2026  000E74  2403               	addwf	setMsgWithDot@dotFlag,w,c
  2027  000E76  6ED9               	movwf	fsr2l,c
  2028  000E78  5016               	movf	setMsgWithDot@i+1,w,c
  2029  000E7A  2004               	addwfc	setMsgWithDot@dotFlag+1,w,c
  2030  000E7C  6EDA               	movwf	fsr2h,c
  2031  000E7E  0E2E               	movlw	46
  2032  000E80  18DE               	xorwf	postinc2,w,c
  2033  000E82  A4D8               	btfss	status,2,c
  2034  000E84  D002               	goto	i2u39_40
  2035  000E86  0E01               	movlw	1
  2036  000E88  D001               	goto	i2u40_40
  2037  000E8A                     i2u39_40:
  2038  000E8A  0E00               	movlw	0
  2039  000E8C                     i2u40_40:
  2040  000E8C  6E0B               	movwf	(??_setMsgWithDot+6)& (0+255),c
  2041  000E8E  6A0C               	clrf	(??_setMsgWithDot+7)& (0+255),c
  2042  000E90  6A0D               	clrf	(??_setMsgWithDot+8)& (0+255),c
  2043  000E92  6A0E               	clrf	(??_setMsgWithDot+9)& (0+255),c
  2044  000E94  C00C  F00E         	movff	??_setMsgWithDot+7,??_setMsgWithDot+9
  2045  000E98  C00B  F00D         	movff	??_setMsgWithDot+6,??_setMsgWithDot+8
  2046  000E9C  6A0C               	clrf	??_setMsgWithDot+7,c
  2047  000E9E  6A0B               	clrf	??_setMsgWithDot+6,c
  2048  000EA0  5006               	movf	??_setMsgWithDot+1,w,c
  2049  000EA2  100B               	iorwf	??_setMsgWithDot+6,w,c
  2050  000EA4  6E0F               	movwf	(??_setMsgWithDot+10)& (0+255),c
  2051  000EA6  5007               	movf	??_setMsgWithDot+2,w,c
  2052  000EA8  100C               	iorwf	??_setMsgWithDot+7,w,c
  2053  000EAA  6E10               	movwf	(??_setMsgWithDot+11)& (0+255),c
  2054  000EAC  5008               	movf	??_setMsgWithDot+3,w,c
  2055  000EAE  100D               	iorwf	??_setMsgWithDot+8,w,c
  2056  000EB0  6E11               	movwf	(??_setMsgWithDot+12)& (0+255),c
  2057  000EB2  5009               	movf	??_setMsgWithDot+4,w,c
  2058  000EB4  100E               	iorwf	??_setMsgWithDot+9,w,c
  2059  000EB6  6E12               	movwf	(??_setMsgWithDot+13)& (0+255),c
  2060  000EB8  1E0F               	comf	??_setMsgWithDot+10,f,c
  2061  000EBA  1E10               	comf	??_setMsgWithDot+11,f,c
  2062  000EBC  1E11               	comf	??_setMsgWithDot+12,f,c
  2063  000EBE  1E12               	comf	??_setMsgWithDot+13,f,c
  2064  000EC0  0E60               	movlw	low _segMap
  2065  000EC2  6E13               	movwf	(??_setMsgWithDot+14)& (0+255),c
  2066  000EC4  0E00               	movlw	high _segMap
  2067  000EC6  6E14               	movwf	(??_setMsgWithDot+15)& (0+255),c
  2068  000EC8  90D8               	bcf	status,0,c
  2069  000ECA  3415               	rlcf	setMsgWithDot@i,w,c
  2070  000ECC  6ED9               	movwf	fsr2l,c
  2071  000ECE  3416               	rlcf	setMsgWithDot@i+1,w,c
  2072  000ED0  6EDA               	movwf	fsr2h,c
  2073  000ED2  90D8               	bcf	status,0,c
  2074  000ED4  36D9               	rlcf	fsr2l,f,c
  2075  000ED6  36DA               	rlcf	fsr2h,f,c
  2076  000ED8  5013               	movf	??_setMsgWithDot+14,w,c
  2077  000EDA  26D9               	addwf	fsr2l,f,c
  2078  000EDC  5014               	movf	??_setMsgWithDot+15,w,c
  2079  000EDE  22DA               	addwfc	fsr2h,f,c
  2080  000EE0  C00F  FFDE         	movff	??_setMsgWithDot+10,postinc2
  2081  000EE4  C010  FFDE         	movff	??_setMsgWithDot+11,postinc2
  2082  000EE8  C011  FFDE         	movff	??_setMsgWithDot+12,postinc2
  2083  000EEC  C012  FFDE         	movff	??_setMsgWithDot+13,postinc2
  2084  000EF0  4A15               	infsnz	setMsgWithDot@i,f,c
  2085  000EF2  2A16               	incf	setMsgWithDot@i+1,f,c
  2086  000EF4  D79E               	goto	i2l1038
  2087  000EF6                     i2l81:
  2088  000EF6  0012               	return		;funcret
  2089  000EF8                     __end_of_setMsgWithDot:
  2090                           	opt stack 0
  2091                           pclatu	equ	0xFFB
  2092                           pclath	equ	0xFFA
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           intcon	equ	0xFF2
  2100                           postinc0	equ	0xFEE
  2101                           fsr0h	equ	0xFEA
  2102                           fsr0l	equ	0xFE9
  2103                           wreg	equ	0xFE8
  2104                           postdec1	equ	0xFE5
  2105                           fsr1h	equ	0xFE2
  2106                           fsr1l	equ	0xFE1
  2107                           indf2	equ	0xFDF
  2108                           postinc2	equ	0xFDE
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function ___awmod *****************
  2114 ;; Defined at:
  2115 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\awmod.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  dividend        2    0[COMRAM] int 
  2118 ;;  divisor         2    2[COMRAM] int 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  sign            1    5[COMRAM] unsigned char 
  2121 ;;  counter         1    4[COMRAM] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  2    0[COMRAM] int 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2131 ;;      Params:         4       0       0       0       0       0       0       0       0
  2132 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2134 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2135 ;;Total ram usage:        6 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_isr
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text6
  2145  001076                     __ptext6:
  2146                           	opt stack 0
  2147  001076                     ___awmod:
  2148                           	opt stack 29
  2149                           
  2150                           ;incstack = 0
  2151  001076  0E00               	movlw	0
  2152  001078  6E06               	movwf	___awmod@sign,c
  2153  00107A  AE02               	btfss	___awmod@dividend+1,7,c
  2154  00107C  D006               	goto	i2l355
  2155  00107E  6C01               	negf	___awmod@dividend,c
  2156  001080  1E02               	comf	___awmod@dividend+1,f,c
  2157  001082  B0D8               	btfsc	status,0,c
  2158  001084  2A02               	incf	___awmod@dividend+1,f,c
  2159  001086  0E01               	movlw	1
  2160  001088  6E06               	movwf	___awmod@sign,c
  2161  00108A                     i2l355:
  2162  00108A  AE04               	btfss	___awmod@divisor+1,7,c
  2163  00108C  D004               	goto	i2l356
  2164  00108E  6C03               	negf	___awmod@divisor,c
  2165  001090  1E04               	comf	___awmod@divisor+1,f,c
  2166  001092  B0D8               	btfsc	status,0,c
  2167  001094  2A04               	incf	___awmod@divisor+1,f,c
  2168  001096                     i2l356:
  2169  001096  5003               	movf	___awmod@divisor,w,c
  2170  001098  1004               	iorwf	___awmod@divisor+1,w,c
  2171  00109A  B4D8               	btfsc	status,2,c
  2172  00109C  D018               	goto	i2l363
  2173  00109E  0E01               	movlw	1
  2174  0010A0  6E05               	movwf	___awmod@counter,c
  2175  0010A2  D004               	goto	i2l358
  2176  0010A4  90D8               	bcf	status,0,c
  2177  0010A6  3603               	rlcf	___awmod@divisor,f,c
  2178  0010A8  3604               	rlcf	___awmod@divisor+1,f,c
  2179  0010AA  2A05               	incf	___awmod@counter,f,c
  2180  0010AC                     i2l358:
  2181  0010AC  AE04               	btfss	___awmod@divisor+1,7,c
  2182  0010AE  D7FA               	goto	i2l359
  2183  0010B0                     i2u56_40:
  2184  0010B0  5003               	movf	___awmod@divisor,w,c
  2185  0010B2  5C01               	subwf	___awmod@dividend,w,c
  2186  0010B4  5004               	movf	___awmod@divisor+1,w,c
  2187  0010B6  5802               	subwfb	___awmod@dividend+1,w,c
  2188  0010B8  A0D8               	btfss	status,0,c
  2189  0010BA  D004               	goto	i2l362
  2190  0010BC  5003               	movf	___awmod@divisor,w,c
  2191  0010BE  5E01               	subwf	___awmod@dividend,f,c
  2192  0010C0  5004               	movf	___awmod@divisor+1,w,c
  2193  0010C2  5A02               	subwfb	___awmod@dividend+1,f,c
  2194  0010C4                     i2l362:
  2195  0010C4  90D8               	bcf	status,0,c
  2196  0010C6  3204               	rrcf	___awmod@divisor+1,f,c
  2197  0010C8  3203               	rrcf	___awmod@divisor,f,c
  2198  0010CA  2E05               	decfsz	___awmod@counter,f,c
  2199  0010CC  D7F1               	goto	i2u56_40
  2200  0010CE                     i2l363:
  2201  0010CE  5006               	movf	___awmod@sign,w,c
  2202  0010D0  B4D8               	btfsc	status,2,c
  2203  0010D2  D004               	goto	i2l364
  2204  0010D4  6C01               	negf	___awmod@dividend,c
  2205  0010D6  1E02               	comf	___awmod@dividend+1,f,c
  2206  0010D8  B0D8               	btfsc	status,0,c
  2207  0010DA  2A02               	incf	___awmod@dividend+1,f,c
  2208  0010DC                     i2l364:
  2209  0010DC  C001  F001         	movff	___awmod@dividend,?___awmod
  2210  0010E0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2211  0010E4  0012               	return	
  2212  0010E6                     __end_of___awmod:
  2213                           	opt stack 0
  2214                           pclatu	equ	0xFFB
  2215                           pclath	equ	0xFFA
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           intcon	equ	0xFF2
  2223                           postinc0	equ	0xFEE
  2224                           fsr0h	equ	0xFEA
  2225                           fsr0l	equ	0xFE9
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           pclatu	equ	0xFFB
  2236                           pclath	equ	0xFFA
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           fsr0h	equ	0xFEA
  2246                           fsr0l	equ	0xFE9
  2247                           wreg	equ	0xFE8
  2248                           postdec1	equ	0xFE5
  2249                           fsr1h	equ	0xFE2
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257                           	psect	rparam
  2258  0000                     pclatu	equ	0xFFB
  2259                           pclath	equ	0xFFA
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           prodh	equ	0xFF4
  2265                           prodl	equ	0xFF3
  2266                           intcon	equ	0xFF2
  2267                           postinc0	equ	0xFEE
  2268                           fsr0h	equ	0xFEA
  2269                           fsr0l	equ	0xFE9
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           postinc2	equ	0xFDE
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280                           	psect	temp
  2281  000057                     btemp:
  2282                           	opt stack 0
  2283  000057                     	ds	1
  2284  0000                     int$flags	set	btemp
  2285  0000                     wtemp6	set	btemp+1
  2286                           pclatu	equ	0xFFB
  2287                           pclath	equ	0xFFA
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           fsr0h	equ	0xFEA
  2297                           fsr0l	equ	0xFE9
  2298                           wreg	equ	0xFE8
  2299                           postdec1	equ	0xFE5
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    166
    Data        552
    BSS         24
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      86
    BANK0           160     18      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 82
		 -> DEMO_DOTFLAG(CODE[82]), DEMO_MESSAGE(CODE[82]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    setMsgWithDot@dotFlag	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), 

    setMsgWithDot@message	PTR unsigned char  size(2) Largest target is 9
		 -> display(BANK0[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_refreshShiftRegister
    _handleMessage->_setMsgWithDot

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0     203
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 18    18      0    1653
                                             62 COMRAM    18    18      0
                            ___awmod
                      _handleMessage
               _refreshShiftRegister
 ---------------------------------------------------------------------------------
 (2) _refreshShiftRegister                                62    60      2     300
                                              0 COMRAM    62    60      2
 ---------------------------------------------------------------------------------
 (2) _handleMessage                                        6     6      0     905
                                             22 COMRAM     6     6      0
                      _setMsgWithDot
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     597
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _setMsgWithDot                                       22    18      4     308
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___awmod
   _handleMessage
     _setMsgWithDot
     _strncpy
   _refreshShiftRegister

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     204      21       25.2%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      49       5       45.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      56       1       91.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      20        0.0%
DATA                 0      0     2A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 03 18:29:33 2018

           __end_of_DEMO_DOTFLAG 0855                      _SSPSTATbits 000FC7  
                             l91 0D50                               l93 0E1C  
                             l95 0D84                               l97 0D98  
                             l99 0DA0             __end_of_DEMO_MESSAGE 08A7  
                            _PR2 000FCB                              _isr 0008  
                   ___awmod@sign 0006                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                     __CFG_WDT$OFF 000000  
                           ?_isr 0001                      main@dotflag 00A3  
                           _BRGH 007D62                             i2l81 0EF6  
                           i2l84 0A8E                             i2l85 0AE8  
                           i2l79 0E42                             _TMR2 000FCC  
                           _main 0CFE                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 0057                             prodh 000FF4  
                           prodl 000FF3                             start 000E  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
  __size_of_refreshShiftRegister 0252                            ??_isr 003F  
                          ?_main 0001                  __end_of___awmod 10E6  
                          _CMCON 000FB4                            _T2CON 000FCA  
                          i2l120 0F78                            i2l114 101E  
                          i2l115 1074                            i2l362 10C4  
                          i2l363 10CE                            i2l355 108A  
                          i2l364 10DC                            i2l356 1096  
                          i2l358 10AC                            i2l359 10A4  
                          i2l723 115C                            i2l724 1186  
                          i2l726 11A0                            i2l727 1190  
                          _RCREG 000FAE                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _SSPIE 007CEB  
                          _TRISE 000F96                            _SSPIF 007CF3  
                          pclath 000FFA                            tablat 000FF5  
                          status 000FD8                            wtemp6 0058  
                __end_of_strncpy 11B2            __end_of_setMsgWithDot 0EF8  
                __initialization 10E6                     __end_of_main 0E2A  
                         ??_main 0097                    __activetblptr 000001  
                         _ADCON1 000FC1          refreshShiftRegister@map 0037  
        refreshShiftRegister@ptr 0001                           i2l1038 0E32  
                         i2l1058 1190                           i2l1096 101E  
                         _SPBRGH 000FB0                           _SSPADD 000FC8  
                         _SSPBUF 000FC9                        ??___awmod 0005  
                         _disdot 0085                           _segMap 0060  
                         clear_0 1130                  ___awmod@divisor 0003  
                         _tmrIsr 0084                  ___awmod@counter 0005  
                 _MESSAGE_LENGTH 0801                     __pdataBIGRAM 00A9  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ??_strncpy 0007                     _DEMO_DOTFLAG 0803  
                   _DEMO_MESSAGE 0855                       __accesstop 0060  
        __end_of__initialization 1140                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001                     __pidataBANK0 11B2  
         __end_of_MESSAGE_LENGTH 0803            __end_of_handleMessage 1076  
          refreshShiftRegister@i 003D                       __pbssBANK0 0084  
                     __pnvCOMRAM 0056                          _BAUDCON 000FB8  
   __end_of_refreshShiftRegister 0AFA                          i2u40_40 0E8C  
                        i2u50_40 0AE8                          i2u45_44 08BE  
                        i2u45_45 08B8                          i2u46_45 092A  
                        i2u39_40 0E8A                          i2u47_45 0954  
                        i2u56_40 10B0                          i2u49_40 0AAE  
                        i2u49_45 0AA4                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5                          _SSPSTAT 000FC7  
                        __Hparam 0000                          __Lparam 0000  
                        ___awmod 1076                     __psmallconst 0800  
                        __pcinit 10E6                          __ramtop 0800  
                        __ptext0 0CFE                          __ptext2 08A8  
                        __ptext3 0FC4                          __ptext4 1152  
                        __ptext5 0E2A                          __ptext6 1076  
                        _display 008E                          _divisor 0053  
                   __size_of_isr 0FBC                 ___awmod@dividend 0001  
              main@digitSelector 00A7                   __pintcode_body 0EF8  
                        _strncpy 1152             end_of_initialization 1140  
                        int_func 0EF8                          postdec1 000FE5  
                        postinc0 000FEE                          postinc2 000FDE  
         __size_of_setMsgWithDot 00CE                       main@RxData 00A8  
           _refreshShiftRegister 08A8                    __pidataBIGRAM 0AFA  
            start_initialization 10E6                      __end_of_isr 0FC4  
                  _setMsgWithDot 0E2A            ?_refreshShiftRegister 0001  
                    __pdataBANK0 0060                      __pbssCOMRAM 0051  
                  __pcstackBANK0 0097  refreshShiftRegister@ledSelector 003B  
                 ?_setMsgWithDot 0001           __size_of_handleMessage 00B2  
                      __pintcode 0008                         ?___awmod 0001  
                    __smallconst 0800                         ?_strncpy 0001  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                       _LATCbits 000F8B                      strncpy@from 0003  
                       _PIE1bits 000F9D                      strncpy@size 0005  
         ??_refreshShiftRegister 0003                         _PIR1bits 000F9E  
           setMsgWithDot@dotFlag 0003             setMsgWithDot@message 0001  
                  _handleMessage 0FC4                        copy_data0 10FA  
                      copy_data1 111E                  ??_setMsgWithDot 0005  
                       __Hrparam 0000                         __Lrparam 0000  
                   __Lsmallconst 0800                 __size_of___awmod 0070  
                 ?_handleMessage 0001                         _digitPtr 0055  
                       _led_stat 0056                 __size_of_strncpy 0060  
                       _fontList 00A9                    __size_of_main 012C  
                       int$flags 0057                         _writeItr 0051  
                     _INTCONbits 000FF2                         intlevel2 0000  
                 setMsgWithDot@i 0015                        strncpy@cp 0007  
                      strncpy@to 0001                  ??_handleMessage 0017  
                    _SSPCON2bits 000FC5  
