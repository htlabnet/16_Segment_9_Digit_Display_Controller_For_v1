

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 28 22:08:57 2017

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4553 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  00048A                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _segMap
    63  00048A  FF00               	dw	65280
    64  00048C  0000               	dw	0
    65  00048E  FF00               	dw	65280
    66  000490  0000               	dw	0
    67  000492  FF00               	dw	65280
    68  000494  0000               	dw	0
    69  000496  FF00               	dw	65280
    70  000498  0000               	dw	0
    71  00049A  FF00               	dw	65280
    72  00049C  0000               	dw	0
    73  00049E  FF00               	dw	65280
    74  0004A0  0000               	dw	0
    75  0004A2  FF00               	dw	65280
    76  0004A4  0000               	dw	0
    77  0004A6  FF00               	dw	65280
    78  0004A8  0000               	dw	0
    79  0004AA  FF00               	dw	65280
    80  0004AC  0000               	dw	0
    81                           
    82                           	psect	idataBIGRAM
    83  000264                     __pidataBIGRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _fontList
    87  000264  0000               	dw	0
    88  000266  0000               	dw	0
    89  000268  0000               	dw	0
    90  00026A  0000               	dw	0
    91  00026C  0000               	dw	0
    92  00026E  0000               	dw	0
    93  000270  0000               	dw	0
    94  000272  0000               	dw	0
    95  000274  0000               	dw	0
    96  000276  0000               	dw	0
    97  000278  0000               	dw	0
    98  00027A  0000               	dw	0
    99  00027C  0000               	dw	0
   100  00027E  0000               	dw	0
   101  000280  0000               	dw	0
   102  000282  0000               	dw	0
   103  000284  0000               	dw	0
   104  000286  0000               	dw	0
   105  000288  0000               	dw	0
   106  00028A  0000               	dw	0
   107  00028C  0000               	dw	0
   108  00028E  0000               	dw	0
   109  000290  0000               	dw	0
   110  000292  0000               	dw	0
   111  000294  0000               	dw	0
   112  000296  0000               	dw	0
   113  000298  0000               	dw	0
   114  00029A  0000               	dw	0
   115  00029C  0000               	dw	0
   116  00029E  0000               	dw	0
   117  0002A0  0000               	dw	0
   118  0002A2  0000               	dw	0
   119  0002A4  0000               	dw	0
   120  0002A6  1812               	dw	6162
   121  0002A8  0880               	dw	2176
   122  0002AA  0000               	dw	0
   123  0002AC  CC33               	dw	52275
   124  0002AE  7BA9               	dw	31657
   125  0002B0  B43B               	dw	46139
   126  0002B2  0080               	dw	128
   127  0002B4  9000               	dw	36864
   128  0002B6  2400               	dw	9216
   129  0002B8  FF00               	dw	65280
   130  0002BA  4B00               	dw	19200
   131  0002BC  0000               	dw	0
   132  0002BE  0300               	dw	768
   133  0002C0  0000               	dw	0
   134  0002C2  3000               	dw	12288
   135  0002C4  00FF               	dw	255
   136  0002C6  4800               	dw	18432
   137  0002C8  0377               	dw	887
   138  0002CA  033F               	dw	831
   139  0002CC  038C               	dw	908
   140  0002CE  03BB               	dw	955
   141  0002D0  03FB               	dw	1019
   142  0002D2  008F               	dw	143
   143  0002D4  03FF               	dw	1023
   144  0002D6  03BF               	dw	959
   145  0002D8  0000               	dw	0
   146  0002DA  0000               	dw	0
   147  0002DC  9000               	dw	36864
   148  0002DE  0330               	dw	816
   149  0002E0  2400               	dw	9216
   150  0002E2  1013               	dw	4115
   151  0002E4  0000               	dw	0
   152  0002E6  03CF               	dw	975
   153  0002E8  91F3               	dw	37363
   154  0002EA  00F3               	dw	243
   155  0002EC  037C               	dw	892
   156  0002EE  03F3               	dw	1011
   157  0002F0  03C3               	dw	963
   158  0002F2  02FB               	dw	763
   159  0002F4  03CC               	dw	972
   160  0002F6  4833               	dw	18483
   161  0002F8  4813               	dw	18451
   162  0002FA  91C0               	dw	37312
   163  0002FC  00F0               	dw	240
   164  0002FE  14CC               	dw	5324
   165  000300  84CC               	dw	33996
   166  000302  00FF               	dw	255
   167  000304  03C7               	dw	967
   168  000306  80FF               	dw	33023
   169  000308  83C7               	dw	33735
   170  00030A  03BB               	dw	955
   171  00030C  4803               	dw	18435
   172  00030E  00FC               	dw	252
   173  000310  30C0               	dw	12480
   174  000312  A0CC               	dw	41164
   175  000314  B400               	dw	46080
   176  000316  5400               	dw	21504
   177  000318  3033               	dw	12339
   178  00031A  00D1               	dw	209
   179  00031C  8400               	dw	33792
   180  00031E  002E               	dw	46
   181  000320  0003               	dw	3
   182  000322  0030               	dw	48
   183  000324  AB00               	dw	43776
   184  000326  34C0               	dw	13504
   185  000328  0B7B               	dw	2939
   186  00032A  5703               	dw	22275
   187  00032C  0000               	dw	0
   188  00032E  0000               	dw	0
   189  000330  0000               	dw	0
   190  000332  FFFF               	dw	65535
   191  000334  0001               	dw	1
   192  000336  0002               	dw	2
   193  000338  0004               	dw	4
   194  00033A  0008               	dw	8
   195  00033C  0020               	dw	32
   196  00033E  0010               	dw	16
   197  000340  0040               	dw	64
   198  000342  0080               	dw	128
   199  000344  0800               	dw	2048
   200  000346  1000               	dw	4096
   201  000348  0200               	dw	512
   202  00034A  8000               	dw	32768
   203  00034C  4000               	dw	16384
   204  00034E  2000               	dw	8192
   205  000350  0100               	dw	256
   206  000352  0400               	dw	1024
   207  000354  0800               	dw	2048
   208  000356  1800               	dw	6144
   209  000358  1A00               	dw	6656
   210  00035A  9A00               	dw	39424
   211  00035C  DA00               	dw	55808
   212  00035E  FA00               	dw	64000
   213  000360  FB00               	dw	64256
   214  000362  FF00               	dw	65280
   215  000364  0000               	dw	0
   216  000366  0000               	dw	0
   217  0000                     _SSPBUF	set	4041
   218  0000                     _SSPCON2bits	set	4037
   219  0000                     _SSPCON1	set	4038
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPSTAT	set	4039
   222  0000                     _SSPSTATbits	set	4039
   223  0000                     _SSPCON2	set	4037
   224  0000                     _RCREG	set	4014
   225  0000                     _PIR1bits	set	3998
   226  0000                     _SPBRG	set	4015
   227  0000                     _SPBRGH	set	4016
   228  0000                     _BAUDCON	set	4024
   229  0000                     _RCSTA	set	4011
   230  0000                     _INTCONbits	set	4082
   231  0000                     _PIE1bits	set	3997
   232  0000                     _PR2	set	4043
   233  0000                     _TMR2	set	4044
   234  0000                     _T2CON	set	4042
   235  0000                     _TRISE	set	3990
   236  0000                     _TRISD	set	3989
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISB	set	3987
   239  0000                     _TRISA	set	3986
   240  0000                     _CMCON	set	4020
   241  0000                     _ADCON1	set	4033
   242  0000                     _PORTE	set	3972
   243  0000                     _PORTA	set	3968
   244  0000                     _PORTB	set	3969
   245  0000                     _PORTD	set	3971
   246  0000                     _PORTC	set	3970
   247  0000                     _SSPIE	set	31979
   248  0000                     _SSPIF	set	31987
   249  0000                     _BRGH	set	32098
   250                           
   251                           ; #config settings
   252  0000                     
   253                           	psect	cinit
   254  0003D8                     __pcinit:
   255                           	opt stack 0
   256  0003D8                     start_initialization:
   257                           	opt stack 0
   258  0003D8                     __initialization:
   259                           	opt stack 0
   260                           
   261                           ; Initialize objects allocated to BIGRAM (260 bytes)
   262                           ; load TBLPTR registers with __pidataBIGRAM
   263  0003D8  0E64               	movlw	low __pidataBIGRAM
   264  0003DA  6EF6               	movwf	tblptrl,c
   265  0003DC  0E02               	movlw	high __pidataBIGRAM
   266  0003DE  6EF7               	movwf	tblptrh,c
   267  0003E0  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   268  0003E2  6EF8               	movwf	tblptru,c
   269  0003E4  EE00  F073         	lfsr	0,__pdataBIGRAM
   270  0003E8  EE11 F004          	lfsr	1,260
   271  0003EC                     copy_data0:
   272  0003EC  0009               	tblrd		*+
   273  0003EE  CFF5 FFEE          	movff	tablat,postinc0
   274  0003F2  50E5               	movf	postdec1,w,c
   275  0003F4  50E1               	movf	fsr1l,w,c
   276  0003F6  E1FA               	bnz	copy_data0
   277  0003F8  50E2               	movf	fsr1h,w,c
   278  0003FA  E1F8               	bnz	copy_data0
   279                           
   280                           ; Initialize objects allocated to COMRAM (36 bytes)
   281                           ; load TBLPTR registers with __pidataCOMRAM
   282  0003FC  0E8A               	movlw	low __pidataCOMRAM
   283  0003FE  6EF6               	movwf	tblptrl,c
   284  000400  0E04               	movlw	high __pidataCOMRAM
   285  000402  6EF7               	movwf	tblptrh,c
   286  000404  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   287  000406  6EF8               	movwf	tblptru,c
   288  000408  EE00  F001         	lfsr	0,__pdataCOMRAM
   289  00040C  EE10 F024          	lfsr	1,36
   290  000410                     copy_data1:
   291  000410  0009               	tblrd		*+
   292  000412  CFF5 FFEE          	movff	tablat,postinc0
   293  000416  50E5               	movf	postdec1,w,c
   294  000418  50E1               	movf	fsr1l,w,c
   295  00041A  E1FA               	bnz	copy_data1
   296                           
   297                           ; Clear objects allocated to COMRAM (2 bytes)
   298  00041C  6A43               	clrf	(__pbssCOMRAM+1)& (0+255),c
   299  00041E  6A42               	clrf	__pbssCOMRAM& (0+255),c
   300  000420                     end_of_initialization:
   301                           	opt stack 0
   302  000420                     __end_of__initialization:
   303                           	opt stack 0
   304  000420  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   305  000422  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   306  000424  0100               	movlb	0
   307  000426  EFA1  F000         	goto	_main	;jump to C main() function
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           postdec1	equ	0xFE5
   314                           fsr1h	equ	0xFE2
   315                           fsr1l	equ	0xFE1
   316                           
   317                           	psect	bssCOMRAM
   318  000042                     __pbssCOMRAM:
   319                           	opt stack 0
   320  000042                     _digitPtr:
   321                           	opt stack 0
   322  000042                     	ds	2
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           postdec1	equ	0xFE5
   329                           fsr1h	equ	0xFE2
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	dataCOMRAM
   333  000001                     __pdataCOMRAM:
   334                           	opt stack 0
   335  000001                     _segMap:
   336                           	opt stack 0
   337  000001                     	ds	36
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           postdec1	equ	0xFE5
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	dataBIGRAM
   348  000073                     __pdataBIGRAM:
   349                           	opt stack 0
   350  000073                     _fontList:
   351                           	opt stack 0
   352  000073                     	ds	260
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           postdec1	equ	0xFE5
   359                           fsr1h	equ	0xFE2
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     ??_main:
   366                           
   367                           ; 1 bytes @ 0x0
   368  000060                     	ds	12
   369  00006C                     main@dotflag:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0xC
   373  00006C                     	ds	4
   374  000070                     main@digitSelector:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x10
   378  000070                     	ds	2
   379  000072                     main@RxData:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x12
   383  000072                     	ds	1
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           postdec1	equ	0xFE5
   390                           fsr1h	equ	0xFE2
   391                           fsr1l	equ	0xFE1
   392                           
   393                           	psect	cstackCOMRAM
   394  000025                     __pcstackCOMRAM:
   395                           	opt stack 0
   396  000025                     ?___awmod:
   397                           	opt stack 0
   398  000025                     setDigitPin@input:
   399                           	opt stack 0
   400  000025                     ___awmod@dividend:
   401                           	opt stack 0
   402  000025                     setSegPin@input:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x0
   406  000025                     	ds	2
   407  000027                     ??_setDigitPin:
   408  000027                     ___awmod@divisor:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x2
   412  000027                     	ds	2
   413  000029                     ??_setSegPin:
   414  000029                     ___awmod@counter:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x4
   418  000029                     	ds	1
   419  00002A                     ___awmod@sign:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x5
   423  00002A                     	ds	3
   424  00002D                     ??_isr:
   425                           
   426                           ; 1 bytes @ 0x8
   427  00002D                     	ds	21
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           postdec1	equ	0xFE5
   434                           fsr1h	equ	0xFE2
   435                           fsr1l	equ	0xFE1
   436                           
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 70 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  dotflag         4   12[BANK0 ] unsigned long 
   447 ;;  digitSelecto    2   16[BANK0 ] short 
   448 ;;  RxData          1   18[BANK0 ] unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   458 ;;      Params:         0       0       0       0       0       0       0       0       0
   459 ;;      Locals:         0       7       0       0       0       0       0       0       0
   460 ;;      Temps:          0      12       0       0       0       0       0       0       0
   461 ;;      Totals:         0      19       0       0       0       0       0       0       0
   462 ;;Total ram usage:       19 bytes
   463 ;; Hardware stack levels required when called:    2
   464 ;; This function calls:
   465 ;;		Nothing
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text0
   472  000142                     __ptext0:
   473                           	opt stack 0
   474  000142                     _main:
   475                           	opt stack 29
   476                           
   477                           ;main.c: 72: ADCON1 = 0b00001111;
   478                           
   479                           ;incstack = 0
   480  000142  0E0F               	movlw	15
   481  000144  6EC1               	movwf	4033,c	;volatile
   482                           
   483                           ;main.c: 73: CMCON = 0b00000111;
   484  000146  0E07               	movlw	7
   485  000148  6EB4               	movwf	4020,c	;volatile
   486                           
   487                           ;main.c: 74: TRISA = 0b00000000;
   488  00014A  0E00               	movlw	0
   489  00014C  6E92               	movwf	3986,c	;volatile
   490                           
   491                           ;main.c: 75: TRISB = 0b00000000;
   492  00014E  0E00               	movlw	0
   493  000150  6E93               	movwf	3987,c	;volatile
   494                           
   495                           ;main.c: 76: TRISC = 0b10000000;
   496  000152  0E80               	movlw	128
   497  000154  6E94               	movwf	3988,c	;volatile
   498                           
   499                           ;main.c: 77: TRISD = 0b00000000;
   500  000156  0E00               	movlw	0
   501  000158  6E95               	movwf	3989,c	;volatile
   502                           
   503                           ;main.c: 78: TRISE = 0b00000000;
   504  00015A  0E00               	movlw	0
   505  00015C  6E96               	movwf	3990,c	;volatile
   506                           
   507                           ;main.c: 82: T2CON = 0;
   508  00015E  0E00               	movlw	0
   509  000160  6ECA               	movwf	4042,c	;volatile
   510                           
   511                           ;main.c: 83: TMR2 = 0;
   512  000162  0E00               	movlw	0
   513  000164  6ECC               	movwf	4044,c	;volatile
   514                           
   515                           ;main.c: 84: PR2 = 125;
   516  000166  0E7D               	movlw	125
   517  000168  6ECB               	movwf	4043,c	;volatile
   518                           
   519                           ;main.c: 85: T2CON = 0b01111101;
   520  00016A  0E7D               	movlw	125
   521  00016C  6ECA               	movwf	4042,c	;volatile
   522                           
   523                           ;main.c: 88: PIE1bits.TMR2IE = 1;
   524  00016E  829D               	bsf	3997,1,c	;volatile
   525                           
   526                           ;main.c: 89: INTCONbits.PEIE = 1;
   527  000170  8CF2               	bsf	intcon,6,c	;volatile
   528                           
   529                           ;main.c: 90: INTCONbits.GIE = 1;
   530  000172  8EF2               	bsf	intcon,7,c	;volatile
   531                           
   532                           ;main.c: 93: RCSTA = 0b10010000;
   533  000174  0E90               	movlw	144
   534  000176  6EAB               	movwf	4011,c	;volatile
   535                           
   536                           ;main.c: 94: BAUDCON = 0b00001000;
   537  000178  0E08               	movlw	8
   538  00017A  6EB8               	movwf	4024,c	;volatile
   539                           
   540                           ;main.c: 95: SPBRGH = 0;
   541  00017C  0E00               	movlw	0
   542  00017E  6EB0               	movwf	4016,c	;volatile
   543                           
   544                           ;main.c: 96: BRGH = 0;
   545  000180  94AC               	bcf	4012,2,c	;volatile
   546                           
   547                           ;main.c: 97: SPBRG = 129;
   548  000182  0E81               	movlw	129
   549  000184  6EAF               	movwf	4015,c	;volatile
   550  000186                     l75:
   551  000186  AA9E               	btfss	3998,5,c	;volatile
   552  000188  D7FE               	goto	l74
   553                           
   554                           ;main.c: 108: PIR1bits.RCIF = 0;
   555  00018A  9A9E               	bcf	3998,5,c	;volatile
   556                           
   557                           ;main.c: 109: RxData = RCREG;
   558  00018C  CFAE F072          	movff	4014,main@RxData	;volatile
   559                           
   560                           ;main.c: 112: if ((RxData & 0b11100000) == 0b11100000){
   561  000190  0100               	movlb	0	; () banked
   562  000192  5172               	movf	main@RxData& (0+255),w,b
   563  000194  0BE0               	andlw	224
   564  000196  0AE0               	xorlw	224
   565  000198  A4D8               	btfss	status,2,c
   566  00019A  D7F5               	goto	l74
   567                           
   568                           ; BSR set to: 0
   569                           ;main.c: 113: digitSelector = (RxData & 0b00001111);
   570  00019C  C072  F060         	movff	main@RxData,??_main
   571  0001A0  0E0F               	movlw	15
   572  0001A2  1760               	andwf	??_main& (0+255),f,b
   573  0001A4  5160               	movf	??_main& (0+255),w,b
   574  0001A6  6F70               	movwf	main@digitSelector& (0+255),b
   575  0001A8  6B71               	clrf	(main@digitSelector+1)& (0+255),b
   576                           
   577                           ;main.c: 114: dotflag = (RxData & 0b00010000) >> 4;
   578  0001AA  C072  F060         	movff	main@RxData,??_main
   579  0001AE  3B60               	swapf	??_main& (0+255),f,b
   580  0001B0  0E0F               	movlw	15
   581  0001B2  1760               	andwf	??_main& (0+255),f,b
   582  0001B4  0E01               	movlw	1
   583  0001B6  1760               	andwf	??_main& (0+255),f,b
   584  0001B8  5160               	movf	??_main& (0+255),w,b
   585  0001BA  6F6C               	movwf	main@dotflag& (0+255),b
   586  0001BC  6B6D               	clrf	(main@dotflag+1)& (0+255),b
   587  0001BE  6B6E               	clrf	(main@dotflag+2)& (0+255),b
   588  0001C0  6B6F               	clrf	(main@dotflag+3)& (0+255),b
   589  0001C2                     
   590                           ; BSR set to: 0
   591  0001C2  AA9E               	btfss	3998,5,c	;volatile
   592  0001C4  D7FE               	goto	l80
   593                           
   594                           ;main.c: 116: PIR1bits.RCIF = 0;
   595  0001C6  9A9E               	bcf	3998,5,c	;volatile
   596                           
   597                           ;main.c: 117: RxData = RCREG;
   598  0001C8  CFAE F072          	movff	4014,main@RxData	;volatile
   599                           
   600                           ;main.c: 118: if(digitSelector > 8)continue;
   601  0001CC  0100               	movlb	0	; () banked
   602  0001CE  BF71               	btfsc	(main@digitSelector+1)& (0+255),7,b
   603  0001D0  D006               	goto	l82
   604  0001D2  5171               	movf	(main@digitSelector+1)& (0+255),w,b
   605  0001D4  E1D8               	bnz	l75
   606  0001D6  0E09               	movlw	9
   607  0001D8  5D70               	subwf	main@digitSelector& (0+255),w,b
   608  0001DA  B0D8               	btfsc	status,0,c
   609  0001DC  D7D4               	goto	l74
   610  0001DE                     l82:
   611                           
   612                           ; BSR set to: 0
   613                           ;main.c: 119: if(RxData > 0b01111111) RxData = ~RxData;
   614                           
   615                           ; BSR set to: 0
   616  0001DE  0E7F               	movlw	127
   617  0001E0  6572               	cpfsgt	main@RxData& (0+255),b
   618  0001E2  D001               	goto	l84
   619                           
   620                           ; BSR set to: 0
   621  0001E4  1F72               	comf	main@RxData& (0+255),f,b
   622  0001E6                     l84:
   623                           
   624                           ; BSR set to: 0
   625                           ;main.c: 120: segMap[digitSelector] = fontList[RxData] | (dotflag << 16);
   626                           
   627                           ; BSR set to: 0
   628  0001E6  C06C  F060         	movff	main@dotflag,??_main
   629  0001EA  C06D  F061         	movff	main@dotflag+1,??_main+1
   630  0001EE  C06E  F062         	movff	main@dotflag+2,??_main+2
   631  0001F2  C06F  F063         	movff	main@dotflag+3,??_main+3
   632  0001F6  C061  F063         	movff	??_main+1,??_main+3
   633  0001FA  C060  F062         	movff	??_main,??_main+2
   634  0001FE  6B61               	clrf	(??_main+1)& (0+255),b
   635  000200  6B60               	clrf	??_main& (0+255),b
   636  000202  5172               	movf	main@RxData& (0+255),w,b
   637  000204  0D02               	mullw	2
   638  000206  0E73               	movlw	low _fontList
   639  000208  24F3               	addwf	prodl,w,c
   640  00020A  6ED9               	movwf	fsr2l,c
   641  00020C  0E00               	movlw	high _fontList
   642  00020E  20F4               	addwfc	prodh,w,c
   643  000210  6EDA               	movwf	fsr2h,c
   644  000212  CFDE F064          	movff	postinc2,??_main+4
   645  000216  CFDD F065          	movff	postdec2,??_main+5
   646  00021A  5164               	movf	(??_main+4)& (0+255),w,b
   647  00021C  1160               	iorwf	??_main& (0+255),w,b
   648  00021E  6F66               	movwf	(??_main+6)& (0+255),b
   649  000220  5165               	movf	(??_main+5)& (0+255),w,b
   650  000222  1161               	iorwf	(??_main+1)& (0+255),w,b
   651  000224  6F67               	movwf	(??_main+7)& (0+255),b
   652  000226  0E00               	movlw	0
   653  000228  1162               	iorwf	(??_main+2)& (0+255),w,b
   654  00022A  6F68               	movwf	(??_main+8)& (0+255),b
   655  00022C  0E00               	movlw	0
   656  00022E  1163               	iorwf	(??_main+3)& (0+255),w,b
   657  000230  6F69               	movwf	(??_main+9)& (0+255),b
   658  000232  0E01               	movlw	low _segMap
   659  000234  6F6A               	movwf	(??_main+10)& (0+255),b
   660  000236  0E00               	movlw	high _segMap
   661  000238  6F6B               	movwf	(??_main+11)& (0+255),b
   662  00023A  90D8               	bcf	status,0,c
   663  00023C  3570               	rlcf	main@digitSelector& (0+255),w,b
   664  00023E  6ED9               	movwf	fsr2l,c
   665  000240  3571               	rlcf	(main@digitSelector+1)& (0+255),w,b
   666  000242  6EDA               	movwf	fsr2h,c
   667  000244  90D8               	bcf	status,0,c
   668  000246  36D9               	rlcf	fsr2l,f,c
   669  000248  36DA               	rlcf	fsr2h,f,c
   670  00024A  516A               	movf	(??_main+10)& (0+255),w,b
   671  00024C  26D9               	addwf	fsr2l,f,c
   672  00024E  516B               	movf	(??_main+11)& (0+255),w,b
   673  000250  22DA               	addwfc	fsr2h,f,c
   674  000252  C066  FFDE         	movff	??_main+6,postinc2
   675  000256  C067  FFDE         	movff	??_main+7,postinc2
   676  00025A  C068  FFDE         	movff	??_main+8,postinc2
   677  00025E  C069  FFDE         	movff	??_main+9,postinc2
   678                           
   679                           ; BSR set to: 0
   680                           
   681                           ; BSR set to: 0
   682  000262  D791               	goto	l74
   683  000264                     __end_of_main:
   684                           	opt stack 0
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           prodh	equ	0xFF4
   690                           prodl	equ	0xFF3
   691                           intcon	equ	0xFF2
   692                           postinc0	equ	0xFEE
   693                           postdec1	equ	0xFE5
   694                           fsr1h	equ	0xFE2
   695                           fsr1l	equ	0xFE1
   696                           postinc2	equ	0xFDE
   697                           postdec2	equ	0xFDD
   698                           fsr2h	equ	0xFDA
   699                           fsr2l	equ	0xFD9
   700                           status	equ	0xFD8
   701                           
   702 ;; *************** function _isr *****************
   703 ;; Defined at:
   704 ;;		line 127 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   718 ;;      Params:         0       0       0       0       0       0       0       0       0
   719 ;;      Locals:         0       0       0       0       0       0       0       0       0
   720 ;;      Temps:         21       0       0       0       0       0       0       0       0
   721 ;;      Totals:        21       0       0       0       0       0       0       0       0
   722 ;;Total ram usage:       21 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; Hardware stack levels required when called:    1
   725 ;; This function calls:
   726 ;;		___awmod
   727 ;;		_setDigitPin
   728 ;;		_setSegPin
   729 ;; This function is called by:
   730 ;;		Interrupt level 2
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	intcode
   735  000008                     __pintcode:
   736                           	opt stack 0
   737  000008                     _isr:
   738                           	opt stack 29
   739                           
   740                           ; BSR set to: 0
   741                           ;incstack = 0
   742  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   743  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           prodh	equ	0xFF4
   749                           prodl	equ	0xFF3
   750                           intcon	equ	0xFF2
   751                           postinc0	equ	0xFEE
   752                           postdec1	equ	0xFE5
   753                           fsr1h	equ	0xFE2
   754                           fsr1l	equ	0xFE1
   755                           postinc2	equ	0xFDE
   756                           postdec2	equ	0xFDD
   757                           fsr2h	equ	0xFDA
   758                           fsr2l	equ	0xFD9
   759                           status	equ	0xFD8
   760                           
   761                           	psect	intcode_body
   762  000012                     __pintcode_body:
   763                           	opt stack 29
   764  000012                     int_func:
   765                           	opt stack 29
   766  000012  0006               	pop		; remove dummy address from shadow register refresh
   767  000014  CFFA F030          	movff	pclath,??_isr+3
   768  000018  CFFB F031          	movff	pclatu,??_isr+4
   769  00001C  CFE9 F032          	movff	fsr0l,??_isr+5
   770  000020  CFEA F033          	movff	fsr0h,??_isr+6
   771  000024  CFE1 F034          	movff	fsr1l,??_isr+7
   772  000028  CFE2 F035          	movff	fsr1h,??_isr+8
   773  00002C  CFD9 F036          	movff	fsr2l,??_isr+9
   774  000030  CFDA F037          	movff	fsr2h,??_isr+10
   775  000034  CFF3 F038          	movff	prodl,??_isr+11
   776  000038  CFF4 F039          	movff	prodh,??_isr+12
   777  00003C  CFF6 F03A          	movff	tblptrl,??_isr+13
   778  000040  CFF7 F03B          	movff	tblptrh,??_isr+14
   779  000044  CFF8 F03C          	movff	tblptru,??_isr+15
   780  000048  CFF5 F03D          	movff	tablat,??_isr+16
   781  00004C  C044  F03E         	movff	btemp,??_isr+17
   782  000050  C045  F03F         	movff	btemp+1,??_isr+18
   783  000054  C046  F040         	movff	btemp+2,??_isr+19
   784  000058  C047  F041         	movff	btemp+3,??_isr+20
   785                           
   786                           ;main.c: 128: if(PIR1bits.TMR2IF){
   787  00005C  A29E               	btfss	3998,1,c	;volatile
   788  00005E  D049               	goto	i2l91
   789                           
   790                           ;main.c: 129: PIR1bits.TMR2IF = 0;
   791  000060  929E               	bcf	3998,1,c	;volatile
   792                           
   793                           ;main.c: 131: setSegPin(0b00000000000000000);
   794  000062  0E00               	movlw	0
   795  000064  6E25               	movwf	setSegPin@input,c
   796  000066  0E00               	movlw	0
   797  000068  6E26               	movwf	setSegPin@input+1,c
   798  00006A  0E00               	movlw	0
   799  00006C  6E27               	movwf	setSegPin@input+2,c
   800  00006E  0E00               	movlw	0
   801  000070  6E28               	movwf	setSegPin@input+3,c
   802  000072  EC15  F002         	call	_setSegPin	;wreg free
   803                           
   804                           ;main.c: 132: setDigitPin(1<<digitPtr);
   805  000076  C042  F02D         	movff	_digitPtr,??_isr
   806  00007A  0E01               	movlw	1
   807  00007C  6E2E               	movwf	(??_isr+1)& (0+255),c
   808  00007E  0E00               	movlw	0
   809  000080  6E2F               	movwf	(??_isr+2)& (0+255),c
   810  000082  2A2D               	incf	??_isr,f,c
   811  000084  D003               	goto	i2u38_44
   812  000086                     i2u38_45:
   813  000086  90D8               	bcf	status,0,c
   814  000088  362E               	rlcf	??_isr+1,f,c
   815  00008A  362F               	rlcf	??_isr+2,f,c
   816  00008C                     i2u38_44:
   817  00008C  2E2D               	decfsz	??_isr,f,c
   818  00008E  D7FB               	goto	i2u38_45
   819  000090  C02E  F025         	movff	??_isr+1,setDigitPin@input
   820  000094  C02F  F026         	movff	??_isr+2,setDigitPin@input+1
   821  000098  EC31  F002         	call	_setDigitPin	;wreg free
   822                           
   823                           ;main.c: 133: setSegPin(segMap[digitPtr]);
   824  00009C  0E01               	movlw	low _segMap
   825  00009E  6E2D               	movwf	??_isr& (0+255),c
   826  0000A0  0E00               	movlw	high _segMap
   827  0000A2  6E2E               	movwf	(??_isr+1)& (0+255),c
   828  0000A4  90D8               	bcf	status,0,c
   829  0000A6  3442               	rlcf	_digitPtr,w,c
   830  0000A8  6ED9               	movwf	fsr2l,c
   831  0000AA  3443               	rlcf	_digitPtr+1,w,c
   832  0000AC  6EDA               	movwf	fsr2h,c
   833  0000AE  90D8               	bcf	status,0,c
   834  0000B0  36D9               	rlcf	fsr2l,f,c
   835  0000B2  36DA               	rlcf	fsr2h,f,c
   836  0000B4  502D               	movf	??_isr,w,c
   837  0000B6  26D9               	addwf	fsr2l,f,c
   838  0000B8  502E               	movf	??_isr+1,w,c
   839  0000BA  22DA               	addwfc	fsr2h,f,c
   840  0000BC  CFDE F025          	movff	postinc2,setSegPin@input
   841  0000C0  CFDE F026          	movff	postinc2,setSegPin@input+1
   842  0000C4  CFDE F027          	movff	postinc2,setSegPin@input+2
   843  0000C8  CFDE F028          	movff	postinc2,setSegPin@input+3
   844  0000CC  EC15  F002         	call	_setSegPin	;wreg free
   845                           
   846                           ;main.c: 134: digitPtr = (digitPtr+1)%9;
   847  0000D0  0E01               	movlw	1
   848  0000D2  2442               	addwf	_digitPtr,w,c
   849  0000D4  6E25               	movwf	___awmod@dividend,c
   850  0000D6  0E00               	movlw	0
   851  0000D8  2043               	addwfc	_digitPtr+1,w,c
   852  0000DA  6E26               	movwf	___awmod@dividend+1,c
   853  0000DC  0E00               	movlw	0
   854  0000DE  6E28               	movwf	___awmod@divisor+1,c
   855  0000E0  0E09               	movlw	9
   856  0000E2  6E27               	movwf	___awmod@divisor,c
   857  0000E4  ECB4  F001         	call	___awmod	;wreg free
   858  0000E8  C025  F042         	movff	?___awmod,_digitPtr
   859  0000EC  C026  F043         	movff	?___awmod+1,_digitPtr+1
   860                           
   861                           ;main.c: 135: } else if (SSPIF) {
   862  0000F0  D002               	goto	i2l93
   863  0000F2                     i2l91:
   864  0000F2  B69E               	btfsc	3998,3,c	;volatile
   865                           
   866                           ;main.c: 136: SSPIF = 0;
   867  0000F4  969E               	bcf	3998,3,c	;volatile
   868  0000F6                     i2l93:
   869  0000F6  C041  F047         	movff	??_isr+20,btemp+3
   870  0000FA  C040  F046         	movff	??_isr+19,btemp+2
   871  0000FE  C03F  F045         	movff	??_isr+18,btemp+1
   872  000102  C03E  F044         	movff	??_isr+17,btemp
   873  000106  C03D  FFF5         	movff	??_isr+16,tablat
   874  00010A  C03C  FFF8         	movff	??_isr+15,tblptru
   875  00010E  C03B  FFF7         	movff	??_isr+14,tblptrh
   876  000112  C03A  FFF6         	movff	??_isr+13,tblptrl
   877  000116  C039  FFF4         	movff	??_isr+12,prodh
   878  00011A  C038  FFF3         	movff	??_isr+11,prodl
   879  00011E  C037  FFDA         	movff	??_isr+10,fsr2h
   880  000122  C036  FFD9         	movff	??_isr+9,fsr2l
   881  000126  C035  FFE2         	movff	??_isr+8,fsr1h
   882  00012A  C034  FFE1         	movff	??_isr+7,fsr1l
   883  00012E  C033  FFEA         	movff	??_isr+6,fsr0h
   884  000132  C032  FFE9         	movff	??_isr+5,fsr0l
   885  000136  C031  FFFB         	movff	??_isr+4,pclatu
   886  00013A  C030  FFFA         	movff	??_isr+3,pclath
   887  00013E  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   888  000140  0011               	retfie		f
   889  000142                     __end_of_isr:
   890                           	opt stack 0
   891                           pclatu	equ	0xFFB
   892                           pclath	equ	0xFFA
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           prodh	equ	0xFF4
   898                           prodl	equ	0xFF3
   899                           intcon	equ	0xFF2
   900                           postinc0	equ	0xFEE
   901                           fsr0h	equ	0xFEA
   902                           fsr0l	equ	0xFE9
   903                           postdec1	equ	0xFE5
   904                           fsr1h	equ	0xFE2
   905                           fsr1l	equ	0xFE1
   906                           postinc2	equ	0xFDE
   907                           postdec2	equ	0xFDD
   908                           fsr2h	equ	0xFDA
   909                           fsr2l	equ	0xFD9
   910                           status	equ	0xFD8
   911                           
   912 ;; *************** function _setSegPin *****************
   913 ;; Defined at:
   914 ;;		line 29 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  input           4    0[COMRAM] unsigned long 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, status,2, status,0
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   928 ;;      Params:         4       0       0       0       0       0       0       0       0
   929 ;;      Locals:         0       0       0       0       0       0       0       0       0
   930 ;;      Temps:          4       0       0       0       0       0       0       0       0
   931 ;;      Totals:         8       0       0       0       0       0       0       0       0
   932 ;;Total ram usage:        8 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; This function calls:
   935 ;;		Nothing
   936 ;; This function is called by:
   937 ;;		_isr
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text2
   942  00042A                     __ptext2:
   943                           	opt stack 0
   944  00042A                     _setSegPin:
   945                           	opt stack 29
   946                           
   947                           ;main.c: 30: input = ~input;
   948                           
   949                           ;incstack = 0
   950  00042A  C025  F029         	movff	setSegPin@input,??_setSegPin
   951  00042E  C026  F02A         	movff	setSegPin@input+1,??_setSegPin+1
   952  000432  C027  F02B         	movff	setSegPin@input+2,??_setSegPin+2
   953  000436  C028  F02C         	movff	setSegPin@input+3,??_setSegPin+3
   954  00043A  1E29               	comf	??_setSegPin,f,c
   955  00043C  1E2A               	comf	??_setSegPin+1,f,c
   956  00043E  1E2B               	comf	??_setSegPin+2,f,c
   957  000440  1E2C               	comf	??_setSegPin+3,f,c
   958  000442  C029  F025         	movff	??_setSegPin,setSegPin@input
   959  000446  C02A  F026         	movff	??_setSegPin+1,setSegPin@input+1
   960  00044A  C02B  F027         	movff	??_setSegPin+2,setSegPin@input+2
   961  00044E  C02C  F028         	movff	??_setSegPin+3,setSegPin@input+3
   962                           
   963                           ;main.c: 31: PORTC = (input & 0b10000000000000000) >> 16;
   964  000452  5027               	movf	setSegPin@input+2,w,c
   965  000454  0B01               	andlw	1
   966  000456  6E82               	movwf	3970,c	;volatile
   967                           
   968                           ;main.c: 32: PORTD = (input & 0b01111111100000000) >> 8;
   969  000458  C026  FF83         	movff	setSegPin@input+1,3971	;volatile
   970                           
   971                           ;main.c: 33: PORTB = input & 0b00000000011111111;
   972  00045C  C025  FF81         	movff	setSegPin@input,3969	;volatile
   973  000460  0012               	return		;funcret
   974  000462                     __end_of_setSegPin:
   975                           	opt stack 0
   976                           pclatu	equ	0xFFB
   977                           pclath	equ	0xFFA
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           intcon	equ	0xFF2
   985                           postinc0	equ	0xFEE
   986                           fsr0h	equ	0xFEA
   987                           fsr0l	equ	0xFE9
   988                           postdec1	equ	0xFE5
   989                           fsr1h	equ	0xFE2
   990                           fsr1l	equ	0xFE1
   991                           postinc2	equ	0xFDE
   992                           postdec2	equ	0xFDD
   993                           fsr2h	equ	0xFDA
   994                           fsr2l	equ	0xFD9
   995                           status	equ	0xFD8
   996                           
   997 ;; *************** function _setDigitPin *****************
   998 ;; Defined at:
   999 ;;		line 37 in file "main.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  input           2    0[COMRAM] unsigned int 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2, status,0
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         2       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1016 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:        4 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; This function calls:
  1020 ;;		Nothing
  1021 ;; This function is called by:
  1022 ;;		_isr
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text3
  1027  000462                     __ptext3:
  1028                           	opt stack 0
  1029  000462                     _setDigitPin:
  1030                           	opt stack 29
  1031                           
  1032                           ;main.c: 38: PORTA = (input & 0b111111000) >> 3;
  1033                           
  1034                           ;incstack = 0
  1035  000462  C025  F027         	movff	setDigitPin@input,??_setDigitPin
  1036  000466  C026  F028         	movff	setDigitPin@input+1,??_setDigitPin+1
  1037  00046A  90D8               	bcf	status,0,c
  1038  00046C  3228               	rrcf	??_setDigitPin+1,f,c
  1039  00046E  3227               	rrcf	??_setDigitPin,f,c
  1040  000470  90D8               	bcf	status,0,c
  1041  000472  3228               	rrcf	??_setDigitPin+1,f,c
  1042  000474  3227               	rrcf	??_setDigitPin,f,c
  1043  000476  90D8               	bcf	status,0,c
  1044  000478  3228               	rrcf	??_setDigitPin+1,f,c
  1045  00047A  3227               	rrcf	??_setDigitPin,f,c
  1046  00047C  5027               	movf	??_setDigitPin,w,c
  1047  00047E  0B3F               	andlw	63
  1048  000480  6E80               	movwf	3968,c	;volatile
  1049                           
  1050                           ;main.c: 39: PORTE = input & 0b000000111;
  1051  000482  5025               	movf	setDigitPin@input,w,c
  1052  000484  0B07               	andlw	7
  1053  000486  6E84               	movwf	3972,c	;volatile
  1054  000488  0012               	return		;funcret
  1055  00048A                     __end_of_setDigitPin:
  1056                           	opt stack 0
  1057                           pclatu	equ	0xFFB
  1058                           pclath	equ	0xFFA
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           postinc0	equ	0xFEE
  1067                           fsr0h	equ	0xFEA
  1068                           fsr0l	equ	0xFE9
  1069                           postdec1	equ	0xFE5
  1070                           fsr1h	equ	0xFE2
  1071                           fsr1l	equ	0xFE1
  1072                           postinc2	equ	0xFDE
  1073                           postdec2	equ	0xFDD
  1074                           fsr2h	equ	0xFDA
  1075                           fsr2l	equ	0xFD9
  1076                           status	equ	0xFD8
  1077                           
  1078 ;; *************** function ___awmod *****************
  1079 ;; Defined at:
  1080 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\awmod.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  dividend        2    0[COMRAM] int 
  1083 ;;  divisor         2    2[COMRAM] int 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  sign            1    5[COMRAM] unsigned char 
  1086 ;;  counter         1    4[COMRAM] unsigned char 
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  2    0[COMRAM] int 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1096 ;;      Params:         4       0       0       0       0       0       0       0       0
  1097 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1099 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1100 ;;Total ram usage:        6 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; This function calls:
  1103 ;;		Nothing
  1104 ;; This function is called by:
  1105 ;;		_isr
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text4
  1110  000368                     __ptext4:
  1111                           	opt stack 0
  1112  000368                     ___awmod:
  1113                           	opt stack 29
  1114                           
  1115                           ;incstack = 0
  1116  000368  0E00               	movlw	0
  1117  00036A  6E2A               	movwf	___awmod@sign,c
  1118  00036C  AE26               	btfss	___awmod@dividend+1,7,c
  1119  00036E  D006               	goto	i2l328
  1120  000370  6C25               	negf	___awmod@dividend,c
  1121  000372  1E26               	comf	___awmod@dividend+1,f,c
  1122  000374  B0D8               	btfsc	status,0,c
  1123  000376  2A26               	incf	___awmod@dividend+1,f,c
  1124  000378  0E01               	movlw	1
  1125  00037A  6E2A               	movwf	___awmod@sign,c
  1126  00037C                     i2l328:
  1127  00037C  AE28               	btfss	___awmod@divisor+1,7,c
  1128  00037E  D004               	goto	i2l329
  1129  000380  6C27               	negf	___awmod@divisor,c
  1130  000382  1E28               	comf	___awmod@divisor+1,f,c
  1131  000384  B0D8               	btfsc	status,0,c
  1132  000386  2A28               	incf	___awmod@divisor+1,f,c
  1133  000388                     i2l329:
  1134  000388  5027               	movf	___awmod@divisor,w,c
  1135  00038A  1028               	iorwf	___awmod@divisor+1,w,c
  1136  00038C  B4D8               	btfsc	status,2,c
  1137  00038E  D018               	goto	i2l336
  1138  000390  0E01               	movlw	1
  1139  000392  6E29               	movwf	___awmod@counter,c
  1140  000394  D004               	goto	i2l331
  1141  000396  90D8               	bcf	status,0,c
  1142  000398  3627               	rlcf	___awmod@divisor,f,c
  1143  00039A  3628               	rlcf	___awmod@divisor+1,f,c
  1144  00039C  2A29               	incf	___awmod@counter,f,c
  1145  00039E                     i2l331:
  1146  00039E  AE28               	btfss	___awmod@divisor+1,7,c
  1147  0003A0  D7FA               	goto	i2l332
  1148  0003A2                     i2u25_40:
  1149  0003A2  5027               	movf	___awmod@divisor,w,c
  1150  0003A4  5C25               	subwf	___awmod@dividend,w,c
  1151  0003A6  5028               	movf	___awmod@divisor+1,w,c
  1152  0003A8  5826               	subwfb	___awmod@dividend+1,w,c
  1153  0003AA  A0D8               	btfss	status,0,c
  1154  0003AC  D004               	goto	i2l335
  1155  0003AE  5027               	movf	___awmod@divisor,w,c
  1156  0003B0  5E25               	subwf	___awmod@dividend,f,c
  1157  0003B2  5028               	movf	___awmod@divisor+1,w,c
  1158  0003B4  5A26               	subwfb	___awmod@dividend+1,f,c
  1159  0003B6                     i2l335:
  1160  0003B6  90D8               	bcf	status,0,c
  1161  0003B8  3228               	rrcf	___awmod@divisor+1,f,c
  1162  0003BA  3227               	rrcf	___awmod@divisor,f,c
  1163  0003BC  2E29               	decfsz	___awmod@counter,f,c
  1164  0003BE  D7F1               	goto	i2u25_40
  1165  0003C0                     i2l336:
  1166  0003C0  502A               	movf	___awmod@sign,w,c
  1167  0003C2  B4D8               	btfsc	status,2,c
  1168  0003C4  D004               	goto	i2l337
  1169  0003C6  6C25               	negf	___awmod@dividend,c
  1170  0003C8  1E26               	comf	___awmod@dividend+1,f,c
  1171  0003CA  B0D8               	btfsc	status,0,c
  1172  0003CC  2A26               	incf	___awmod@dividend+1,f,c
  1173  0003CE                     i2l337:
  1174  0003CE  C025  F025         	movff	___awmod@dividend,?___awmod
  1175  0003D2  C026  F026         	movff	___awmod@dividend+1,?___awmod+1
  1176  0003D6  0012               	return	
  1177  0003D8                     __end_of___awmod:
  1178                           	opt stack 0
  1179  0000                     pclatu	equ	0xFFB
  1180                           pclath	equ	0xFFA
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           intcon	equ	0xFF2
  1188                           postinc0	equ	0xFEE
  1189                           fsr0h	equ	0xFEA
  1190                           fsr0l	equ	0xFE9
  1191                           postdec1	equ	0xFE5
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           postinc2	equ	0xFDE
  1195                           postdec2	equ	0xFDD
  1196                           fsr2h	equ	0xFDA
  1197                           fsr2l	equ	0xFD9
  1198                           status	equ	0xFD8
  1199                           pclatu	equ	0xFFB
  1200                           pclath	equ	0xFFA
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           prodh	equ	0xFF4
  1206                           prodl	equ	0xFF3
  1207                           intcon	equ	0xFF2
  1208                           postinc0	equ	0xFEE
  1209                           fsr0h	equ	0xFEA
  1210                           fsr0l	equ	0xFE9
  1211                           postdec1	equ	0xFE5
  1212                           fsr1h	equ	0xFE2
  1213                           fsr1l	equ	0xFE1
  1214                           postinc2	equ	0xFDE
  1215                           postdec2	equ	0xFDD
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           status	equ	0xFD8
  1219                           
  1220                           	psect	rparam
  1221  0000                     pclatu	equ	0xFFB
  1222                           pclath	equ	0xFFA
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           prodh	equ	0xFF4
  1228                           prodl	equ	0xFF3
  1229                           intcon	equ	0xFF2
  1230                           postinc0	equ	0xFEE
  1231                           fsr0h	equ	0xFEA
  1232                           fsr0l	equ	0xFE9
  1233                           postdec1	equ	0xFE5
  1234                           fsr1h	equ	0xFE2
  1235                           fsr1l	equ	0xFE1
  1236                           postinc2	equ	0xFDE
  1237                           postdec2	equ	0xFDD
  1238                           fsr2h	equ	0xFDA
  1239                           fsr2l	equ	0xFD9
  1240                           status	equ	0xFD8
  1241                           
  1242                           	psect	temp
  1243  000044                     btemp:
  1244                           	opt stack 0
  1245  000044                     	ds	1
  1246  0000                     int$flags	set	btemp
  1247  0000                     wtemp6	set	btemp+1
  1248                           pclatu	equ	0xFFB
  1249                           pclath	equ	0xFFA
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           prodh	equ	0xFF4
  1255                           prodl	equ	0xFF3
  1256                           intcon	equ	0xFF2
  1257                           postinc0	equ	0xFEE
  1258                           fsr0h	equ	0xFEA
  1259                           fsr0l	equ	0xFE9
  1260                           postdec1	equ	0xFE5
  1261                           fsr1h	equ	0xFE2
  1262                           fsr1l	equ	0xFE1
  1263                           postinc2	equ	0xFDE
  1264                           postdec2	equ	0xFDD
  1265                           fsr2h	equ	0xFDA
  1266                           fsr2l	equ	0xFD9
  1267                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        296
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      67
    BANK0           160     19      19
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_setSegPin

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0     294
                                              0 BANK0     19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 21    21      0     809
                                              8 COMRAM    21    21      0
                            ___awmod
                        _setDigitPin
                          _setSegPin
 ---------------------------------------------------------------------------------
 (2) _setSegPin                                            8     4      4     241
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setDigitPin                                          4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___awmod
   _setDigitPin
   _setSegPin

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     104      21       12.7%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      13       5       11.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      56      20        0.0%
DATA                 0      0     15A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 28 22:08:57 2017

            _SSPSTATbits 000FC7                       l80 01C2                       l82 01DE  
                     l74 0186                       l75 0186                       l84 01E6  
                    _PR2 000FCB                      _isr 0008             ___awmod@sign 002A  
                    prod 000FF3             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_isr 0025              main@dotflag 006C  
                   _BRGH 007D62                     i2l91 00F2                     i2l93 00F6  
                   _TMR2 000FCC         setDigitPin@input 0025                     _main 0142  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0044                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_isr 002D                    ?_main 0025          __end_of___awmod 03D8  
                  _CMCON 000FB4                    _T2CON 000FCA                    i2l331 039E  
                  i2l332 0396                    i2l335 03B6                    i2l336 03C0  
                  i2l328 037C                    i2l337 03CE                    i2l329 0388  
                  _RCREG 000FAE                    _RCSTA 000FAB                    _SPBRG 000FAF  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _SSPIE 007CEB                    _TRISE 000F96                    _SSPIF 007CF3  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0045          __initialization 03D8             __end_of_main 0264  
           ?_setDigitPin 0025                   ??_main 0060            __activetblptr 000000  
                 _ADCON1 000FC1                   _SPBRGH 000FB0                   _SSPADD 000FC8  
                 _SSPBUF 000FC9                ??___awmod 0029                   _segMap 0001  
        ___awmod@divisor 0027          ___awmod@counter 0029             __pdataBIGRAM 0073  
           __pdataCOMRAM 0001                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0420  
          ___rparam_used 000001           __pcstackCOMRAM 0025       __size_of_setSegPin 0038  
                _BAUDCON 000FB8     __size_of_setDigitPin 0028                  i2u25_40 03A2  
                i2u38_44 008C                  i2u38_45 0086                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7                  __Hparam 0000  
                __Lparam 0000                  ___awmod 0368                  __pcinit 03D8  
                __ramtop 0800                  __ptext0 0142                  __ptext2 042A  
                __ptext3 0462                  __ptext4 0368             __size_of_isr 013A  
       ___awmod@dividend 0025        main@digitSelector 0070           __pintcode_body 0012  
   end_of_initialization 0420        __end_of_setSegPin 0462                  int_func 0012  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               main@RxData 0072            __pidataBIGRAM 0264  
          __pidataCOMRAM 048A      start_initialization 03D8              __end_of_isr 0142  
            __pbssCOMRAM 0042            __pcstackBANK0 0060                __pintcode 0008  
          ??_setDigitPin 0027                 ?___awmod 0025                _setSegPin 042A  
               _PIE1bits 000F9D                 _PIR1bits 000F9E      __end_of_setDigitPin 048A  
              copy_data0 03EC                copy_data1 0410               ?_setSegPin 0025  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awmod 0070  
               _digitPtr 0042           setSegPin@input 0025                 _fontList 0073  
          __size_of_main 0122              _setDigitPin 0462                 int$flags 0044  
             _INTCONbits 000FF2                 intlevel2 0000              ??_setSegPin 0029  
            _SSPCON2bits 000FC5  
