

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Dec 29 05:30:46 2017

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4553 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataBIGRAM
    59  00039C                     __pidataBIGRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _fontList
    63  00039C  0000               	dw	0
    64  00039E  0000               	dw	0
    65  0003A0  0000               	dw	0
    66  0003A2  0000               	dw	0
    67  0003A4  0000               	dw	0
    68  0003A6  0000               	dw	0
    69  0003A8  0000               	dw	0
    70  0003AA  0000               	dw	0
    71  0003AC  0000               	dw	0
    72  0003AE  0000               	dw	0
    73  0003B0  0000               	dw	0
    74  0003B2  0000               	dw	0
    75  0003B4  0000               	dw	0
    76  0003B6  0000               	dw	0
    77  0003B8  0000               	dw	0
    78  0003BA  0000               	dw	0
    79  0003BC  0000               	dw	0
    80  0003BE  0000               	dw	0
    81  0003C0  0000               	dw	0
    82  0003C2  0000               	dw	0
    83  0003C4  0000               	dw	0
    84  0003C6  0000               	dw	0
    85  0003C8  0000               	dw	0
    86  0003CA  0000               	dw	0
    87  0003CC  0000               	dw	0
    88  0003CE  0000               	dw	0
    89  0003D0  0000               	dw	0
    90  0003D2  0000               	dw	0
    91  0003D4  0000               	dw	0
    92  0003D6  0000               	dw	0
    93  0003D8  0000               	dw	0
    94  0003DA  0000               	dw	0
    95  0003DC  0000               	dw	0
    96  0003DE  1812               	dw	6162
    97  0003E0  0880               	dw	2176
    98  0003E2  0000               	dw	0
    99  0003E4  CC33               	dw	52275
   100  0003E6  7BA9               	dw	31657
   101  0003E8  B43B               	dw	46139
   102  0003EA  0080               	dw	128
   103  0003EC  9000               	dw	36864
   104  0003EE  2400               	dw	9216
   105  0003F0  FF00               	dw	65280
   106  0003F2  4B00               	dw	19200
   107  0003F4  0000               	dw	0
   108  0003F6  0300               	dw	768
   109  0003F8  0000               	dw	0
   110  0003FA  3000               	dw	12288
   111  0003FC  00FF               	dw	255
   112  0003FE  4800               	dw	18432
   113  000400  0377               	dw	887
   114  000402  033F               	dw	831
   115  000404  038C               	dw	908
   116  000406  03BB               	dw	955
   117  000408  03FB               	dw	1019
   118  00040A  008F               	dw	143
   119  00040C  03FF               	dw	1023
   120  00040E  03BF               	dw	959
   121  000410  0000               	dw	0
   122  000412  0000               	dw	0
   123  000414  9000               	dw	36864
   124  000416  0330               	dw	816
   125  000418  2400               	dw	9216
   126  00041A  1013               	dw	4115
   127  00041C  0000               	dw	0
   128  00041E  03CF               	dw	975
   129  000420  91F3               	dw	37363
   130  000422  00F3               	dw	243
   131  000424  037C               	dw	892
   132  000426  03F3               	dw	1011
   133  000428  03C3               	dw	963
   134  00042A  02FB               	dw	763
   135  00042C  03CC               	dw	972
   136  00042E  4833               	dw	18483
   137  000430  4813               	dw	18451
   138  000432  91C0               	dw	37312
   139  000434  00F0               	dw	240
   140  000436  14CC               	dw	5324
   141  000438  84CC               	dw	33996
   142  00043A  00FF               	dw	255
   143  00043C  03C7               	dw	967
   144  00043E  80FF               	dw	33023
   145  000440  83C7               	dw	33735
   146  000442  03BB               	dw	955
   147  000444  4803               	dw	18435
   148  000446  00FC               	dw	252
   149  000448  30C0               	dw	12480
   150  00044A  A0CC               	dw	41164
   151  00044C  B400               	dw	46080
   152  00044E  5400               	dw	21504
   153  000450  3033               	dw	12339
   154  000452  00D1               	dw	209
   155  000454  8400               	dw	33792
   156  000456  002E               	dw	46
   157  000458  0003               	dw	3
   158  00045A  0030               	dw	48
   159  00045C  AB00               	dw	43776
   160  00045E  34C0               	dw	13504
   161  000460  0B7B               	dw	2939
   162  000462  5703               	dw	22275
   163  000464  0000               	dw	0
   164  000466  0000               	dw	0
   165  000468  0000               	dw	0
   166  00046A  FFFF               	dw	65535
   167  00046C  0001               	dw	1
   168  00046E  0002               	dw	2
   169  000470  0004               	dw	4
   170  000472  0008               	dw	8
   171  000474  0020               	dw	32
   172  000476  0010               	dw	16
   173  000478  0040               	dw	64
   174  00047A  0080               	dw	128
   175  00047C  0800               	dw	2048
   176  00047E  1000               	dw	4096
   177  000480  0200               	dw	512
   178  000482  8000               	dw	32768
   179  000484  4000               	dw	16384
   180  000486  2000               	dw	8192
   181  000488  0100               	dw	256
   182  00048A  0400               	dw	1024
   183  00048C  0800               	dw	2048
   184  00048E  1800               	dw	6144
   185  000490  1A00               	dw	6656
   186  000492  9A00               	dw	39424
   187  000494  DA00               	dw	55808
   188  000496  FA00               	dw	64000
   189  000498  FB00               	dw	64256
   190  00049A  FF00               	dw	65280
   191  00049C  0000               	dw	0
   192  00049E  0000               	dw	0
   193                           
   194                           	psect	idataBANK0
   195  000630                     __pidataBANK0:
   196                           	opt stack 0
   197                           
   198                           ;initializer for _segMap
   199  000630  00FF               	dw	255
   200  000632  0003               	dw	3
   201  000634  00FF               	dw	255
   202  000636  0003               	dw	3
   203  000638  00FF               	dw	255
   204  00063A  0003               	dw	3
   205  00063C  00FF               	dw	255
   206  00063E  0003               	dw	3
   207  000640  00FF               	dw	255
   208  000642  0003               	dw	3
   209  000644  00FF               	dw	255
   210  000646  0003               	dw	3
   211  000648  00FF               	dw	255
   212  00064A  0003               	dw	3
   213  00064C  00FF               	dw	255
   214  00064E  0003               	dw	3
   215  000650  00FF               	dw	255
   216  000652  0003               	dw	3
   217                           
   218                           	psect	nvCOMRAM
   219  000053                     __pnvCOMRAM:
   220                           	opt stack 0
   221  000053                     _led_stat:
   222                           	opt stack 0
   223  000053                     	ds	1
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSPCON2bits	set	4037
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPADD	set	4040
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _SSPSTATbits	set	4039
   230  0000                     _SSPCON2	set	4037
   231  0000                     _RCREG	set	4014
   232  0000                     _PIR1bits	set	3998
   233  0000                     _SPBRG	set	4015
   234  0000                     _SPBRGH	set	4016
   235  0000                     _BAUDCON	set	4024
   236  0000                     _RCSTA	set	4011
   237  0000                     _INTCONbits	set	4082
   238  0000                     _PIE1bits	set	3997
   239  0000                     _PR2	set	4043
   240  0000                     _TMR2	set	4044
   241  0000                     _T2CON	set	4042
   242  0000                     _LATAbits	set	3977
   243  0000                     _LATCbits	set	3979
   244  0000                     _TRISE	set	3990
   245  0000                     _TRISD	set	3989
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISA	set	3986
   249  0000                     _CMCON	set	4020
   250  0000                     _ADCON1	set	4033
   251  0000                     _LATBbits	set	3978
   252  0000                     _SSPIE	set	31979
   253  0000                     _SSPIF	set	31987
   254  0000                     _BRGH	set	32098
   255                           
   256                           ; #config settings
   257  0000                     
   258                           	psect	cinit
   259  0005DE                     __pcinit:
   260                           	opt stack 0
   261  0005DE                     start_initialization:
   262                           	opt stack 0
   263  0005DE                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Initialize objects allocated to BIGRAM (260 bytes)
   267                           ; load TBLPTR registers with __pidataBIGRAM
   268  0005DE  0E9C               	movlw	low __pidataBIGRAM
   269  0005E0  6EF6               	movwf	tblptrl,c
   270  0005E2  0E03               	movlw	high __pidataBIGRAM
   271  0005E4  6EF7               	movwf	tblptrh,c
   272  0005E6  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   273  0005E8  6EF8               	movwf	tblptru,c
   274  0005EA  EE00  F097         	lfsr	0,__pdataBIGRAM
   275  0005EE  EE11 F004          	lfsr	1,260
   276  0005F2                     copy_data0:
   277  0005F2  0009               	tblrd		*+
   278  0005F4  CFF5 FFEE          	movff	tablat,postinc0
   279  0005F8  50E5               	movf	postdec1,w,c
   280  0005FA  50E1               	movf	fsr1l,w,c
   281  0005FC  E1FA               	bnz	copy_data0
   282  0005FE  50E2               	movf	fsr1h,w,c
   283  000600  E1F8               	bnz	copy_data0
   284                           
   285                           ; Initialize objects allocated to BANK0 (36 bytes)
   286                           ; load TBLPTR registers with __pidataBANK0
   287  000602  0E30               	movlw	low __pidataBANK0
   288  000604  6EF6               	movwf	tblptrl,c
   289  000606  0E06               	movlw	high __pidataBANK0
   290  000608  6EF7               	movwf	tblptrh,c
   291  00060A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   292  00060C  6EF8               	movwf	tblptru,c
   293  00060E  EE00  F060         	lfsr	0,__pdataBANK0
   294  000612  EE10 F024          	lfsr	1,36
   295  000616                     copy_data1:
   296  000616  0009               	tblrd		*+
   297  000618  CFF5 FFEE          	movff	tablat,postinc0
   298  00061C  50E5               	movf	postdec1,w,c
   299  00061E  50E1               	movf	fsr1l,w,c
   300  000620  E1FA               	bnz	copy_data1
   301                           
   302                           ; Clear objects allocated to COMRAM (2 bytes)
   303  000622  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   304  000624  6A51               	clrf	__pbssCOMRAM& (0+255),c
   305  000626                     end_of_initialization:
   306                           	opt stack 0
   307  000626                     __end_of__initialization:
   308                           	opt stack 0
   309  000626  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   310  000628  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   311  00062A  0100               	movlb	0
   312  00062C  EF36  F001         	goto	_main	;jump to C main() function
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           postdec1	equ	0xFE5
   319                           fsr1h	equ	0xFE2
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	bssCOMRAM
   323  000051                     __pbssCOMRAM:
   324                           	opt stack 0
   325  000051                     _digitPtr:
   326                           	opt stack 0
   327  000051                     	ds	2
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           postdec1	equ	0xFE5
   334                           fsr1h	equ	0xFE2
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	dataBANK0
   338  000060                     __pdataBANK0:
   339                           	opt stack 0
   340  000060                     _segMap:
   341                           	opt stack 0
   342  000060                     	ds	36
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           postdec1	equ	0xFE5
   349                           fsr1h	equ	0xFE2
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	dataBIGRAM
   353  000097                     __pdataBIGRAM:
   354                           	opt stack 0
   355  000097                     _fontList:
   356                           	opt stack 0
   357  000097                     	ds	260
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           postinc0	equ	0xFEE
   363                           postdec1	equ	0xFE5
   364                           fsr1h	equ	0xFE2
   365                           fsr1l	equ	0xFE1
   366                           
   367                           	psect	cstackBANK0
   368  000084                     __pcstackBANK0:
   369                           	opt stack 0
   370  000084                     ??_main:
   371                           
   372                           ; 1 bytes @ 0x0
   373  000084                     	ds	12
   374  000090                     main@dotflag:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0xC
   378  000090                     	ds	4
   379  000094                     main@digitSelector:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x10
   383  000094                     	ds	2
   384  000096                     main@RxData:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x12
   388  000096                     	ds	1
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           postdec1	equ	0xFE5
   395                           fsr1h	equ	0xFE2
   396                           fsr1l	equ	0xFE1
   397                           
   398                           	psect	cstackCOMRAM
   399  000001                     __pcstackCOMRAM:
   400                           	opt stack 0
   401  000001                     ?___awmod:
   402                           	opt stack 0
   403  000001                     refreshShiftRegister@ptr:
   404                           	opt stack 0
   405  000001                     ___awmod@dividend:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x0
   409  000001                     	ds	2
   410  000003                     ??_refreshShiftRegister:
   411  000003                     ___awmod@divisor:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x2
   415  000003                     	ds	2
   416  000005                     ___awmod@counter:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x4
   420  000005                     	ds	1
   421  000006                     ___awmod@sign:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x5
   425  000006                     	ds	49
   426  000037                     refreshShiftRegister@map:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x36
   430  000037                     	ds	4
   431  00003B                     refreshShiftRegister@ledSelector:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3A
   435  00003B                     	ds	2
   436  00003D                     refreshShiftRegister@i:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x3C
   440  00003D                     	ds	2
   441  00003F                     ??_isr:
   442                           
   443                           ; 1 bytes @ 0x3E
   444  00003F                     	ds	18
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           postdec1	equ	0xFE5
   451                           fsr1h	equ	0xFE2
   452                           fsr1l	equ	0xFE1
   453                           
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 86 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  dotflag         4   12[BANK0 ] unsigned long 
   464 ;;  digitSelecto    2   16[BANK0 ] short 
   465 ;;  RxData          1   18[BANK0 ] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   475 ;;      Params:         0       0       0       0       0       0       0       0       0
   476 ;;      Locals:         0       7       0       0       0       0       0       0       0
   477 ;;      Temps:          0      12       0       0       0       0       0       0       0
   478 ;;      Totals:         0      19       0       0       0       0       0       0       0
   479 ;;Total ram usage:       19 bytes
   480 ;; Hardware stack levels required when called:    2
   481 ;; This function calls:
   482 ;;		Nothing
   483 ;; This function is called by:
   484 ;;		Startup code after reset
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text0
   489  00026C                     __ptext0:
   490                           	opt stack 0
   491  00026C                     _main:
   492                           	opt stack 29
   493                           
   494                           ;main.c: 88: ADCON1 = 0b00001111;
   495                           
   496                           ;incstack = 0
   497  00026C  0E0F               	movlw	15
   498  00026E  6EC1               	movwf	4033,c	;volatile
   499                           
   500                           ;main.c: 89: CMCON = 0b00000111;
   501  000270  0E07               	movlw	7
   502  000272  6EB4               	movwf	4020,c	;volatile
   503                           
   504                           ;main.c: 90: TRISA = 0b00000000;
   505  000274  0E00               	movlw	0
   506  000276  6E92               	movwf	3986,c	;volatile
   507                           
   508                           ;main.c: 91: TRISB = 0b00000000;
   509  000278  0E00               	movlw	0
   510  00027A  6E93               	movwf	3987,c	;volatile
   511                           
   512                           ;main.c: 92: TRISC = 0b10000000;
   513  00027C  0E80               	movlw	128
   514  00027E  6E94               	movwf	3988,c	;volatile
   515                           
   516                           ;main.c: 93: TRISD = 0b00000000;
   517  000280  0E00               	movlw	0
   518  000282  6E95               	movwf	3989,c	;volatile
   519                           
   520                           ;main.c: 94: TRISE = 0b00000000;
   521  000284  0E00               	movlw	0
   522  000286  6E96               	movwf	3990,c	;volatile
   523                           
   524                           ;main.c: 96: LATCbits.LATC0 = 0;
   525  000288  908B               	bcf	3979,0,c	;volatile
   526                           
   527                           ;main.c: 97: LATCbits.LATC1 = 1;
   528  00028A  828B               	bsf	3979,1,c	;volatile
   529                           
   530                           ;main.c: 99: LATCbits.LATC2 = 0;
   531  00028C  948B               	bcf	3979,2,c	;volatile
   532                           
   533                           ;main.c: 101: LATAbits.LATA4 = 0;
   534  00028E  9889               	bcf	3977,4,c	;volatile
   535                           
   536                           ;main.c: 102: LATAbits.LATA5 = 0;
   537  000290  9A89               	bcf	3977,5,c	;volatile
   538                           
   539                           ;main.c: 107: T2CON = 0;
   540  000292  0E00               	movlw	0
   541  000294  6ECA               	movwf	4042,c	;volatile
   542                           
   543                           ;main.c: 108: TMR2 = 0;
   544  000296  0E00               	movlw	0
   545  000298  6ECC               	movwf	4044,c	;volatile
   546                           
   547                           ;main.c: 109: PR2 = 125;
   548  00029A  0E7D               	movlw	125
   549  00029C  6ECB               	movwf	4043,c	;volatile
   550                           
   551                           ;main.c: 110: T2CON = 0b01111101;
   552  00029E  0E7D               	movlw	125
   553  0002A0  6ECA               	movwf	4042,c	;volatile
   554                           
   555                           ;main.c: 113: PIE1bits.TMR2IE = 1;
   556  0002A2  829D               	bsf	3997,1,c	;volatile
   557                           
   558                           ;main.c: 114: INTCONbits.PEIE = 1;
   559  0002A4  8CF2               	bsf	intcon,6,c	;volatile
   560                           
   561                           ;main.c: 115: INTCONbits.GIE = 1;
   562  0002A6  8EF2               	bsf	intcon,7,c	;volatile
   563                           
   564                           ;main.c: 118: RCSTA = 0b10010000;
   565  0002A8  0E90               	movlw	144
   566  0002AA  6EAB               	movwf	4011,c	;volatile
   567                           
   568                           ;main.c: 119: BAUDCON = 0b00001000;
   569  0002AC  0E08               	movlw	8
   570  0002AE  6EB8               	movwf	4024,c	;volatile
   571                           
   572                           ;main.c: 120: SPBRGH = 0;
   573  0002B0  0E00               	movlw	0
   574  0002B2  6EB0               	movwf	4016,c	;volatile
   575                           
   576                           ;main.c: 121: BRGH = 0;
   577  0002B4  94AC               	bcf	4012,2,c	;volatile
   578                           
   579                           ;main.c: 122: SPBRG = 129;
   580  0002B6  0E81               	movlw	129
   581  0002B8  6EAF               	movwf	4015,c	;volatile
   582                           
   583                           ;main.c: 124: led_stat = 0b11110011;
   584  0002BA  0EF3               	movlw	243
   585  0002BC  6E53               	movwf	_led_stat,c
   586  0002BE                     l74:
   587  0002BE  AA9E               	btfss	3998,5,c	;volatile
   588  0002C0  D7FE               	goto	l73
   589                           
   590                           ;main.c: 132: PIR1bits.RCIF = 0;
   591  0002C2  9A9E               	bcf	3998,5,c	;volatile
   592                           
   593                           ;main.c: 133: RxData = RCREG;
   594  0002C4  CFAE F096          	movff	4014,main@RxData	;volatile
   595                           
   596                           ;main.c: 136: if ((RxData & 0b11100000) == 0b11100000){
   597  0002C8  0100               	movlb	0	; () banked
   598  0002CA  5196               	movf	main@RxData& (0+255),w,b
   599  0002CC  0BE0               	andlw	224
   600  0002CE  0AE0               	xorlw	224
   601  0002D0  A4D8               	btfss	status,2,c
   602  0002D2  D7F5               	goto	l73
   603                           
   604                           ; BSR set to: 0
   605                           ;main.c: 137: digitSelector = (RxData & 0b00001111);
   606  0002D4  C096  F084         	movff	main@RxData,??_main
   607  0002D8  0E0F               	movlw	15
   608  0002DA  1784               	andwf	??_main& (0+255),f,b
   609  0002DC  5184               	movf	??_main& (0+255),w,b
   610  0002DE  6F94               	movwf	main@digitSelector& (0+255),b
   611  0002E0  6B95               	clrf	(main@digitSelector+1)& (0+255),b
   612                           
   613                           ;main.c: 138: dotflag = (RxData & 0b00010000) >> 4;
   614  0002E2  C096  F084         	movff	main@RxData,??_main
   615  0002E6  3B84               	swapf	??_main& (0+255),f,b
   616  0002E8  0E0F               	movlw	15
   617  0002EA  1784               	andwf	??_main& (0+255),f,b
   618  0002EC  0E01               	movlw	1
   619  0002EE  1784               	andwf	??_main& (0+255),f,b
   620  0002F0  5184               	movf	??_main& (0+255),w,b
   621  0002F2  6F90               	movwf	main@dotflag& (0+255),b
   622  0002F4  6B91               	clrf	(main@dotflag+1)& (0+255),b
   623  0002F6  6B92               	clrf	(main@dotflag+2)& (0+255),b
   624  0002F8  6B93               	clrf	(main@dotflag+3)& (0+255),b
   625  0002FA                     
   626                           ; BSR set to: 0
   627  0002FA  AA9E               	btfss	3998,5,c	;volatile
   628  0002FC  D7FE               	goto	l79
   629                           
   630                           ;main.c: 140: PIR1bits.RCIF = 0;
   631  0002FE  9A9E               	bcf	3998,5,c	;volatile
   632                           
   633                           ;main.c: 141: RxData = RCREG;
   634  000300  CFAE F096          	movff	4014,main@RxData	;volatile
   635                           
   636                           ;main.c: 142: if(digitSelector > 8)continue;
   637  000304  0100               	movlb	0	; () banked
   638  000306  BF95               	btfsc	(main@digitSelector+1)& (0+255),7,b
   639  000308  D006               	goto	l81
   640  00030A  5195               	movf	(main@digitSelector+1)& (0+255),w,b
   641  00030C  E1D8               	bnz	l74
   642  00030E  0E09               	movlw	9
   643  000310  5D94               	subwf	main@digitSelector& (0+255),w,b
   644  000312  B0D8               	btfsc	status,0,c
   645  000314  D7D4               	goto	l73
   646  000316                     l81:
   647                           
   648                           ; BSR set to: 0
   649                           ;main.c: 143: if(RxData > 0b01111111) RxData = ~RxData;
   650                           
   651                           ; BSR set to: 0
   652  000316  0E7F               	movlw	127
   653  000318  6596               	cpfsgt	main@RxData& (0+255),b
   654  00031A  D001               	goto	l83
   655                           
   656                           ; BSR set to: 0
   657  00031C  1F96               	comf	main@RxData& (0+255),f,b
   658  00031E                     l83:
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 144: segMap[digitSelector] = fontList[RxData] | (dotflag << 16);
   662                           
   663                           ; BSR set to: 0
   664  00031E  C090  F084         	movff	main@dotflag,??_main
   665  000322  C091  F085         	movff	main@dotflag+1,??_main+1
   666  000326  C092  F086         	movff	main@dotflag+2,??_main+2
   667  00032A  C093  F087         	movff	main@dotflag+3,??_main+3
   668  00032E  C085  F087         	movff	??_main+1,??_main+3
   669  000332  C084  F086         	movff	??_main,??_main+2
   670  000336  6B85               	clrf	(??_main+1)& (0+255),b
   671  000338  6B84               	clrf	??_main& (0+255),b
   672  00033A  5196               	movf	main@RxData& (0+255),w,b
   673  00033C  0D02               	mullw	2
   674  00033E  0E97               	movlw	low _fontList
   675  000340  24F3               	addwf	prodl,w,c
   676  000342  6ED9               	movwf	fsr2l,c
   677  000344  0E00               	movlw	high _fontList
   678  000346  20F4               	addwfc	prodh,w,c
   679  000348  6EDA               	movwf	fsr2h,c
   680  00034A  CFDE F088          	movff	postinc2,??_main+4
   681  00034E  CFDD F089          	movff	postdec2,??_main+5
   682  000352  5188               	movf	(??_main+4)& (0+255),w,b
   683  000354  1184               	iorwf	??_main& (0+255),w,b
   684  000356  6F8A               	movwf	(??_main+6)& (0+255),b
   685  000358  5189               	movf	(??_main+5)& (0+255),w,b
   686  00035A  1185               	iorwf	(??_main+1)& (0+255),w,b
   687  00035C  6F8B               	movwf	(??_main+7)& (0+255),b
   688  00035E  0E00               	movlw	0
   689  000360  1186               	iorwf	(??_main+2)& (0+255),w,b
   690  000362  6F8C               	movwf	(??_main+8)& (0+255),b
   691  000364  0E00               	movlw	0
   692  000366  1187               	iorwf	(??_main+3)& (0+255),w,b
   693  000368  6F8D               	movwf	(??_main+9)& (0+255),b
   694  00036A  0E60               	movlw	low _segMap
   695  00036C  6F8E               	movwf	(??_main+10)& (0+255),b
   696  00036E  0E00               	movlw	high _segMap
   697  000370  6F8F               	movwf	(??_main+11)& (0+255),b
   698  000372  90D8               	bcf	status,0,c
   699  000374  3594               	rlcf	main@digitSelector& (0+255),w,b
   700  000376  6ED9               	movwf	fsr2l,c
   701  000378  3595               	rlcf	(main@digitSelector+1)& (0+255),w,b
   702  00037A  6EDA               	movwf	fsr2h,c
   703  00037C  90D8               	bcf	status,0,c
   704  00037E  36D9               	rlcf	fsr2l,f,c
   705  000380  36DA               	rlcf	fsr2h,f,c
   706  000382  518E               	movf	(??_main+10)& (0+255),w,b
   707  000384  26D9               	addwf	fsr2l,f,c
   708  000386  518F               	movf	(??_main+11)& (0+255),w,b
   709  000388  22DA               	addwfc	fsr2h,f,c
   710  00038A  C08A  FFDE         	movff	??_main+6,postinc2
   711  00038E  C08B  FFDE         	movff	??_main+7,postinc2
   712  000392  C08C  FFDE         	movff	??_main+8,postinc2
   713  000396  C08D  FFDE         	movff	??_main+9,postinc2
   714                           
   715                           ; BSR set to: 0
   716                           
   717                           ; BSR set to: 0
   718  00039A  D791               	goto	l73
   719  00039C                     __end_of_main:
   720                           	opt stack 0
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           prodh	equ	0xFF4
   726                           prodl	equ	0xFF3
   727                           intcon	equ	0xFF2
   728                           postinc0	equ	0xFEE
   729                           postdec1	equ	0xFE5
   730                           fsr1h	equ	0xFE2
   731                           fsr1l	equ	0xFE1
   732                           postinc2	equ	0xFDE
   733                           postdec2	equ	0xFDD
   734                           fsr2h	equ	0xFDA
   735                           fsr2l	equ	0xFD9
   736                           status	equ	0xFD8
   737                           
   738 ;; *************** function _isr *****************
   739 ;; Defined at:
   740 ;;		line 151 in file "main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   754 ;;      Params:         0       0       0       0       0       0       0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0
   756 ;;      Temps:         18       0       0       0       0       0       0       0       0
   757 ;;      Totals:        18       0       0       0       0       0       0       0       0
   758 ;;Total ram usage:       18 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    1
   761 ;; This function calls:
   762 ;;		___awmod
   763 ;;		_refreshShiftRegister
   764 ;; This function is called by:
   765 ;;		Interrupt level 2
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	intcode
   770  000008                     __pintcode:
   771                           	opt stack 0
   772  000008                     _isr:
   773                           	opt stack 29
   774                           
   775                           ; BSR set to: 0
   776                           ;incstack = 0
   777  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   778  00000A  ED50  F002         	call	int_func,f	;refresh shadow registers
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           prodh	equ	0xFF4
   784                           prodl	equ	0xFF3
   785                           intcon	equ	0xFF2
   786                           postinc0	equ	0xFEE
   787                           postdec1	equ	0xFE5
   788                           fsr1h	equ	0xFE2
   789                           fsr1l	equ	0xFE1
   790                           postinc2	equ	0xFDE
   791                           postdec2	equ	0xFDD
   792                           fsr2h	equ	0xFDA
   793                           fsr2l	equ	0xFD9
   794                           status	equ	0xFD8
   795                           
   796                           	psect	intcode_body
   797  0004A0                     __pintcode_body:
   798                           	opt stack 29
   799  0004A0                     int_func:
   800                           	opt stack 29
   801  0004A0  0006               	pop		; remove dummy address from shadow register refresh
   802  0004A2  CFFA F03F          	movff	pclath,??_isr
   803  0004A6  CFFB F040          	movff	pclatu,??_isr+1
   804  0004AA  CFE9 F041          	movff	fsr0l,??_isr+2
   805  0004AE  CFEA F042          	movff	fsr0h,??_isr+3
   806  0004B2  CFE1 F043          	movff	fsr1l,??_isr+4
   807  0004B6  CFE2 F044          	movff	fsr1h,??_isr+5
   808  0004BA  CFD9 F045          	movff	fsr2l,??_isr+6
   809  0004BE  CFDA F046          	movff	fsr2h,??_isr+7
   810  0004C2  CFF3 F047          	movff	prodl,??_isr+8
   811  0004C6  CFF4 F048          	movff	prodh,??_isr+9
   812  0004CA  CFF6 F049          	movff	tblptrl,??_isr+10
   813  0004CE  CFF7 F04A          	movff	tblptrh,??_isr+11
   814  0004D2  CFF8 F04B          	movff	tblptru,??_isr+12
   815  0004D6  CFF5 F04C          	movff	tablat,??_isr+13
   816  0004DA  C054  F04D         	movff	btemp,??_isr+14
   817  0004DE  C055  F04E         	movff	btemp+1,??_isr+15
   818  0004E2  C056  F04F         	movff	btemp+2,??_isr+16
   819  0004E6  C057  F050         	movff	btemp+3,??_isr+17
   820                           
   821                           ;main.c: 152: if(PIR1bits.TMR2IF){
   822  0004EA  A29E               	btfss	3998,1,c	;volatile
   823  0004EC  D018               	goto	i2l90
   824                           
   825                           ;main.c: 153: PIR1bits.TMR2IF = 0;
   826  0004EE  929E               	bcf	3998,1,c	;volatile
   827                           
   828                           ;main.c: 154: refreshShiftRegister(digitPtr);
   829  0004F0  C051  F001         	movff	_digitPtr,refreshShiftRegister@ptr
   830  0004F4  C052  F002         	movff	_digitPtr+1,refreshShiftRegister@ptr+1
   831  0004F8  EC09  F000         	call	_refreshShiftRegister	;wreg free
   832                           
   833                           ;main.c: 155: digitPtr = (digitPtr+1)%9;
   834  0004FC  0E01               	movlw	1
   835  0004FE  2451               	addwf	_digitPtr,w,c
   836  000500  6E01               	movwf	___awmod@dividend,c
   837  000502  0E00               	movlw	0
   838  000504  2052               	addwfc	_digitPtr+1,w,c
   839  000506  6E02               	movwf	___awmod@dividend+1,c
   840  000508  0E00               	movlw	0
   841  00050A  6E04               	movwf	___awmod@divisor+1,c
   842  00050C  0E09               	movlw	9
   843  00050E  6E03               	movwf	___awmod@divisor,c
   844  000510  ECB7  F002         	call	___awmod	;wreg free
   845  000514  C001  F051         	movff	?___awmod,_digitPtr
   846  000518  C002  F052         	movff	?___awmod+1,_digitPtr+1
   847                           
   848                           ;main.c: 157: } else if (SSPIF) {
   849  00051C  D002               	goto	i2l92
   850  00051E                     i2l90:
   851  00051E  B69E               	btfsc	3998,3,c	;volatile
   852                           
   853                           ;main.c: 158: SSPIF = 0;
   854  000520  969E               	bcf	3998,3,c	;volatile
   855  000522                     i2l92:
   856  000522  C050  F057         	movff	??_isr+17,btemp+3
   857  000526  C04F  F056         	movff	??_isr+16,btemp+2
   858  00052A  C04E  F055         	movff	??_isr+15,btemp+1
   859  00052E  C04D  F054         	movff	??_isr+14,btemp
   860  000532  C04C  FFF5         	movff	??_isr+13,tablat
   861  000536  C04B  FFF8         	movff	??_isr+12,tblptru
   862  00053A  C04A  FFF7         	movff	??_isr+11,tblptrh
   863  00053E  C049  FFF6         	movff	??_isr+10,tblptrl
   864  000542  C048  FFF4         	movff	??_isr+9,prodh
   865  000546  C047  FFF3         	movff	??_isr+8,prodl
   866  00054A  C046  FFDA         	movff	??_isr+7,fsr2h
   867  00054E  C045  FFD9         	movff	??_isr+6,fsr2l
   868  000552  C044  FFE2         	movff	??_isr+5,fsr1h
   869  000556  C043  FFE1         	movff	??_isr+4,fsr1l
   870  00055A  C042  FFEA         	movff	??_isr+3,fsr0h
   871  00055E  C041  FFE9         	movff	??_isr+2,fsr0l
   872  000562  C040  FFFB         	movff	??_isr+1,pclatu
   873  000566  C03F  FFFA         	movff	??_isr,pclath
   874  00056A  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   875  00056C  0011               	retfie		f
   876  00056E                     __end_of_isr:
   877                           	opt stack 0
   878                           pclatu	equ	0xFFB
   879                           pclath	equ	0xFFA
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           prodh	equ	0xFF4
   885                           prodl	equ	0xFF3
   886                           intcon	equ	0xFF2
   887                           postinc0	equ	0xFEE
   888                           fsr0h	equ	0xFEA
   889                           fsr0l	equ	0xFE9
   890                           postdec1	equ	0xFE5
   891                           fsr1h	equ	0xFE2
   892                           fsr1l	equ	0xFE1
   893                           postinc2	equ	0xFDE
   894                           postdec2	equ	0xFDD
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899 ;; *************** function _refreshShiftRegister *****************
   900 ;; Defined at:
   901 ;;		line 60 in file "main.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  ptr             2    0[COMRAM] int 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  i               2   60[COMRAM] int 
   906 ;;  map             4   54[COMRAM] unsigned long 
   907 ;;  ledSelector     2   58[COMRAM] unsigned int 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   917 ;;      Params:         2       0       0       0       0       0       0       0       0
   918 ;;      Locals:         8       0       0       0       0       0       0       0       0
   919 ;;      Temps:         52       0       0       0       0       0       0       0       0
   920 ;;      Totals:        62       0       0       0       0       0       0       0       0
   921 ;;Total ram usage:       62 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_isr
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text2
   931  000012                     __ptext2:
   932                           	opt stack 0
   933  000012                     _refreshShiftRegister:
   934                           	opt stack 29
   935                           
   936                           ;main.c: 61: uint16_t ledSelector = 0b1 << ptr;
   937                           
   938                           ;incstack = 0
   939  000012  C001  F003         	movff	refreshShiftRegister@ptr,??_refreshShiftRegister
   940  000016  0E01               	movlw	1
   941  000018  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
   942  00001A  0E00               	movlw	0
   943  00001C  6E05               	movwf	(??_refreshShiftRegister+2)& (0+255),c
   944  00001E  2A03               	incf	??_refreshShiftRegister,f,c
   945  000020  D003               	goto	i2u27_44
   946  000022                     i2u27_45:
   947  000022  90D8               	bcf	status,0,c
   948  000024  3604               	rlcf	??_refreshShiftRegister+1,f,c
   949  000026  3605               	rlcf	??_refreshShiftRegister+2,f,c
   950  000028                     i2u27_44:
   951  000028  2E03               	decfsz	??_refreshShiftRegister,f,c
   952  00002A  D7FB               	goto	i2u27_45
   953  00002C  C004  F03B         	movff	??_refreshShiftRegister+1,refreshShiftRegister@ledSelector
   954  000030  C005  F03C         	movff	??_refreshShiftRegister+2,refreshShiftRegister@ledSelector+1
   955                           
   956                           ;main.c: 64: uint32_t map = ((segMap[ptr] & 0b11111111) << 24)
   957                           ;main.c: 65: | ((segMap[ptr] & 0b1111111100000000) << 8)
   958                           ;main.c: 66: | ((ledSelector & 0b0000000011) << 14)
   959                           ;main.c: 67: | ((led_stat & 0b00001111) << 10)
   960                           ;main.c: 68: | ((segMap[ptr] & 0b110000000000000000) >> 8)
   961                           ;main.c: 69: | ((ledSelector & 0b1111111100) >> 2);
   962  000034  0E60               	movlw	low _segMap
   963  000036  6E03               	movwf	??_refreshShiftRegister& (0+255),c
   964  000038  0E00               	movlw	high _segMap
   965  00003A  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
   966  00003C  90D8               	bcf	status,0,c
   967  00003E  3401               	rlcf	refreshShiftRegister@ptr,w,c
   968  000040  6ED9               	movwf	fsr2l,c
   969  000042  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
   970  000044  6EDA               	movwf	fsr2h,c
   971  000046  90D8               	bcf	status,0,c
   972  000048  36D9               	rlcf	fsr2l,f,c
   973  00004A  36DA               	rlcf	fsr2h,f,c
   974  00004C  5003               	movf	??_refreshShiftRegister,w,c
   975  00004E  26D9               	addwf	fsr2l,f,c
   976  000050  5004               	movf	??_refreshShiftRegister+1,w,c
   977  000052  22DA               	addwfc	fsr2h,f,c
   978  000054  CFDE F005          	movff	postinc2,??_refreshShiftRegister+2
   979  000058  CFDE F006          	movff	postinc2,??_refreshShiftRegister+3
   980  00005C  CFDE F007          	movff	postinc2,??_refreshShiftRegister+4
   981  000060  CFDE F008          	movff	postinc2,??_refreshShiftRegister+5
   982  000064  C006  F005         	movff	??_refreshShiftRegister+3,??_refreshShiftRegister+2
   983  000068  C007  F006         	movff	??_refreshShiftRegister+4,??_refreshShiftRegister+3
   984  00006C  C008  F007         	movff	??_refreshShiftRegister+5,??_refreshShiftRegister+4
   985  000070  6A08               	clrf	??_refreshShiftRegister+5,c
   986  000072  0E00               	movlw	0
   987  000074  1405               	andwf	??_refreshShiftRegister+2,w,c
   988  000076  6E09               	movwf	(??_refreshShiftRegister+6)& (0+255),c
   989  000078  0E03               	movlw	3
   990  00007A  1406               	andwf	??_refreshShiftRegister+3,w,c
   991  00007C  6E0A               	movwf	(??_refreshShiftRegister+7)& (0+255),c
   992  00007E  0E00               	movlw	0
   993  000080  1407               	andwf	??_refreshShiftRegister+4,w,c
   994  000082  6E0B               	movwf	(??_refreshShiftRegister+8)& (0+255),c
   995  000084  0E00               	movlw	0
   996  000086  1408               	andwf	??_refreshShiftRegister+5,w,c
   997  000088  6E0C               	movwf	(??_refreshShiftRegister+9)& (0+255),c
   998  00008A  5053               	movf	_led_stat,w,c
   999  00008C  0B0F               	andlw	15
  1000  00008E  6E0D               	movwf	(??_refreshShiftRegister+10)& (0+255),c
  1001  000090  6A0E               	clrf	(??_refreshShiftRegister+11)& (0+255),c
  1002  000092  0E0A               	movlw	10
  1003  000094                     i2u28_45:
  1004  000094  90D8               	bcf	status,0,c
  1005  000096  360D               	rlcf	??_refreshShiftRegister+10,f,c
  1006  000098  360E               	rlcf	??_refreshShiftRegister+11,f,c
  1007  00009A  2EE8               	decfsz	wreg,f,c
  1008  00009C  D7FB               	goto	i2u28_45
  1009  00009E  C00D  F00F         	movff	??_refreshShiftRegister+10,??_refreshShiftRegister+12
  1010  0000A2  C00E  F010         	movff	??_refreshShiftRegister+11,??_refreshShiftRegister+13
  1011  0000A6  0E00               	movlw	0
  1012  0000A8  BE10               	btfsc	(??_refreshShiftRegister+13)& (0+255),7,c
  1013  0000AA  0EFF               	movlw	255
  1014  0000AC  6E11               	movwf	(??_refreshShiftRegister+14)& (0+255),c
  1015  0000AE  6E12               	movwf	(??_refreshShiftRegister+15)& (0+255),c
  1016  0000B0  0E03               	movlw	3
  1017  0000B2  143B               	andwf	refreshShiftRegister@ledSelector,w,c
  1018  0000B4  6E13               	movwf	(??_refreshShiftRegister+16)& (0+255),c
  1019  0000B6  0E00               	movlw	0
  1020  0000B8  143C               	andwf	refreshShiftRegister@ledSelector+1,w,c
  1021  0000BA  6E14               	movwf	(??_refreshShiftRegister+17)& (0+255),c
  1022  0000BC  0E0E               	movlw	14
  1023  0000BE                     i2u29_45:
  1024  0000BE  90D8               	bcf	status,0,c
  1025  0000C0  3613               	rlcf	??_refreshShiftRegister+16,f,c
  1026  0000C2  3614               	rlcf	??_refreshShiftRegister+17,f,c
  1027  0000C4  2EE8               	decfsz	wreg,f,c
  1028  0000C6  D7FB               	goto	i2u29_45
  1029  0000C8  0E60               	movlw	low _segMap
  1030  0000CA  6E15               	movwf	(??_refreshShiftRegister+18)& (0+255),c
  1031  0000CC  0E00               	movlw	high _segMap
  1032  0000CE  6E16               	movwf	(??_refreshShiftRegister+19)& (0+255),c
  1033  0000D0  90D8               	bcf	status,0,c
  1034  0000D2  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1035  0000D4  6ED9               	movwf	fsr2l,c
  1036  0000D6  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1037  0000D8  6EDA               	movwf	fsr2h,c
  1038  0000DA  90D8               	bcf	status,0,c
  1039  0000DC  36D9               	rlcf	fsr2l,f,c
  1040  0000DE  36DA               	rlcf	fsr2h,f,c
  1041  0000E0  5015               	movf	??_refreshShiftRegister+18,w,c
  1042  0000E2  26D9               	addwf	fsr2l,f,c
  1043  0000E4  5016               	movf	??_refreshShiftRegister+19,w,c
  1044  0000E6  22DA               	addwfc	fsr2h,f,c
  1045  0000E8  0E00               	movlw	0
  1046  0000EA  14DE               	andwf	postinc2,w,c
  1047  0000EC  6E17               	movwf	(??_refreshShiftRegister+20)& (0+255),c
  1048  0000EE  0EFF               	movlw	255
  1049  0000F0  14DE               	andwf	postinc2,w,c
  1050  0000F2  6E18               	movwf	(??_refreshShiftRegister+21)& (0+255),c
  1051  0000F4  0E00               	movlw	0
  1052  0000F6  14DE               	andwf	postinc2,w,c
  1053  0000F8  6E19               	movwf	(??_refreshShiftRegister+22)& (0+255),c
  1054  0000FA  0E00               	movlw	0
  1055  0000FC  14DE               	andwf	postinc2,w,c
  1056  0000FE  6E1A               	movwf	(??_refreshShiftRegister+23)& (0+255),c
  1057  000100  C019  F01A         	movff	??_refreshShiftRegister+22,??_refreshShiftRegister+23
  1058  000104  C018  F019         	movff	??_refreshShiftRegister+21,??_refreshShiftRegister+22
  1059  000108  C017  F018         	movff	??_refreshShiftRegister+20,??_refreshShiftRegister+21
  1060  00010C  6A17               	clrf	??_refreshShiftRegister+20,c
  1061  00010E  0E60               	movlw	low _segMap
  1062  000110  6E1B               	movwf	(??_refreshShiftRegister+24)& (0+255),c
  1063  000112  0E00               	movlw	high _segMap
  1064  000114  6E1C               	movwf	(??_refreshShiftRegister+25)& (0+255),c
  1065  000116  90D8               	bcf	status,0,c
  1066  000118  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1067  00011A  6ED9               	movwf	fsr2l,c
  1068  00011C  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1069  00011E  6EDA               	movwf	fsr2h,c
  1070  000120  90D8               	bcf	status,0,c
  1071  000122  36D9               	rlcf	fsr2l,f,c
  1072  000124  36DA               	rlcf	fsr2h,f,c
  1073  000126  501B               	movf	??_refreshShiftRegister+24,w,c
  1074  000128  26D9               	addwf	fsr2l,f,c
  1075  00012A  501C               	movf	??_refreshShiftRegister+25,w,c
  1076  00012C  22DA               	addwfc	fsr2h,f,c
  1077  00012E  CFDE F01D          	movff	postinc2,??_refreshShiftRegister+26
  1078  000132  CFDE F01E          	movff	postinc2,??_refreshShiftRegister+27
  1079  000136  CFDE F01F          	movff	postinc2,??_refreshShiftRegister+28
  1080  00013A  CFDE F020          	movff	postinc2,??_refreshShiftRegister+29
  1081  00013E  0EFF               	movlw	255
  1082  000140  141D               	andwf	??_refreshShiftRegister+26,w,c
  1083  000142  6E21               	movwf	(??_refreshShiftRegister+30)& (0+255),c
  1084  000144  0E00               	movlw	0
  1085  000146  141E               	andwf	??_refreshShiftRegister+27,w,c
  1086  000148  6E22               	movwf	(??_refreshShiftRegister+31)& (0+255),c
  1087  00014A  0E00               	movlw	0
  1088  00014C  141F               	andwf	??_refreshShiftRegister+28,w,c
  1089  00014E  6E23               	movwf	(??_refreshShiftRegister+32)& (0+255),c
  1090  000150  0E00               	movlw	0
  1091  000152  1420               	andwf	??_refreshShiftRegister+29,w,c
  1092  000154  6E24               	movwf	(??_refreshShiftRegister+33)& (0+255),c
  1093  000156  C021  F024         	movff	??_refreshShiftRegister+30,??_refreshShiftRegister+33
  1094  00015A  6A23               	clrf	??_refreshShiftRegister+32,c
  1095  00015C  6A22               	clrf	??_refreshShiftRegister+31,c
  1096  00015E  6A21               	clrf	??_refreshShiftRegister+30,c
  1097  000160  5017               	movf	??_refreshShiftRegister+20,w,c
  1098  000162  1021               	iorwf	??_refreshShiftRegister+30,w,c
  1099  000164  6E25               	movwf	(??_refreshShiftRegister+34)& (0+255),c
  1100  000166  5018               	movf	??_refreshShiftRegister+21,w,c
  1101  000168  1022               	iorwf	??_refreshShiftRegister+31,w,c
  1102  00016A  6E26               	movwf	(??_refreshShiftRegister+35)& (0+255),c
  1103  00016C  5019               	movf	??_refreshShiftRegister+22,w,c
  1104  00016E  1023               	iorwf	??_refreshShiftRegister+32,w,c
  1105  000170  6E27               	movwf	(??_refreshShiftRegister+36)& (0+255),c
  1106  000172  501A               	movf	??_refreshShiftRegister+23,w,c
  1107  000174  1024               	iorwf	??_refreshShiftRegister+33,w,c
  1108  000176  6E28               	movwf	(??_refreshShiftRegister+37)& (0+255),c
  1109  000178  5013               	movf	??_refreshShiftRegister+16,w,c
  1110  00017A  1025               	iorwf	??_refreshShiftRegister+34,w,c
  1111  00017C  6E29               	movwf	(??_refreshShiftRegister+38)& (0+255),c
  1112  00017E  5014               	movf	??_refreshShiftRegister+17,w,c
  1113  000180  1026               	iorwf	??_refreshShiftRegister+35,w,c
  1114  000182  6E2A               	movwf	(??_refreshShiftRegister+39)& (0+255),c
  1115  000184  0E00               	movlw	0
  1116  000186  1027               	iorwf	??_refreshShiftRegister+36,w,c
  1117  000188  6E2B               	movwf	(??_refreshShiftRegister+40)& (0+255),c
  1118  00018A  0E00               	movlw	0
  1119  00018C  1028               	iorwf	??_refreshShiftRegister+37,w,c
  1120  00018E  6E2C               	movwf	(??_refreshShiftRegister+41)& (0+255),c
  1121  000190  500F               	movf	??_refreshShiftRegister+12,w,c
  1122  000192  1029               	iorwf	??_refreshShiftRegister+38,w,c
  1123  000194  6E2D               	movwf	(??_refreshShiftRegister+42)& (0+255),c
  1124  000196  5010               	movf	??_refreshShiftRegister+13,w,c
  1125  000198  102A               	iorwf	??_refreshShiftRegister+39,w,c
  1126  00019A  6E2E               	movwf	(??_refreshShiftRegister+43)& (0+255),c
  1127  00019C  5011               	movf	??_refreshShiftRegister+14,w,c
  1128  00019E  102B               	iorwf	??_refreshShiftRegister+40,w,c
  1129  0001A0  6E2F               	movwf	(??_refreshShiftRegister+44)& (0+255),c
  1130  0001A2  5012               	movf	??_refreshShiftRegister+15,w,c
  1131  0001A4  102C               	iorwf	??_refreshShiftRegister+41,w,c
  1132  0001A6  6E30               	movwf	(??_refreshShiftRegister+45)& (0+255),c
  1133  0001A8  5009               	movf	??_refreshShiftRegister+6,w,c
  1134  0001AA  102D               	iorwf	??_refreshShiftRegister+42,w,c
  1135  0001AC  6E31               	movwf	(??_refreshShiftRegister+46)& (0+255),c
  1136  0001AE  500A               	movf	??_refreshShiftRegister+7,w,c
  1137  0001B0  102E               	iorwf	??_refreshShiftRegister+43,w,c
  1138  0001B2  6E32               	movwf	(??_refreshShiftRegister+47)& (0+255),c
  1139  0001B4  500B               	movf	??_refreshShiftRegister+8,w,c
  1140  0001B6  102F               	iorwf	??_refreshShiftRegister+44,w,c
  1141  0001B8  6E33               	movwf	(??_refreshShiftRegister+48)& (0+255),c
  1142  0001BA  500C               	movf	??_refreshShiftRegister+9,w,c
  1143  0001BC  1030               	iorwf	??_refreshShiftRegister+45,w,c
  1144  0001BE  6E34               	movwf	(??_refreshShiftRegister+49)& (0+255),c
  1145  0001C0  C03B  F035         	movff	refreshShiftRegister@ledSelector,??_refreshShiftRegister+50
  1146  0001C4  C03C  F036         	movff	refreshShiftRegister@ledSelector+1,??_refreshShiftRegister+51
  1147  0001C8  90D8               	bcf	status,0,c
  1148  0001CA  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1149  0001CC  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1150  0001CE  90D8               	bcf	status,0,c
  1151  0001D0  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1152  0001D2  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1153  0001D4  5035               	movf	??_refreshShiftRegister+50,w,c
  1154  0001D6  1031               	iorwf	??_refreshShiftRegister+46,w,c
  1155  0001D8  6E37               	movwf	refreshShiftRegister@map,c
  1156  0001DA  5032               	movf	??_refreshShiftRegister+47,w,c
  1157  0001DC  6E38               	movwf	refreshShiftRegister@map+1,c
  1158  0001DE  5033               	movf	??_refreshShiftRegister+48,w,c
  1159  0001E0  6E39               	movwf	refreshShiftRegister@map+2,c
  1160  0001E2  5034               	movf	??_refreshShiftRegister+49,w,c
  1161  0001E4  6E3A               	movwf	refreshShiftRegister@map+3,c
  1162                           
  1163                           ;main.c: 72: for (int i = 0; i < 32; i++) {
  1164  0001E6  0E00               	movlw	0
  1165  0001E8  6E3E               	movwf	refreshShiftRegister@i+1,c
  1166  0001EA  0E00               	movlw	0
  1167  0001EC  6E3D               	movwf	refreshShiftRegister@i,c
  1168  0001EE  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1169  0001F0  D003               	goto	i2l66
  1170  0001F2  503E               	movf	refreshShiftRegister@i+1,w,c
  1171  0001F4  E130               	bnz	i2l67
  1172  0001F6  D02B               	goto	L1
  1173  0001F8                     i2l66:
  1174                           
  1175                           ;main.c: 73: LATBbits.LATB2 = (map >> i) & 1;
  1176  0001F8  503D               	movf	refreshShiftRegister@i,w,c
  1177  0001FA  C037  F003         	movff	refreshShiftRegister@map,??_refreshShiftRegister
  1178  0001FE  C038  F004         	movff	refreshShiftRegister@map+1,??_refreshShiftRegister+1
  1179  000202  C039  F005         	movff	refreshShiftRegister@map+2,??_refreshShiftRegister+2
  1180  000206  C03A  F006         	movff	refreshShiftRegister@map+3,??_refreshShiftRegister+3
  1181  00020A  2AE8               	incf	wreg,f,c
  1182  00020C  D005               	goto	i2u31_40
  1183  00020E                     i2u31_45:
  1184  00020E  90D8               	bcf	status,0,c
  1185  000210  3206               	rrcf	??_refreshShiftRegister+3,f,c
  1186  000212  3205               	rrcf	??_refreshShiftRegister+2,f,c
  1187  000214  3204               	rrcf	??_refreshShiftRegister+1,f,c
  1188  000216  3203               	rrcf	??_refreshShiftRegister,f,c
  1189  000218                     i2u31_40:
  1190  000218  2EE8               	decfsz	wreg,f,c
  1191  00021A  D7F9               	goto	i2u31_45
  1192  00021C  0E01               	movlw	1
  1193  00021E  1603               	andwf	??_refreshShiftRegister,f,c
  1194  000220  4603               	rlncf	??_refreshShiftRegister,f,c
  1195  000222  4603               	rlncf	??_refreshShiftRegister,f,c
  1196  000224  508A               	movf	3978,w,c	;volatile
  1197  000226  1803               	xorwf	??_refreshShiftRegister,w,c
  1198  000228  0BFB               	andlw	-5
  1199  00022A  1803               	xorwf	??_refreshShiftRegister,w,c
  1200  00022C  6E8A               	movwf	3978,c	;volatile
  1201                           
  1202                           ;main.c: 74: LATBbits.LATB3 = 1;
  1203  00022E  868A               	bsf	3978,3,c	;volatile
  1204                           
  1205                           ;main.c: 75: _delay((unsigned long)((10)*(20000000/4000000.0)));
  1206  000230  0E10               	movlw	16
  1207  000232                     i2u50_47:
  1208  000232  2EE8               	decfsz	wreg,f,c
  1209  000234  D7FE               	bra	i2u50_47
  1210  000236  D000               	nop2	
  1211                           
  1212                           ;main.c: 76: LATBbits.LATB3 = 0;
  1213  000238  968A               	bcf	3978,3,c	;volatile
  1214                           
  1215                           ;main.c: 77: _delay((unsigned long)((10)*(20000000/4000000.0)));
  1216  00023A  0E10               	movlw	16
  1217  00023C                     i2u51_47:
  1218  00023C  2EE8               	decfsz	wreg,f,c
  1219  00023E  D7FE               	bra	i2u51_47
  1220  000240  D000               	nop2	
  1221  000242  4A3D               	infsnz	refreshShiftRegister@i,f,c
  1222  000244  2A3E               	incf	refreshShiftRegister@i+1,f,c
  1223  000246  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1224  000248  D7D7               	goto	i2l66
  1225  00024A  503E               	movf	refreshShiftRegister@i+1,w,c
  1226  00024C  E104               	bnz	i2u32_40
  1227  00024E                     L1:
  1228  00024E  0E20               	movlw	32
  1229  000250  5C3D               	subwf	refreshShiftRegister@i,w,c
  1230  000252  A0D8               	btfss	status,0,c
  1231  000254  D7D1               	goto	i2l66
  1232  000256                     i2u32_40:
  1233  000256                     i2l67:
  1234                           
  1235                           ;main.c: 78: }
  1236                           ;main.c: 80: LATBbits.LATB4 = 1;
  1237  000256  888A               	bsf	3978,4,c	;volatile
  1238                           
  1239                           ;main.c: 81: _delay((unsigned long)((10)*(20000000/4000000.0)));
  1240  000258  0E10               	movlw	16
  1241  00025A                     i2u52_47:
  1242  00025A  2EE8               	decfsz	wreg,f,c
  1243  00025C  D7FE               	bra	i2u52_47
  1244  00025E  D000               	nop2	
  1245                           
  1246                           ;main.c: 82: LATBbits.LATB4 = 0;
  1247  000260  988A               	bcf	3978,4,c	;volatile
  1248                           
  1249                           ;main.c: 83: _delay((unsigned long)((10)*(20000000/4000000.0)));
  1250  000262  0E10               	movlw	16
  1251  000264                     i2u53_47:
  1252  000264  2EE8               	decfsz	wreg,f,c
  1253  000266  D7FE               	bra	i2u53_47
  1254  000268  D000               	nop2	
  1255  00026A  0012               	return		;funcret
  1256  00026C                     __end_of_refreshShiftRegister:
  1257                           	opt stack 0
  1258                           pclatu	equ	0xFFB
  1259                           pclath	equ	0xFFA
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           postinc0	equ	0xFEE
  1268                           fsr0h	equ	0xFEA
  1269                           fsr0l	equ	0xFE9
  1270                           wreg	equ	0xFE8
  1271                           postdec1	equ	0xFE5
  1272                           fsr1h	equ	0xFE2
  1273                           fsr1l	equ	0xFE1
  1274                           postinc2	equ	0xFDE
  1275                           postdec2	equ	0xFDD
  1276                           fsr2h	equ	0xFDA
  1277                           fsr2l	equ	0xFD9
  1278                           status	equ	0xFD8
  1279                           
  1280 ;; *************** function ___awmod *****************
  1281 ;; Defined at:
  1282 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\awmod.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  dividend        2    0[COMRAM] int 
  1285 ;;  divisor         2    2[COMRAM] int 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  sign            1    5[COMRAM] unsigned char 
  1288 ;;  counter         1    4[COMRAM] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  2    0[COMRAM] int 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1298 ;;      Params:         4       0       0       0       0       0       0       0       0
  1299 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1301 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1302 ;;Total ram usage:        6 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_isr
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text3
  1312  00056E                     __ptext3:
  1313                           	opt stack 0
  1314  00056E                     ___awmod:
  1315                           	opt stack 29
  1316                           
  1317                           ;incstack = 0
  1318  00056E  0E00               	movlw	0
  1319  000570  6E06               	movwf	___awmod@sign,c
  1320  000572  AE02               	btfss	___awmod@dividend+1,7,c
  1321  000574  D006               	goto	i2l327
  1322  000576  6C01               	negf	___awmod@dividend,c
  1323  000578  1E02               	comf	___awmod@dividend+1,f,c
  1324  00057A  B0D8               	btfsc	status,0,c
  1325  00057C  2A02               	incf	___awmod@dividend+1,f,c
  1326  00057E  0E01               	movlw	1
  1327  000580  6E06               	movwf	___awmod@sign,c
  1328  000582                     i2l327:
  1329  000582  AE04               	btfss	___awmod@divisor+1,7,c
  1330  000584  D004               	goto	i2l328
  1331  000586  6C03               	negf	___awmod@divisor,c
  1332  000588  1E04               	comf	___awmod@divisor+1,f,c
  1333  00058A  B0D8               	btfsc	status,0,c
  1334  00058C  2A04               	incf	___awmod@divisor+1,f,c
  1335  00058E                     i2l328:
  1336  00058E  5003               	movf	___awmod@divisor,w,c
  1337  000590  1004               	iorwf	___awmod@divisor+1,w,c
  1338  000592  B4D8               	btfsc	status,2,c
  1339  000594  D018               	goto	i2l335
  1340  000596  0E01               	movlw	1
  1341  000598  6E05               	movwf	___awmod@counter,c
  1342  00059A  D004               	goto	i2l330
  1343  00059C  90D8               	bcf	status,0,c
  1344  00059E  3603               	rlcf	___awmod@divisor,f,c
  1345  0005A0  3604               	rlcf	___awmod@divisor+1,f,c
  1346  0005A2  2A05               	incf	___awmod@counter,f,c
  1347  0005A4                     i2l330:
  1348  0005A4  AE04               	btfss	___awmod@divisor+1,7,c
  1349  0005A6  D7FA               	goto	i2l331
  1350  0005A8                     i2u36_40:
  1351  0005A8  5003               	movf	___awmod@divisor,w,c
  1352  0005AA  5C01               	subwf	___awmod@dividend,w,c
  1353  0005AC  5004               	movf	___awmod@divisor+1,w,c
  1354  0005AE  5802               	subwfb	___awmod@dividend+1,w,c
  1355  0005B0  A0D8               	btfss	status,0,c
  1356  0005B2  D004               	goto	i2l334
  1357  0005B4  5003               	movf	___awmod@divisor,w,c
  1358  0005B6  5E01               	subwf	___awmod@dividend,f,c
  1359  0005B8  5004               	movf	___awmod@divisor+1,w,c
  1360  0005BA  5A02               	subwfb	___awmod@dividend+1,f,c
  1361  0005BC                     i2l334:
  1362  0005BC  90D8               	bcf	status,0,c
  1363  0005BE  3204               	rrcf	___awmod@divisor+1,f,c
  1364  0005C0  3203               	rrcf	___awmod@divisor,f,c
  1365  0005C2  2E05               	decfsz	___awmod@counter,f,c
  1366  0005C4  D7F1               	goto	i2u36_40
  1367  0005C6                     i2l335:
  1368  0005C6  5006               	movf	___awmod@sign,w,c
  1369  0005C8  B4D8               	btfsc	status,2,c
  1370  0005CA  D004               	goto	i2l336
  1371  0005CC  6C01               	negf	___awmod@dividend,c
  1372  0005CE  1E02               	comf	___awmod@dividend+1,f,c
  1373  0005D0  B0D8               	btfsc	status,0,c
  1374  0005D2  2A02               	incf	___awmod@dividend+1,f,c
  1375  0005D4                     i2l336:
  1376  0005D4  C001  F001         	movff	___awmod@dividend,?___awmod
  1377  0005D8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1378  0005DC  0012               	return	
  1379  0005DE                     __end_of___awmod:
  1380                           	opt stack 0
  1381  0000                     pclatu	equ	0xFFB
  1382                           pclath	equ	0xFFA
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           intcon	equ	0xFF2
  1390                           postinc0	equ	0xFEE
  1391                           fsr0h	equ	0xFEA
  1392                           fsr0l	equ	0xFE9
  1393                           wreg	equ	0xFE8
  1394                           postdec1	equ	0xFE5
  1395                           fsr1h	equ	0xFE2
  1396                           fsr1l	equ	0xFE1
  1397                           postinc2	equ	0xFDE
  1398                           postdec2	equ	0xFDD
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           pclatu	equ	0xFFB
  1403                           pclath	equ	0xFFA
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           prodh	equ	0xFF4
  1409                           prodl	equ	0xFF3
  1410                           intcon	equ	0xFF2
  1411                           postinc0	equ	0xFEE
  1412                           fsr0h	equ	0xFEA
  1413                           fsr0l	equ	0xFE9
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1h	equ	0xFE2
  1417                           fsr1l	equ	0xFE1
  1418                           postinc2	equ	0xFDE
  1419                           postdec2	equ	0xFDD
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424                           	psect	rparam
  1425  0000                     pclatu	equ	0xFFB
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           fsr0h	equ	0xFEA
  1436                           fsr0l	equ	0xFE9
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1h	equ	0xFE2
  1440                           fsr1l	equ	0xFE1
  1441                           postinc2	equ	0xFDE
  1442                           postdec2	equ	0xFDD
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           status	equ	0xFD8
  1446                           
  1447                           	psect	temp
  1448  000054                     btemp:
  1449                           	opt stack 0
  1450  000054                     	ds	1
  1451  0000                     int$flags	set	btemp
  1452  0000                     wtemp6	set	btemp+1
  1453                           pclatu	equ	0xFFB
  1454                           pclath	equ	0xFFA
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           prodh	equ	0xFF4
  1460                           prodl	equ	0xFF3
  1461                           intcon	equ	0xFF2
  1462                           postinc0	equ	0xFEE
  1463                           fsr0h	equ	0xFEA
  1464                           fsr0l	equ	0xFE9
  1465                           wreg	equ	0xFE8
  1466                           postdec1	equ	0xFE5
  1467                           fsr1h	equ	0xFE2
  1468                           fsr1l	equ	0xFE1
  1469                           postinc2	equ	0xFDE
  1470                           postdec2	equ	0xFDD
  1471                           fsr2h	equ	0xFDA
  1472                           fsr2l	equ	0xFD9
  1473                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        296
    BSS         2
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      83
    BANK0           160     19      55
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_refreshShiftRegister

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0     203
                                              0 BANK0     19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 18    18      0     748
                                             62 COMRAM    18    18      0
                            ___awmod
               _refreshShiftRegister
 ---------------------------------------------------------------------------------
 (2) _refreshShiftRegister                                62    60      2     300
                                              0 COMRAM    62    60      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___awmod
   _refreshShiftRegister

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     104      21       12.7%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      37       5       34.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      20        0.0%
DATA                 0      0     18E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Dec 29 05:30:46 2017

                    _SSPSTATbits 000FC7                               l81 0316  
                             l73 02BE                               l74 02BE  
                             l83 031E                               l79 02FA  
                            _PR2 000FCB                              _isr 0008  
                   ___awmod@sign 0006                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                     __CFG_WDT$OFF 000000  
                           ?_isr 0001                      main@dotflag 0090  
                           _BRGH 007D62                             i2l66 01F8  
                           i2l90 051E                             i2l67 0256  
                           i2l92 0522                             _TMR2 000FCC  
                           _main 026C                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 0054  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000    __size_of_refreshShiftRegister 025A  
                          ??_isr 003F                            ?_main 0001  
                __end_of___awmod 05DE                            _CMCON 000FB4  
                          _T2CON 000FCA                            i2l330 05A4  
                          i2l331 059C                            i2l334 05BC  
                          i2l335 05C6                            i2l327 0582  
                          i2l336 05D4                            i2l328 058E  
                          _RCREG 000FAE                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _SSPIE 007CEB  
                          _TRISE 000F96                            _SSPIF 007CF3  
                          pclath 000FFA                            tablat 000FF5  
                          status 000FD8                            wtemp6 0055  
                __initialization 05DE                     __end_of_main 039C  
                         ??_main 0084                    __activetblptr 000000  
                         _ADCON1 000FC1          refreshShiftRegister@map 0037  
        refreshShiftRegister@ptr 0001                           _SPBRGH 000FB0  
                         _SSPADD 000FC8                           _SSPBUF 000FC9  
                      ??___awmod 0005                           _segMap 0060  
                ___awmod@divisor 0003                  ___awmod@counter 0005  
                   __pdataBIGRAM 0097                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                     __accesstop 0060          __end_of__initialization 0626  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                   __pidataBANK0 0630            refreshShiftRegister@i 003D  
                     __pnvCOMRAM 0053                          _BAUDCON 000FB8  
                        i2u31_40 0218     __end_of_refreshShiftRegister 026C  
                        i2u31_45 020E                          i2u32_40 0256  
                        i2u50_47 0232                          i2u27_44 0028  
                        i2u27_45 0022                          i2u51_47 023C  
                        i2u36_40 05A8                          i2u28_45 0094  
                        i2u52_47 025A                          i2u29_45 00BE  
                        i2u53_47 0264                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5                          _SSPSTAT 000FC7  
                        __Hparam 0000                          __Lparam 0000  
                        ___awmod 056E                          __pcinit 05DE  
                        __ramtop 0800                          __ptext0 026C  
                        __ptext2 0012                          __ptext3 056E  
                   __size_of_isr 0566                 ___awmod@dividend 0001  
              main@digitSelector 0094                   __pintcode_body 04A0  
           end_of_initialization 0626                          int_func 04A0  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     main@RxData 0096             _refreshShiftRegister 0012  
                  __pidataBIGRAM 039C              start_initialization 05DE  
                    __end_of_isr 056E            ?_refreshShiftRegister 0001  
                    __pdataBANK0 0060                      __pbssCOMRAM 0051  
                  __pcstackBANK0 0084  refreshShiftRegister@ledSelector 003B  
                      __pintcode 0008                         ?___awmod 0001  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                       _LATCbits 000F8B                         _PIE1bits 000F9D  
         ??_refreshShiftRegister 0003                         _PIR1bits 000F9E  
                      copy_data0 05F2                        copy_data1 0616  
                       __Hrparam 0000                         __Lrparam 0000  
               __size_of___awmod 0070                         _digitPtr 0051  
                       _led_stat 0053                         _fontList 0097  
                  __size_of_main 0130                         int$flags 0054  
                     _INTCONbits 000FF2                         intlevel2 0000  
                    _SSPCON2bits 000FC5  
