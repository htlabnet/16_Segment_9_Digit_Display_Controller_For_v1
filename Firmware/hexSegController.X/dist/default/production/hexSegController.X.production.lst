

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 03 18:32:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4553 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataBIGRAM
    64  000AFA                     __pidataBIGRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _fontList
    68  000AFA  0000               	dw	0
    69  000AFC  0000               	dw	0
    70  000AFE  0000               	dw	0
    71  000B00  0000               	dw	0
    72  000B02  0000               	dw	0
    73  000B04  0000               	dw	0
    74  000B06  0000               	dw	0
    75  000B08  0000               	dw	0
    76  000B0A  0000               	dw	0
    77  000B0C  0000               	dw	0
    78  000B0E  0000               	dw	0
    79  000B10  0000               	dw	0
    80  000B12  0000               	dw	0
    81  000B14  0000               	dw	0
    82  000B16  0000               	dw	0
    83  000B18  0000               	dw	0
    84  000B1A  0000               	dw	0
    85  000B1C  0000               	dw	0
    86  000B1E  0000               	dw	0
    87  000B20  0000               	dw	0
    88  000B22  0000               	dw	0
    89  000B24  0000               	dw	0
    90  000B26  0000               	dw	0
    91  000B28  0000               	dw	0
    92  000B2A  0000               	dw	0
    93  000B2C  0000               	dw	0
    94  000B2E  0000               	dw	0
    95  000B30  0000               	dw	0
    96  000B32  0000               	dw	0
    97  000B34  0000               	dw	0
    98  000B36  0000               	dw	0
    99  000B38  0000               	dw	0
   100  000B3A  0000               	dw	0
   101  000B3C  0000               	dw	0
   102  000B3E  0000               	dw	0
   103  000B40  0000               	dw	0
   104  000B42  0000               	dw	0
   105  000B44  0000               	dw	0
   106  000B46  0000               	dw	0
   107  000B48  0000               	dw	0
   108  000B4A  0000               	dw	0
   109  000B4C  0000               	dw	0
   110  000B4E  0000               	dw	0
   111  000B50  0000               	dw	0
   112  000B52  0000               	dw	0
   113  000B54  0000               	dw	0
   114  000B56  0000               	dw	0
   115  000B58  0000               	dw	0
   116  000B5A  0000               	dw	0
   117  000B5C  0000               	dw	0
   118  000B5E  0000               	dw	0
   119  000B60  0000               	dw	0
   120  000B62  0000               	dw	0
   121  000B64  0000               	dw	0
   122  000B66  0000               	dw	0
   123  000B68  0000               	dw	0
   124  000B6A  0000               	dw	0
   125  000B6C  0000               	dw	0
   126  000B6E  0000               	dw	0
   127  000B70  0000               	dw	0
   128  000B72  0000               	dw	0
   129  000B74  0000               	dw	0
   130  000B76  0000               	dw	0
   131  000B78  0000               	dw	0
   132  000B7A  0000               	dw	0
   133  000B7C  0000               	dw	0
   134  000B7E  1812               	dw	6162
   135  000B80  0000               	dw	0
   136  000B82  0880               	dw	2176
   137  000B84  0000               	dw	0
   138  000B86  0000               	dw	0
   139  000B88  0000               	dw	0
   140  000B8A  CC33               	dw	52275
   141  000B8C  0000               	dw	0
   142  000B8E  7BA9               	dw	31657
   143  000B90  0000               	dw	0
   144  000B92  B43B               	dw	46139
   145  000B94  0000               	dw	0
   146  000B96  0080               	dw	128
   147  000B98  0000               	dw	0
   148  000B9A  9000               	dw	36864
   149  000B9C  0000               	dw	0
   150  000B9E  2400               	dw	9216
   151  000BA0  0000               	dw	0
   152  000BA2  FF00               	dw	65280
   153  000BA4  0000               	dw	0
   154  000BA6  4B00               	dw	19200
   155  000BA8  0000               	dw	0
   156  000BAA  0000               	dw	0
   157  000BAC  0000               	dw	0
   158  000BAE  0300               	dw	768
   159  000BB0  0000               	dw	0
   160  000BB2  0000               	dw	0
   161  000BB4  0000               	dw	0
   162  000BB6  3000               	dw	12288
   163  000BB8  0000               	dw	0
   164  000BBA  00FF               	dw	255
   165  000BBC  0000               	dw	0
   166  000BBE  4800               	dw	18432
   167  000BC0  0000               	dw	0
   168  000BC2  0377               	dw	887
   169  000BC4  0000               	dw	0
   170  000BC6  033F               	dw	831
   171  000BC8  0000               	dw	0
   172  000BCA  038C               	dw	908
   173  000BCC  0000               	dw	0
   174  000BCE  03BB               	dw	955
   175  000BD0  0000               	dw	0
   176  000BD2  03FB               	dw	1019
   177  000BD4  0000               	dw	0
   178  000BD6  008F               	dw	143
   179  000BD8  0000               	dw	0
   180  000BDA  03FF               	dw	1023
   181  000BDC  0000               	dw	0
   182  000BDE  03BF               	dw	959
   183  000BE0  0000               	dw	0
   184  000BE2  0000               	dw	0
   185  000BE4  0000               	dw	0
   186  000BE6  0000               	dw	0
   187  000BE8  0000               	dw	0
   188  000BEA  9000               	dw	36864
   189  000BEC  0000               	dw	0
   190  000BEE  0330               	dw	816
   191  000BF0  0000               	dw	0
   192  000BF2  2400               	dw	9216
   193  000BF4  0000               	dw	0
   194  000BF6  1013               	dw	4115
   195  000BF8  0000               	dw	0
   196  000BFA  0000               	dw	0
   197  000BFC  0000               	dw	0
   198  000BFE  03CF               	dw	975
   199  000C00  0000               	dw	0
   200  000C02  91F3               	dw	37363
   201  000C04  0000               	dw	0
   202  000C06  00F3               	dw	243
   203  000C08  0000               	dw	0
   204  000C0A  037C               	dw	892
   205  000C0C  0000               	dw	0
   206  000C0E  03F3               	dw	1011
   207  000C10  0000               	dw	0
   208  000C12  03C3               	dw	963
   209  000C14  0000               	dw	0
   210  000C16  02FB               	dw	763
   211  000C18  0000               	dw	0
   212  000C1A  03CC               	dw	972
   213  000C1C  0000               	dw	0
   214  000C1E  4833               	dw	18483
   215  000C20  0000               	dw	0
   216  000C22  4813               	dw	18451
   217  000C24  0000               	dw	0
   218  000C26  91C0               	dw	37312
   219  000C28  0000               	dw	0
   220  000C2A  00F0               	dw	240
   221  000C2C  0000               	dw	0
   222  000C2E  14CC               	dw	5324
   223  000C30  0000               	dw	0
   224  000C32  84CC               	dw	33996
   225  000C34  0000               	dw	0
   226  000C36  00FF               	dw	255
   227  000C38  0000               	dw	0
   228  000C3A  03C7               	dw	967
   229  000C3C  0000               	dw	0
   230  000C3E  80FF               	dw	33023
   231  000C40  0000               	dw	0
   232  000C42  83C7               	dw	33735
   233  000C44  0000               	dw	0
   234  000C46  03BB               	dw	955
   235  000C48  0000               	dw	0
   236  000C4A  4803               	dw	18435
   237  000C4C  0000               	dw	0
   238  000C4E  00FC               	dw	252
   239  000C50  0000               	dw	0
   240  000C52  30C0               	dw	12480
   241  000C54  0000               	dw	0
   242  000C56  A0CC               	dw	41164
   243  000C58  0000               	dw	0
   244  000C5A  B400               	dw	46080
   245  000C5C  0000               	dw	0
   246  000C5E  5400               	dw	21504
   247  000C60  0000               	dw	0
   248  000C62  3033               	dw	12339
   249  000C64  0000               	dw	0
   250  000C66  00D1               	dw	209
   251  000C68  0000               	dw	0
   252  000C6A  8400               	dw	33792
   253  000C6C  0000               	dw	0
   254  000C6E  0003               	dw	3
   255  000C70  0000               	dw	0
   256  000C72  0030               	dw	48
   257  000C74  0000               	dw	0
   258  000C76  AB00               	dw	43776
   259  000C78  0000               	dw	0
   260  000C7A  34C0               	dw	13504
   261  000C7C  0000               	dw	0
   262  000C7E  0B7B               	dw	2939
   263  000C80  0000               	dw	0
   264  000C82  5703               	dw	22275
   265  000C84  0000               	dw	0
   266  000C86  0000               	dw	0
   267  000C88  0000               	dw	0
   268  000C8A  0000               	dw	0
   269  000C8C  0000               	dw	0
   270  000C8E  0000               	dw	0
   271  000C90  0000               	dw	0
   272  000C92  FFFF               	dw	65535
   273  000C94  0000               	dw	0
   274  000C96  0001               	dw	1
   275  000C98  0000               	dw	0
   276  000C9A  0002               	dw	2
   277  000C9C  0000               	dw	0
   278  000C9E  0004               	dw	4
   279  000CA0  0000               	dw	0
   280  000CA2  0008               	dw	8
   281  000CA4  0000               	dw	0
   282  000CA6  0020               	dw	32
   283  000CA8  0000               	dw	0
   284  000CAA  0010               	dw	16
   285  000CAC  0000               	dw	0
   286  000CAE  0040               	dw	64
   287  000CB0  0000               	dw	0
   288  000CB2  0080               	dw	128
   289  000CB4  0000               	dw	0
   290  000CB6  0800               	dw	2048
   291  000CB8  0000               	dw	0
   292  000CBA  1000               	dw	4096
   293  000CBC  0000               	dw	0
   294  000CBE  0200               	dw	512
   295  000CC0  0000               	dw	0
   296  000CC2  8000               	dw	32768
   297  000CC4  0000               	dw	0
   298  000CC6  4000               	dw	16384
   299  000CC8  0000               	dw	0
   300  000CCA  2000               	dw	8192
   301  000CCC  0000               	dw	0
   302  000CCE  0100               	dw	256
   303  000CD0  0000               	dw	0
   304  000CD2  0400               	dw	1024
   305  000CD4  0000               	dw	0
   306  000CD6  0800               	dw	2048
   307  000CD8  0000               	dw	0
   308  000CDA  1800               	dw	6144
   309  000CDC  0000               	dw	0
   310  000CDE  1A00               	dw	6656
   311  000CE0  0000               	dw	0
   312  000CE2  9A00               	dw	39424
   313  000CE4  0000               	dw	0
   314  000CE6  DA00               	dw	55808
   315  000CE8  0000               	dw	0
   316  000CEA  FA00               	dw	64000
   317  000CEC  0000               	dw	0
   318  000CEE  FB00               	dw	64256
   319  000CF0  0000               	dw	0
   320  000CF2  FF00               	dw	65280
   321  000CF4  0000               	dw	0
   322  000CF6  0000               	dw	0
   323  000CF8  0000               	dw	0
   324  000CFA  0000               	dw	0
   325  000CFC  0000               	dw	0
   326                           
   327                           	psect	idataBANK0
   328  0011BA                     __pidataBANK0:
   329                           	opt stack 0
   330                           
   331                           ;initializer for _segMap
   332  0011BA  00FF               	dw	255
   333  0011BC  0003               	dw	3
   334  0011BE  00FF               	dw	255
   335  0011C0  0003               	dw	3
   336  0011C2  00FF               	dw	255
   337  0011C4  0003               	dw	3
   338  0011C6  00FF               	dw	255
   339  0011C8  0003               	dw	3
   340  0011CA  00FF               	dw	255
   341  0011CC  0003               	dw	3
   342  0011CE  00FF               	dw	255
   343  0011D0  0003               	dw	3
   344  0011D2  00FF               	dw	255
   345  0011D4  0003               	dw	3
   346  0011D6  00FF               	dw	255
   347  0011D8  0003               	dw	3
   348  0011DA  00FF               	dw	255
   349  0011DC  0003               	dw	3
   350                           
   351                           	psect	smallconst
   352  000800                     __psmallconst:
   353                           	opt stack 0
   354  000800  00                 	db	0
   355  000801                     _MESSAGE_LENGTH:
   356                           	opt stack 0
   357  000801  0052               	dw	82
   358  000803                     __end_of_MESSAGE_LENGTH:
   359                           	opt stack 0
   360  000803                     _DEMO_DOTFLAG:
   361                           	opt stack 0
   362  000803  20                 	db	32
   363  000804  20                 	db	32
   364  000805  20                 	db	32
   365  000806  20                 	db	32
   366  000807  20                 	db	32
   367  000808  20                 	db	32
   368  000809  20                 	db	32
   369  00080A  20                 	db	32
   370  00080B  20                 	db	32
   371  00080C  20                 	db	32
   372  00080D  20                 	db	32
   373  00080E  20                 	db	32
   374  00080F  20                 	db	32
   375  000810  20                 	db	32
   376  000811  20                 	db	32
   377  000812  20                 	db	32
   378  000813  20                 	db	32
   379  000814  20                 	db	32
   380  000815  20                 	db	32
   381  000816  20                 	db	32
   382  000817  20                 	db	32
   383  000818  20                 	db	32
   384  000819  20                 	db	32
   385  00081A  20                 	db	32
   386  00081B  20                 	db	32
   387  00081C  20                 	db	32
   388  00081D  20                 	db	32
   389  00081E  2E                 	db	46
   390  00081F  20                 	db	32
   391  000820  20                 	db	32
   392  000821  20                 	db	32
   393  000822  20                 	db	32
   394  000823  20                 	db	32
   395  000824  20                 	db	32
   396  000825  20                 	db	32
   397  000826  20                 	db	32
   398  000827  20                 	db	32
   399  000828  20                 	db	32
   400  000829  20                 	db	32
   401  00082A  20                 	db	32
   402  00082B  20                 	db	32
   403  00082C  20                 	db	32
   404  00082D  20                 	db	32
   405  00082E  20                 	db	32
   406  00082F  20                 	db	32
   407  000830  20                 	db	32
   408  000831  20                 	db	32
   409  000832  20                 	db	32
   410  000833  20                 	db	32
   411  000834  20                 	db	32
   412  000835  20                 	db	32
   413  000836  20                 	db	32
   414  000837  20                 	db	32
   415  000838  20                 	db	32
   416  000839  20                 	db	32
   417  00083A  20                 	db	32
   418  00083B  20                 	db	32
   419  00083C  20                 	db	32
   420  00083D  20                 	db	32
   421  00083E  20                 	db	32
   422  00083F  20                 	db	32
   423  000840  20                 	db	32
   424  000841  20                 	db	32
   425  000842  20                 	db	32
   426  000843  20                 	db	32
   427  000844  20                 	db	32
   428  000845  20                 	db	32
   429  000846  20                 	db	32
   430  000847  20                 	db	32
   431  000848  20                 	db	32
   432  000849  20                 	db	32
   433  00084A  20                 	db	32
   434  00084B  20                 	db	32
   435  00084C  20                 	db	32
   436  00084D  20                 	db	32
   437  00084E  20                 	db	32
   438  00084F  20                 	db	32
   439  000850  20                 	db	32
   440  000851  20                 	db	32
   441  000852  20                 	db	32
   442  000853  20                 	db	32
   443  000854  00                 	db	0
   444  000855                     __end_of_DEMO_DOTFLAG:
   445                           	opt stack 0
   446  000855                     _DEMO_MESSAGE:
   447                           	opt stack 0
   448  000855  4D                 	db	77
   449  000856  41                 	db	65
   450  000857  4B                 	db	75
   451  000858  45                 	db	69
   452  000859  52                 	db	82
   453  00085A  20                 	db	32
   454  00085B  46                 	db	70
   455  00085C  41                 	db	65
   456  00085D  49                 	db	73
   457  00085E  52                 	db	82
   458  00085F  45                 	db	69
   459  000860  20                 	db	32
   460  000861  54                 	db	84
   461  000862  4F                 	db	79
   462  000863  4B                 	db	75
   463  000864  59                 	db	89
   464  000865  4F                 	db	79
   465  000866  20                 	db	32
   466  000867  32                 	db	50
   467  000868  30                 	db	48
   468  000869  31                 	db	49
   469  00086A  38                 	db	56
   470  00086B  20                 	db	32
   471  00086C  48                 	db	72
   472  00086D  54                 	db	84
   473  00086E  4C                 	db	76
   474  00086F  41                 	db	65
   475  000870  42                 	db	66
   476  000871  4E                 	db	78
   477  000872  45                 	db	69
   478  000873  54                 	db	84
   479  000874  20                 	db	32
   480  000875  42                 	db	66
   481  000876  4F                 	db	79
   482  000877  4F                 	db	79
   483  000878  54                 	db	84
   484  000879  48                 	db	72
   485  00087A  21                 	db	33
   486  00087B  20                 	db	32
   487  00087C  54                 	db	84
   488  00087D  48                 	db	72
   489  00087E  49                 	db	73
   490  00087F  53                 	db	83
   491  000880  20                 	db	32
   492  000881  49                 	db	73
   493  000882  53                 	db	83
   494  000883  20                 	db	32
   495  000884  31                 	db	49
   496  000885  36                 	db	54
   497  000886  20                 	db	32
   498  000887  53                 	db	83
   499  000888  45                 	db	69
   500  000889  47                 	db	71
   501  00088A  4D                 	db	77
   502  00088B  45                 	db	69
   503  00088C  4E                 	db	78
   504  00088D  54                 	db	84
   505  00088E  20                 	db	32
   506  00088F  39                 	db	57
   507  000890  20                 	db	32
   508  000891  44                 	db	68
   509  000892  49                 	db	73
   510  000893  47                 	db	71
   511  000894  49                 	db	73
   512  000895  54                 	db	84
   513  000896  20                 	db	32
   514  000897  44                 	db	68
   515  000898  49                 	db	73
   516  000899  53                 	db	83
   517  00089A  50                 	db	80
   518  00089B  4C                 	db	76
   519  00089C  41                 	db	65
   520  00089D  59                 	db	89
   521  00089E  20                 	db	32
   522  00089F  20                 	db	32
   523  0008A0  20                 	db	32
   524  0008A1  20                 	db	32
   525  0008A2  20                 	db	32
   526  0008A3  20                 	db	32
   527  0008A4  20                 	db	32
   528  0008A5  20                 	db	32
   529  0008A6  00                 	db	0
   530  0008A7                     __end_of_DEMO_MESSAGE:
   531                           	opt stack 0
   532  0008A7  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	nvCOMRAM
   535  000056                     __pnvCOMRAM:
   536                           	opt stack 0
   537  000056                     _showDemoMessage:
   538                           	opt stack 0
   539  000056                     	ds	1
   540  000057                     _led_stat:
   541                           	opt stack 0
   542  000057                     	ds	1
   543  0000                     _SSPBUF	set	4041
   544  0000                     _SSPCON2bits	set	4037
   545  0000                     _SSPCON1	set	4038
   546  0000                     _SSPADD	set	4040
   547  0000                     _SSPSTAT	set	4039
   548  0000                     _SSPSTATbits	set	4039
   549  0000                     _SSPCON2	set	4037
   550  0000                     _RCREG	set	4014
   551  0000                     _PIR1bits	set	3998
   552  0000                     _SPBRG	set	4015
   553  0000                     _SPBRGH	set	4016
   554  0000                     _BAUDCON	set	4024
   555  0000                     _RCSTA	set	4011
   556  0000                     _INTCONbits	set	4082
   557  0000                     _PIE1bits	set	3997
   558  0000                     _PR2	set	4043
   559  0000                     _TMR2	set	4044
   560  0000                     _T2CON	set	4042
   561  0000                     _LATAbits	set	3977
   562  0000                     _LATCbits	set	3979
   563  0000                     _TRISE	set	3990
   564  0000                     _TRISD	set	3989
   565  0000                     _TRISC	set	3988
   566  0000                     _TRISB	set	3987
   567  0000                     _TRISA	set	3986
   568  0000                     _CMCON	set	4020
   569  0000                     _ADCON1	set	4033
   570  0000                     _LATBbits	set	3978
   571  0000                     _SSPIE	set	31979
   572  0000                     _SSPIF	set	31987
   573  0000                     _BRGH	set	32098
   574                           
   575                           ; #config settings
   576  0000                     
   577                           	psect	cinit
   578  0010EE                     __pcinit:
   579                           	opt stack 0
   580  0010EE                     start_initialization:
   581                           	opt stack 0
   582  0010EE                     __initialization:
   583                           	opt stack 0
   584                           
   585                           ; Initialize objects allocated to BIGRAM (516 bytes)
   586                           ; load TBLPTR registers with __pidataBIGRAM
   587  0010EE  0EFA               	movlw	low __pidataBIGRAM
   588  0010F0  6EF6               	movwf	tblptrl,c
   589  0010F2  0E0A               	movlw	high __pidataBIGRAM
   590  0010F4  6EF7               	movwf	tblptrh,c
   591  0010F6  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   592  0010F8  6EF8               	movwf	tblptru,c
   593  0010FA  EE00  F0A9         	lfsr	0,__pdataBIGRAM
   594  0010FE  EE12 F004          	lfsr	1,516
   595  001102                     copy_data0:
   596  001102  0009               	tblrd		*+
   597  001104  CFF5 FFEE          	movff	tablat,postinc0
   598  001108  50E5               	movf	postdec1,w,c
   599  00110A  50E1               	movf	fsr1l,w,c
   600  00110C  E1FA               	bnz	copy_data0
   601  00110E  50E2               	movf	fsr1h,w,c
   602  001110  E1F8               	bnz	copy_data0
   603                           
   604                           ; Initialize objects allocated to BANK0 (36 bytes)
   605                           ; load TBLPTR registers with __pidataBANK0
   606  001112  0EBA               	movlw	low __pidataBANK0
   607  001114  6EF6               	movwf	tblptrl,c
   608  001116  0E11               	movlw	high __pidataBANK0
   609  001118  6EF7               	movwf	tblptrh,c
   610  00111A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   611  00111C  6EF8               	movwf	tblptru,c
   612  00111E  EE00  F060         	lfsr	0,__pdataBANK0
   613  001122  EE10 F024          	lfsr	1,36
   614  001126                     copy_data1:
   615  001126  0009               	tblrd		*+
   616  001128  CFF5 FFEE          	movff	tablat,postinc0
   617  00112C  50E5               	movf	postdec1,w,c
   618  00112E  50E1               	movf	fsr1l,w,c
   619  001130  E1FA               	bnz	copy_data1
   620                           
   621                           ; Clear objects allocated to BANK0 (19 bytes)
   622  001132  EE00  F084         	lfsr	0,__pbssBANK0
   623  001136  0E13               	movlw	19
   624  001138                     clear_0:
   625  001138  6AEE               	clrf	postinc0,c
   626  00113A  06E8               	decf	wreg,f,c
   627  00113C  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (5 bytes)
   630  00113E  6A55               	clrf	(__pbssCOMRAM+4)& (0+255),c
   631  001140  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   632  001142  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   633  001144  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   634  001146  6A51               	clrf	__pbssCOMRAM& (0+255),c
   635  001148                     end_of_initialization:
   636                           	opt stack 0
   637  001148                     __end_of__initialization:
   638                           	opt stack 0
   639  001148  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   640  00114A  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   641  00114C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   642  00114E  6EF8               	movwf	tblptru,c
   643  001150  0E08               	movlw	high __Lsmallconst
   644  001152  6EF7               	movwf	tblptrh,c
   645  001154  0100               	movlb	0
   646  001156  EF7F  F006         	goto	_main	;jump to C main() function
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1h	equ	0xFE2
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssCOMRAM
   658  000051                     __pbssCOMRAM:
   659                           	opt stack 0
   660  000051                     _writeItr:
   661                           	opt stack 0
   662  000051                     	ds	2
   663  000053                     _divisor:
   664                           	opt stack 0
   665  000053                     	ds	2
   666  000055                     _digitPtr:
   667                           	opt stack 0
   668  000055                     	ds	1
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1h	equ	0xFE2
   677                           fsr1l	equ	0xFE1
   678                           
   679                           	psect	bssBANK0
   680  000084                     __pbssBANK0:
   681                           	opt stack 0
   682  000084                     _tmrIsr:
   683                           	opt stack 0
   684  000084                     	ds	1
   685  000085                     _disdot:
   686                           	opt stack 0
   687  000085                     	ds	9
   688  00008E                     _display:
   689                           	opt stack 0
   690  00008E                     	ds	9
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           postdec1	equ	0xFE5
   698                           fsr1h	equ	0xFE2
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	dataBANK0
   702  000060                     __pdataBANK0:
   703                           	opt stack 0
   704  000060                     _segMap:
   705                           	opt stack 0
   706  000060                     	ds	36
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1h	equ	0xFE2
   715                           fsr1l	equ	0xFE1
   716                           
   717                           	psect	dataBIGRAM
   718  0000A9                     __pdataBIGRAM:
   719                           	opt stack 0
   720  0000A9                     _fontList:
   721                           	opt stack 0
   722  0000A9                     	ds	516
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1h	equ	0xFE2
   731                           fsr1l	equ	0xFE1
   732                           
   733                           	psect	cstackBANK0
   734  000097                     __pcstackBANK0:
   735                           	opt stack 0
   736  000097                     ??_main:
   737                           
   738                           ; 1 bytes @ 0x0
   739  000097                     	ds	12
   740  0000A3                     main@dotflag:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0xC
   744  0000A3                     	ds	4
   745  0000A7                     main@digitSelector:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x10
   749  0000A7                     	ds	1
   750  0000A8                     main@RxData:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x11
   754  0000A8                     	ds	1
   755                           tblptru	equ	0xFF8
   756                           tblptrh	equ	0xFF7
   757                           tblptrl	equ	0xFF6
   758                           tablat	equ	0xFF5
   759                           postinc0	equ	0xFEE
   760                           wreg	equ	0xFE8
   761                           postdec1	equ	0xFE5
   762                           fsr1h	equ	0xFE2
   763                           fsr1l	equ	0xFE1
   764                           
   765                           	psect	cstackCOMRAM
   766  000001                     __pcstackCOMRAM:
   767                           	opt stack 0
   768  000001                     ?___awmod:
   769                           	opt stack 0
   770  000001                     setMsgWithDot@message:
   771                           	opt stack 0
   772  000001                     refreshShiftRegister@ptr:
   773                           	opt stack 0
   774  000001                     ___awmod@dividend:
   775                           	opt stack 0
   776  000001                     strncpy@to:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     ??_refreshShiftRegister:
   782  000003                     setMsgWithDot@dotFlag:
   783                           	opt stack 0
   784  000003                     ___awmod@divisor:
   785                           	opt stack 0
   786  000003                     strncpy@from:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x2
   790  000003                     	ds	2
   791  000005                     ??_setMsgWithDot:
   792  000005                     ___awmod@counter:
   793                           	opt stack 0
   794  000005                     strncpy@size:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x4
   798  000005                     	ds	1
   799  000006                     ___awmod@sign:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x5
   803  000006                     	ds	1
   804  000007                     strncpy@cp:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x6
   808  000007                     	ds	14
   809  000015                     setMsgWithDot@i:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x14
   813  000015                     	ds	2
   814  000017                     ??_handleMessage:
   815                           
   816                           ; 1 bytes @ 0x16
   817  000017                     	ds	32
   818  000037                     refreshShiftRegister@map:
   819                           	opt stack 0
   820                           
   821                           ; 4 bytes @ 0x36
   822  000037                     	ds	4
   823  00003B                     refreshShiftRegister@ledSelector:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x3A
   827  00003B                     	ds	2
   828  00003D                     refreshShiftRegister@i:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x3C
   832  00003D                     	ds	2
   833  00003F                     ??_isr:
   834                           
   835                           ; 1 bytes @ 0x3E
   836  00003F                     	ds	18
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           postdec1	equ	0xFE5
   844                           fsr1h	equ	0xFE2
   845                           fsr1l	equ	0xFE1
   846                           
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 102 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  dotflag         4   12[BANK0 ] unsigned long 
   857 ;;  RxData          1   17[BANK0 ] unsigned char 
   858 ;;  digitSelecto    1   16[BANK0 ] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   868 ;;      Params:         0       0       0       0       0       0       0       0       0
   869 ;;      Locals:         0       6       0       0       0       0       0       0       0
   870 ;;      Temps:          0      12       0       0       0       0       0       0       0
   871 ;;      Totals:         0      18       0       0       0       0       0       0       0
   872 ;;Total ram usage:       18 bytes
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		Startup code after reset
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text0
   882  000CFE                     __ptext0:
   883                           	opt stack 0
   884  000CFE                     _main:
   885                           	opt stack 28
   886                           
   887                           ;main.c: 104: ADCON1 = 0b00001111;
   888                           
   889                           ;incstack = 0
   890  000CFE  0E0F               	movlw	15
   891  000D00  6EC1               	movwf	4033,c	;volatile
   892                           
   893                           ;main.c: 105: CMCON = 0b00000111;
   894  000D02  0E07               	movlw	7
   895  000D04  6EB4               	movwf	4020,c	;volatile
   896                           
   897                           ;main.c: 106: TRISA = 0b00000000;
   898  000D06  0E00               	movlw	0
   899  000D08  6E92               	movwf	3986,c	;volatile
   900                           
   901                           ;main.c: 107: TRISB = 0b00000000;
   902  000D0A  0E00               	movlw	0
   903  000D0C  6E93               	movwf	3987,c	;volatile
   904                           
   905                           ;main.c: 108: TRISC = 0b10000000;
   906  000D0E  0E80               	movlw	128
   907  000D10  6E94               	movwf	3988,c	;volatile
   908                           
   909                           ;main.c: 109: TRISD = 0b00000000;
   910  000D12  0E00               	movlw	0
   911  000D14  6E95               	movwf	3989,c	;volatile
   912                           
   913                           ;main.c: 110: TRISE = 0b00000000;
   914  000D16  0E00               	movlw	0
   915  000D18  6E96               	movwf	3990,c	;volatile
   916                           
   917                           ;main.c: 112: LATCbits.LATC0 = 0;
   918  000D1A  908B               	bcf	3979,0,c	;volatile
   919                           
   920                           ;main.c: 113: LATCbits.LATC1 = 1;
   921  000D1C  828B               	bsf	3979,1,c	;volatile
   922                           
   923                           ;main.c: 115: LATCbits.LATC2 = 0;
   924  000D1E  948B               	bcf	3979,2,c	;volatile
   925                           
   926                           ;main.c: 118: LATAbits.LATA4 = 0;
   927  000D20  9889               	bcf	3977,4,c	;volatile
   928                           
   929                           ;main.c: 119: LATAbits.LATA5 = 0;
   930  000D22  9A89               	bcf	3977,5,c	;volatile
   931                           
   932                           ;main.c: 130: T2CON = 0;
   933  000D24  0E00               	movlw	0
   934  000D26  6ECA               	movwf	4042,c	;volatile
   935                           
   936                           ;main.c: 131: TMR2 = 0;
   937  000D28  0E00               	movlw	0
   938  000D2A  6ECC               	movwf	4044,c	;volatile
   939                           
   940                           ;main.c: 132: PR2 = 125;
   941  000D2C  0E7D               	movlw	125
   942  000D2E  6ECB               	movwf	4043,c	;volatile
   943                           
   944                           ;main.c: 133: T2CON = 0b01111101;
   945  000D30  0E7D               	movlw	125
   946  000D32  6ECA               	movwf	4042,c	;volatile
   947                           
   948                           ;main.c: 136: PIE1bits.TMR2IE = 1;
   949  000D34  829D               	bsf	3997,1,c	;volatile
   950                           
   951                           ;main.c: 137: INTCONbits.PEIE = 1;
   952  000D36  8CF2               	bsf	intcon,6,c	;volatile
   953                           
   954                           ;main.c: 138: INTCONbits.GIE = 1;
   955  000D38  8EF2               	bsf	intcon,7,c	;volatile
   956                           
   957                           ;main.c: 141: RCSTA = 0b10010000;
   958  000D3A  0E90               	movlw	144
   959  000D3C  6EAB               	movwf	4011,c	;volatile
   960                           
   961                           ;main.c: 142: BAUDCON = 0b00001000;
   962  000D3E  0E08               	movlw	8
   963  000D40  6EB8               	movwf	4024,c	;volatile
   964                           
   965                           ;main.c: 143: SPBRGH = 0;
   966  000D42  0E00               	movlw	0
   967  000D44  6EB0               	movwf	4016,c	;volatile
   968                           
   969                           ;main.c: 144: BRGH = 0;
   970  000D46  94AC               	bcf	4012,2,c	;volatile
   971                           
   972                           ;main.c: 145: SPBRG = 129;
   973  000D48  0E81               	movlw	129
   974  000D4A  6EAF               	movwf	4015,c	;volatile
   975                           
   976                           ;main.c: 147: led_stat = 0b11110011;
   977  000D4C  0EF3               	movlw	243
   978  000D4E  6E57               	movwf	_led_stat,c
   979                           
   980                           ;main.c: 149: uint8_t RxData;
   981                           ;main.c: 150: uint8_t digitSelector;
   982                           ;main.c: 151: uint32_t dotflag;
   983                           ;main.c: 154: showDemoMessage = 1;
   984  000D50  0E01               	movlw	1
   985  000D52  6E56               	movwf	_showDemoMessage,c
   986  000D54                     
   987                           ;main.c: 158: if (PIR1bits.RCIF) {
   988  000D54  AA9E               	btfss	3998,5,c	;volatile
   989  000D56  D064               	goto	l95
   990                           
   991                           ;main.c: 159: PIR1bits.RCIF = 0;
   992  000D58  9A9E               	bcf	3998,5,c	;volatile
   993                           
   994                           ;main.c: 160: RxData = RCREG;
   995  000D5A  CFAE F0A8          	movff	4014,main@RxData	;volatile
   996                           
   997                           ;main.c: 163: if ((RxData & 0b11100000) == 0b11100000) {
   998  000D5E  0100               	movlb	0	; () banked
   999  000D60  51A8               	movf	main@RxData& (0+255),w,b
  1000  000D62  0BE0               	andlw	224
  1001  000D64  0AE0               	xorlw	224
  1002  000D66  A4D8               	btfss	status,2,c
  1003  000D68  D05B               	goto	l95
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;main.c: 164: digitSelector = (RxData & 0b00001111);
  1007  000D6A  51A8               	movf	main@RxData& (0+255),w,b
  1008  000D6C  0B0F               	andlw	15
  1009  000D6E  6FA7               	movwf	main@digitSelector& (0+255),b
  1010                           
  1011                           ;main.c: 165: dotflag = (RxData & 0b00010000) >> 4;
  1012  000D70  C0A8  F097         	movff	main@RxData,??_main
  1013  000D74  3B97               	swapf	??_main& (0+255),f,b
  1014  000D76  0E0F               	movlw	15
  1015  000D78  1797               	andwf	??_main& (0+255),f,b
  1016  000D7A  0E01               	movlw	1
  1017  000D7C  1797               	andwf	??_main& (0+255),f,b
  1018  000D7E  5197               	movf	??_main& (0+255),w,b
  1019  000D80  6FA3               	movwf	main@dotflag& (0+255),b
  1020  000D82  6BA4               	clrf	(main@dotflag+1)& (0+255),b
  1021  000D84  6BA5               	clrf	(main@dotflag+2)& (0+255),b
  1022  000D86  6BA6               	clrf	(main@dotflag+3)& (0+255),b
  1023  000D88                     
  1024                           ; BSR set to: 0
  1025  000D88  AA9E               	btfss	3998,5,c	;volatile
  1026  000D8A  D7FE               	goto	l97
  1027                           
  1028                           ;main.c: 167: PIR1bits.RCIF = 0;
  1029  000D8C  9A9E               	bcf	3998,5,c	;volatile
  1030                           
  1031                           ;main.c: 168: RxData = RCREG;
  1032  000D8E  CFAE F0A8          	movff	4014,main@RxData	;volatile
  1033                           
  1034                           ;main.c: 169: if (digitSelector > 8) continue;
  1035  000D92  0E08               	movlw	8
  1036  000D94  0100               	movlb	0	; () banked
  1037  000D96  65A7               	cpfsgt	main@digitSelector& (0+255),b
  1038  000D98  D001               	goto	l99
  1039  000D9A  D7DC               	goto	l93
  1040  000D9C                     l99:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 170: if (RxData > 0b01111111) RxData = ~RxData;
  1044                           
  1045                           ; BSR set to: 0
  1046  000D9C  0E7F               	movlw	127
  1047  000D9E  65A8               	cpfsgt	main@RxData& (0+255),b
  1048  000DA0  D001               	goto	l101
  1049                           
  1050                           ; BSR set to: 0
  1051  000DA2  1FA8               	comf	main@RxData& (0+255),f,b
  1052  000DA4                     l101:
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 171: segMap[digitSelector] = ~(fontList[RxData] | (dotflag << 16));
  1056                           
  1057                           ; BSR set to: 0
  1058  000DA4  51A8               	movf	main@RxData& (0+255),w,b
  1059  000DA6  0D04               	mullw	4
  1060  000DA8  0EA9               	movlw	low _fontList
  1061  000DAA  24F3               	addwf	prodl,w,c
  1062  000DAC  6ED9               	movwf	fsr2l,c
  1063  000DAE  0E00               	movlw	high _fontList
  1064  000DB0  20F4               	addwfc	prodh,w,c
  1065  000DB2  6EDA               	movwf	fsr2h,c
  1066  000DB4  CFDE F097          	movff	postinc2,??_main
  1067  000DB8  CFDE F098          	movff	postinc2,??_main+1
  1068  000DBC  CFDE F099          	movff	postinc2,??_main+2
  1069  000DC0  CFDE F09A          	movff	postinc2,??_main+3
  1070  000DC4  C0A3  F09B         	movff	main@dotflag,??_main+4
  1071  000DC8  C0A4  F09C         	movff	main@dotflag+1,??_main+5
  1072  000DCC  C0A5  F09D         	movff	main@dotflag+2,??_main+6
  1073  000DD0  C0A6  F09E         	movff	main@dotflag+3,??_main+7
  1074  000DD4  C09C  F09E         	movff	??_main+5,??_main+7
  1075  000DD8  C09B  F09D         	movff	??_main+4,??_main+6
  1076  000DDC  6B9C               	clrf	(??_main+5)& (0+255),b
  1077  000DDE  6B9B               	clrf	(??_main+4)& (0+255),b
  1078  000DE0  5197               	movf	??_main& (0+255),w,b
  1079  000DE2  119B               	iorwf	(??_main+4)& (0+255),w,b
  1080  000DE4  6F9F               	movwf	(??_main+8)& (0+255),b
  1081  000DE6  5198               	movf	(??_main+1)& (0+255),w,b
  1082  000DE8  119C               	iorwf	(??_main+5)& (0+255),w,b
  1083  000DEA  6FA0               	movwf	(??_main+9)& (0+255),b
  1084  000DEC  5199               	movf	(??_main+2)& (0+255),w,b
  1085  000DEE  119D               	iorwf	(??_main+6)& (0+255),w,b
  1086  000DF0  6FA1               	movwf	(??_main+10)& (0+255),b
  1087  000DF2  519A               	movf	(??_main+3)& (0+255),w,b
  1088  000DF4  119E               	iorwf	(??_main+7)& (0+255),w,b
  1089  000DF6  6FA2               	movwf	(??_main+11)& (0+255),b
  1090  000DF8  1F9F               	comf	(??_main+8)& (0+255),f,b
  1091  000DFA  1FA0               	comf	(??_main+9)& (0+255),f,b
  1092  000DFC  1FA1               	comf	(??_main+10)& (0+255),f,b
  1093  000DFE  1FA2               	comf	(??_main+11)& (0+255),f,b
  1094  000E00  51A7               	movf	main@digitSelector& (0+255),w,b
  1095  000E02  0D04               	mullw	4
  1096  000E04  0E60               	movlw	low _segMap
  1097  000E06  24F3               	addwf	prodl,w,c
  1098  000E08  6ED9               	movwf	fsr2l,c
  1099  000E0A  0E00               	movlw	high _segMap
  1100  000E0C  20F4               	addwfc	prodh,w,c
  1101  000E0E  6EDA               	movwf	fsr2h,c
  1102  000E10  C09F  FFDE         	movff	??_main+8,postinc2
  1103  000E14  C0A0  FFDE         	movff	??_main+9,postinc2
  1104  000E18  C0A1  FFDE         	movff	??_main+10,postinc2
  1105  000E1C  C0A2  FFDE         	movff	??_main+11,postinc2
  1106  000E20                     l95:
  1107                           
  1108                           ;main.c: 172: }
  1109                           ;main.c: 173: }
  1110                           ;main.c: 174: if (tmrIsr == 1) {
  1111                           
  1112                           ; BSR set to: 0
  1113                           
  1114                           ; BSR set to: 0
  1115  000E20  0100               	movlb	0	; () banked
  1116  000E22  0584               	decf	_tmrIsr& (0+255),w,b
  1117  000E24  A4D8               	btfss	status,2,c
  1118  000E26  D796               	goto	l93
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;main.c: 175: tmrIsr = 0;
  1122  000E28  0E00               	movlw	0
  1123  000E2A  6F84               	movwf	_tmrIsr& (0+255),b
  1124                           
  1125                           ; BSR set to: 0
  1126                           
  1127                           ; BSR set to: 0
  1128  000E2C  D793               	goto	l93
  1129  000E2E                     __end_of_main:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           prodh	equ	0xFF4
  1136                           prodl	equ	0xFF3
  1137                           intcon	equ	0xFF2
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postdec1	equ	0xFE5
  1141                           fsr1h	equ	0xFE2
  1142                           fsr1l	equ	0xFE1
  1143                           postinc2	equ	0xFDE
  1144                           fsr2h	equ	0xFDA
  1145                           fsr2l	equ	0xFD9
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _isr *****************
  1149 ;; Defined at:
  1150 ;;		line 203 in file "main.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1166 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1167 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1168 ;;Total ram usage:       18 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    2
  1171 ;; This function calls:
  1172 ;;		___awmod
  1173 ;;		_handleMessage
  1174 ;;		_refreshShiftRegister
  1175 ;; This function is called by:
  1176 ;;		Interrupt level 2
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	intcode
  1181  000008                     __pintcode:
  1182                           	opt stack 0
  1183  000008                     _isr:
  1184                           	opt stack 28
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;incstack = 0
  1188  000008  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1189  00000A  ED17  F007         	call	int_func,f	;refresh shadow registers
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           intcon	equ	0xFF2
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1h	equ	0xFE2
  1201                           fsr1l	equ	0xFE1
  1202                           postinc2	equ	0xFDE
  1203                           fsr2h	equ	0xFDA
  1204                           fsr2l	equ	0xFD9
  1205                           status	equ	0xFD8
  1206                           
  1207                           	psect	intcode_body
  1208  000E2E                     __pintcode_body:
  1209                           	opt stack 28
  1210  000E2E                     int_func:
  1211                           	opt stack 28
  1212  000E2E  0006               	pop		; remove dummy address from shadow register refresh
  1213  000E30  CFFA F03F          	movff	pclath,??_isr
  1214  000E34  CFFB F040          	movff	pclatu,??_isr+1
  1215  000E38  CFE9 F041          	movff	fsr0l,??_isr+2
  1216  000E3C  CFEA F042          	movff	fsr0h,??_isr+3
  1217  000E40  CFE1 F043          	movff	fsr1l,??_isr+4
  1218  000E44  CFE2 F044          	movff	fsr1h,??_isr+5
  1219  000E48  CFD9 F045          	movff	fsr2l,??_isr+6
  1220  000E4C  CFDA F046          	movff	fsr2h,??_isr+7
  1221  000E50  CFF3 F047          	movff	prodl,??_isr+8
  1222  000E54  CFF4 F048          	movff	prodh,??_isr+9
  1223  000E58  CFF6 F049          	movff	tblptrl,??_isr+10
  1224  000E5C  CFF7 F04A          	movff	tblptrh,??_isr+11
  1225  000E60  CFF8 F04B          	movff	tblptru,??_isr+12
  1226  000E64  CFF5 F04C          	movff	tablat,??_isr+13
  1227  000E68  C058  F04D         	movff	btemp,??_isr+14
  1228  000E6C  C059  F04E         	movff	btemp+1,??_isr+15
  1229  000E70  C05A  F04F         	movff	btemp+2,??_isr+16
  1230  000E74  C05B  F050         	movff	btemp+3,??_isr+17
  1231                           
  1232                           ;main.c: 204: if (PIR1bits.TMR2IF) {
  1233  000E78  A29E               	btfss	3998,1,c	;volatile
  1234  000E7A  D01B               	goto	i2l122
  1235                           
  1236                           ;main.c: 205: PIR1bits.TMR2IF = 0;
  1237  000E7C  929E               	bcf	3998,1,c	;volatile
  1238                           
  1239                           ;main.c: 206: tmrIsr = 1;
  1240  000E7E  0E01               	movlw	1
  1241  000E80  0100               	movlb	0	; () banked
  1242  000E82  6F84               	movwf	_tmrIsr& (0+255),b
  1243                           
  1244                           ;main.c: 207: if (showDemoMessage) handleMessage();
  1245  000E84  5056               	movf	_showDemoMessage,w,c
  1246  000E86  A4D8               	btfss	status,2,c
  1247                           
  1248                           ; BSR set to: 0
  1249  000E88  ECE6  F007         	call	_handleMessage	;wreg free
  1250                           
  1251                           ;main.c: 208: refreshShiftRegister(digitPtr);
  1252  000E8C  C055  F001         	movff	_digitPtr,refreshShiftRegister@ptr
  1253  000E90  6A02               	clrf	refreshShiftRegister@ptr+1,c
  1254  000E92  EC54  F004         	call	_refreshShiftRegister	;wreg free
  1255                           
  1256                           ;main.c: 209: digitPtr = (digitPtr+1)%9;
  1257  000E96  0E01               	movlw	1
  1258  000E98  2455               	addwf	_digitPtr,w,c
  1259  000E9A  6E01               	movwf	___awmod@dividend,c
  1260  000E9C  6A02               	clrf	___awmod@dividend+1,c
  1261  000E9E  0E00               	movlw	0
  1262  000EA0  2202               	addwfc	___awmod@dividend+1,f,c
  1263  000EA2  0E00               	movlw	0
  1264  000EA4  6E04               	movwf	___awmod@divisor+1,c
  1265  000EA6  0E09               	movlw	9
  1266  000EA8  6E03               	movwf	___awmod@divisor,c
  1267  000EAA  EC3F  F008         	call	___awmod	;wreg free
  1268  000EAE  5001               	movf	?___awmod,w,c
  1269  000EB0  6E55               	movwf	_digitPtr,c
  1270  000EB2                     i2l122:
  1271  000EB2  C050  F05B         	movff	??_isr+17,btemp+3
  1272  000EB6  C04F  F05A         	movff	??_isr+16,btemp+2
  1273  000EBA  C04E  F059         	movff	??_isr+15,btemp+1
  1274  000EBE  C04D  F058         	movff	??_isr+14,btemp
  1275  000EC2  C04C  FFF5         	movff	??_isr+13,tablat
  1276  000EC6  C04B  FFF8         	movff	??_isr+12,tblptru
  1277  000ECA  C04A  FFF7         	movff	??_isr+11,tblptrh
  1278  000ECE  C049  FFF6         	movff	??_isr+10,tblptrl
  1279  000ED2  C048  FFF4         	movff	??_isr+9,prodh
  1280  000ED6  C047  FFF3         	movff	??_isr+8,prodl
  1281  000EDA  C046  FFDA         	movff	??_isr+7,fsr2h
  1282  000EDE  C045  FFD9         	movff	??_isr+6,fsr2l
  1283  000EE2  C044  FFE2         	movff	??_isr+5,fsr1h
  1284  000EE6  C043  FFE1         	movff	??_isr+4,fsr1l
  1285  000EEA  C042  FFEA         	movff	??_isr+3,fsr0h
  1286  000EEE  C041  FFE9         	movff	??_isr+2,fsr0l
  1287  000EF2  C040  FFFB         	movff	??_isr+1,pclatu
  1288  000EF6  C03F  FFFA         	movff	??_isr,pclath
  1289  000EFA  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1290  000EFC  0011               	retfie		f
  1291  000EFE                     __end_of_isr:
  1292                           	opt stack 0
  1293                           pclatu	equ	0xFFB
  1294                           pclath	equ	0xFFA
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           intcon	equ	0xFF2
  1302                           postinc0	equ	0xFEE
  1303                           fsr0h	equ	0xFEA
  1304                           fsr0l	equ	0xFE9
  1305                           wreg	equ	0xFE8
  1306                           postdec1	equ	0xFE5
  1307                           fsr1h	equ	0xFE2
  1308                           fsr1l	equ	0xFE1
  1309                           postinc2	equ	0xFDE
  1310                           fsr2h	equ	0xFDA
  1311                           fsr2l	equ	0xFD9
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _refreshShiftRegister *****************
  1315 ;; Defined at:
  1316 ;;		line 78 in file "main.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  ptr             2    0[COMRAM] int 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  i               2   60[COMRAM] int 
  1321 ;;  map             4   54[COMRAM] unsigned long 
  1322 ;;  ledSelector     2   58[COMRAM] unsigned int 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1332 ;;      Params:         2       0       0       0       0       0       0       0       0
  1333 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1334 ;;      Temps:         52       0       0       0       0       0       0       0       0
  1335 ;;      Totals:        62       0       0       0       0       0       0       0       0
  1336 ;;Total ram usage:       62 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_isr
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text2
  1346  0008A8                     __ptext2:
  1347                           	opt stack 0
  1348  0008A8                     _refreshShiftRegister:
  1349                           	opt stack 29
  1350                           
  1351                           ;main.c: 79: uint16_t ledSelector = 0b1 << ptr;
  1352                           
  1353                           ;incstack = 0
  1354  0008A8  C001  F003         	movff	refreshShiftRegister@ptr,??_refreshShiftRegister
  1355  0008AC  0E01               	movlw	1
  1356  0008AE  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1357  0008B0  0E00               	movlw	0
  1358  0008B2  6E05               	movwf	(??_refreshShiftRegister+2)& (0+255),c
  1359  0008B4  2A03               	incf	??_refreshShiftRegister,f,c
  1360  0008B6  D003               	goto	i2u46_44
  1361  0008B8                     i2u46_45:
  1362  0008B8  90D8               	bcf	status,0,c
  1363  0008BA  3604               	rlcf	??_refreshShiftRegister+1,f,c
  1364  0008BC  3605               	rlcf	??_refreshShiftRegister+2,f,c
  1365  0008BE                     i2u46_44:
  1366  0008BE  2E03               	decfsz	??_refreshShiftRegister,f,c
  1367  0008C0  D7FB               	goto	i2u46_45
  1368  0008C2  C004  F03B         	movff	??_refreshShiftRegister+1,refreshShiftRegister@ledSelector
  1369  0008C6  C005  F03C         	movff	??_refreshShiftRegister+2,refreshShiftRegister@ledSelector+1
  1370                           
  1371                           ;main.c: 81: uint32_t map = ((segMap[ptr] & 0b11111111) << 24)
  1372                           ;main.c: 82: | ((segMap[ptr] & 0b1111111100000000) << 8)
  1373                           ;main.c: 83: | ((ledSelector & 0b0000000011) << 14)
  1374                           ;main.c: 84: | ((led_stat & 0b00001111) << 10)
  1375                           ;main.c: 85: | ((segMap[ptr] & 0b110000000000000000) >> 8)
  1376                           ;main.c: 86: | ((ledSelector & 0b1111111100) >> 2);
  1377  0008CA  0E60               	movlw	low _segMap
  1378  0008CC  6E03               	movwf	??_refreshShiftRegister& (0+255),c
  1379  0008CE  0E00               	movlw	high _segMap
  1380  0008D0  6E04               	movwf	(??_refreshShiftRegister+1)& (0+255),c
  1381  0008D2  90D8               	bcf	status,0,c
  1382  0008D4  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1383  0008D6  6ED9               	movwf	fsr2l,c
  1384  0008D8  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1385  0008DA  6EDA               	movwf	fsr2h,c
  1386  0008DC  90D8               	bcf	status,0,c
  1387  0008DE  36D9               	rlcf	fsr2l,f,c
  1388  0008E0  36DA               	rlcf	fsr2h,f,c
  1389  0008E2  5003               	movf	??_refreshShiftRegister,w,c
  1390  0008E4  26D9               	addwf	fsr2l,f,c
  1391  0008E6  5004               	movf	??_refreshShiftRegister+1,w,c
  1392  0008E8  22DA               	addwfc	fsr2h,f,c
  1393  0008EA  CFDE F005          	movff	postinc2,??_refreshShiftRegister+2
  1394  0008EE  CFDE F006          	movff	postinc2,??_refreshShiftRegister+3
  1395  0008F2  CFDE F007          	movff	postinc2,??_refreshShiftRegister+4
  1396  0008F6  CFDE F008          	movff	postinc2,??_refreshShiftRegister+5
  1397  0008FA  C006  F005         	movff	??_refreshShiftRegister+3,??_refreshShiftRegister+2
  1398  0008FE  C007  F006         	movff	??_refreshShiftRegister+4,??_refreshShiftRegister+3
  1399  000902  C008  F007         	movff	??_refreshShiftRegister+5,??_refreshShiftRegister+4
  1400  000906  6A08               	clrf	??_refreshShiftRegister+5,c
  1401  000908  0E00               	movlw	0
  1402  00090A  1405               	andwf	??_refreshShiftRegister+2,w,c
  1403  00090C  6E09               	movwf	(??_refreshShiftRegister+6)& (0+255),c
  1404  00090E  0E03               	movlw	3
  1405  000910  1406               	andwf	??_refreshShiftRegister+3,w,c
  1406  000912  6E0A               	movwf	(??_refreshShiftRegister+7)& (0+255),c
  1407  000914  0E00               	movlw	0
  1408  000916  1407               	andwf	??_refreshShiftRegister+4,w,c
  1409  000918  6E0B               	movwf	(??_refreshShiftRegister+8)& (0+255),c
  1410  00091A  0E00               	movlw	0
  1411  00091C  1408               	andwf	??_refreshShiftRegister+5,w,c
  1412  00091E  6E0C               	movwf	(??_refreshShiftRegister+9)& (0+255),c
  1413  000920  5057               	movf	_led_stat,w,c
  1414  000922  0B0F               	andlw	15
  1415  000924  6E0D               	movwf	(??_refreshShiftRegister+10)& (0+255),c
  1416  000926  6A0E               	clrf	(??_refreshShiftRegister+11)& (0+255),c
  1417  000928  0E0A               	movlw	10
  1418  00092A                     i2u47_45:
  1419  00092A  90D8               	bcf	status,0,c
  1420  00092C  360D               	rlcf	??_refreshShiftRegister+10,f,c
  1421  00092E  360E               	rlcf	??_refreshShiftRegister+11,f,c
  1422  000930  2EE8               	decfsz	wreg,f,c
  1423  000932  D7FB               	goto	i2u47_45
  1424  000934  C00D  F00F         	movff	??_refreshShiftRegister+10,??_refreshShiftRegister+12
  1425  000938  C00E  F010         	movff	??_refreshShiftRegister+11,??_refreshShiftRegister+13
  1426  00093C  0E00               	movlw	0
  1427  00093E  BE10               	btfsc	(??_refreshShiftRegister+13)& (0+255),7,c
  1428  000940  0EFF               	movlw	255
  1429  000942  6E11               	movwf	(??_refreshShiftRegister+14)& (0+255),c
  1430  000944  6E12               	movwf	(??_refreshShiftRegister+15)& (0+255),c
  1431  000946  0E03               	movlw	3
  1432  000948  143B               	andwf	refreshShiftRegister@ledSelector,w,c
  1433  00094A  6E13               	movwf	(??_refreshShiftRegister+16)& (0+255),c
  1434  00094C  0E00               	movlw	0
  1435  00094E  143C               	andwf	refreshShiftRegister@ledSelector+1,w,c
  1436  000950  6E14               	movwf	(??_refreshShiftRegister+17)& (0+255),c
  1437  000952  0E0E               	movlw	14
  1438  000954                     i2u48_45:
  1439  000954  90D8               	bcf	status,0,c
  1440  000956  3613               	rlcf	??_refreshShiftRegister+16,f,c
  1441  000958  3614               	rlcf	??_refreshShiftRegister+17,f,c
  1442  00095A  2EE8               	decfsz	wreg,f,c
  1443  00095C  D7FB               	goto	i2u48_45
  1444  00095E  0E60               	movlw	low _segMap
  1445  000960  6E15               	movwf	(??_refreshShiftRegister+18)& (0+255),c
  1446  000962  0E00               	movlw	high _segMap
  1447  000964  6E16               	movwf	(??_refreshShiftRegister+19)& (0+255),c
  1448  000966  90D8               	bcf	status,0,c
  1449  000968  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1450  00096A  6ED9               	movwf	fsr2l,c
  1451  00096C  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1452  00096E  6EDA               	movwf	fsr2h,c
  1453  000970  90D8               	bcf	status,0,c
  1454  000972  36D9               	rlcf	fsr2l,f,c
  1455  000974  36DA               	rlcf	fsr2h,f,c
  1456  000976  5015               	movf	??_refreshShiftRegister+18,w,c
  1457  000978  26D9               	addwf	fsr2l,f,c
  1458  00097A  5016               	movf	??_refreshShiftRegister+19,w,c
  1459  00097C  22DA               	addwfc	fsr2h,f,c
  1460  00097E  0E00               	movlw	0
  1461  000980  14DE               	andwf	postinc2,w,c
  1462  000982  6E17               	movwf	(??_refreshShiftRegister+20)& (0+255),c
  1463  000984  0EFF               	movlw	255
  1464  000986  14DE               	andwf	postinc2,w,c
  1465  000988  6E18               	movwf	(??_refreshShiftRegister+21)& (0+255),c
  1466  00098A  0E00               	movlw	0
  1467  00098C  14DE               	andwf	postinc2,w,c
  1468  00098E  6E19               	movwf	(??_refreshShiftRegister+22)& (0+255),c
  1469  000990  0E00               	movlw	0
  1470  000992  14DE               	andwf	postinc2,w,c
  1471  000994  6E1A               	movwf	(??_refreshShiftRegister+23)& (0+255),c
  1472  000996  C019  F01A         	movff	??_refreshShiftRegister+22,??_refreshShiftRegister+23
  1473  00099A  C018  F019         	movff	??_refreshShiftRegister+21,??_refreshShiftRegister+22
  1474  00099E  C017  F018         	movff	??_refreshShiftRegister+20,??_refreshShiftRegister+21
  1475  0009A2  6A17               	clrf	??_refreshShiftRegister+20,c
  1476  0009A4  0E60               	movlw	low _segMap
  1477  0009A6  6E1B               	movwf	(??_refreshShiftRegister+24)& (0+255),c
  1478  0009A8  0E00               	movlw	high _segMap
  1479  0009AA  6E1C               	movwf	(??_refreshShiftRegister+25)& (0+255),c
  1480  0009AC  90D8               	bcf	status,0,c
  1481  0009AE  3401               	rlcf	refreshShiftRegister@ptr,w,c
  1482  0009B0  6ED9               	movwf	fsr2l,c
  1483  0009B2  3402               	rlcf	refreshShiftRegister@ptr+1,w,c
  1484  0009B4  6EDA               	movwf	fsr2h,c
  1485  0009B6  90D8               	bcf	status,0,c
  1486  0009B8  36D9               	rlcf	fsr2l,f,c
  1487  0009BA  36DA               	rlcf	fsr2h,f,c
  1488  0009BC  501B               	movf	??_refreshShiftRegister+24,w,c
  1489  0009BE  26D9               	addwf	fsr2l,f,c
  1490  0009C0  501C               	movf	??_refreshShiftRegister+25,w,c
  1491  0009C2  22DA               	addwfc	fsr2h,f,c
  1492  0009C4  CFDE F01D          	movff	postinc2,??_refreshShiftRegister+26
  1493  0009C8  CFDE F01E          	movff	postinc2,??_refreshShiftRegister+27
  1494  0009CC  CFDE F01F          	movff	postinc2,??_refreshShiftRegister+28
  1495  0009D0  CFDE F020          	movff	postinc2,??_refreshShiftRegister+29
  1496  0009D4  0EFF               	movlw	255
  1497  0009D6  141D               	andwf	??_refreshShiftRegister+26,w,c
  1498  0009D8  6E21               	movwf	(??_refreshShiftRegister+30)& (0+255),c
  1499  0009DA  0E00               	movlw	0
  1500  0009DC  141E               	andwf	??_refreshShiftRegister+27,w,c
  1501  0009DE  6E22               	movwf	(??_refreshShiftRegister+31)& (0+255),c
  1502  0009E0  0E00               	movlw	0
  1503  0009E2  141F               	andwf	??_refreshShiftRegister+28,w,c
  1504  0009E4  6E23               	movwf	(??_refreshShiftRegister+32)& (0+255),c
  1505  0009E6  0E00               	movlw	0
  1506  0009E8  1420               	andwf	??_refreshShiftRegister+29,w,c
  1507  0009EA  6E24               	movwf	(??_refreshShiftRegister+33)& (0+255),c
  1508  0009EC  C021  F024         	movff	??_refreshShiftRegister+30,??_refreshShiftRegister+33
  1509  0009F0  6A23               	clrf	??_refreshShiftRegister+32,c
  1510  0009F2  6A22               	clrf	??_refreshShiftRegister+31,c
  1511  0009F4  6A21               	clrf	??_refreshShiftRegister+30,c
  1512  0009F6  5017               	movf	??_refreshShiftRegister+20,w,c
  1513  0009F8  1021               	iorwf	??_refreshShiftRegister+30,w,c
  1514  0009FA  6E25               	movwf	(??_refreshShiftRegister+34)& (0+255),c
  1515  0009FC  5018               	movf	??_refreshShiftRegister+21,w,c
  1516  0009FE  1022               	iorwf	??_refreshShiftRegister+31,w,c
  1517  000A00  6E26               	movwf	(??_refreshShiftRegister+35)& (0+255),c
  1518  000A02  5019               	movf	??_refreshShiftRegister+22,w,c
  1519  000A04  1023               	iorwf	??_refreshShiftRegister+32,w,c
  1520  000A06  6E27               	movwf	(??_refreshShiftRegister+36)& (0+255),c
  1521  000A08  501A               	movf	??_refreshShiftRegister+23,w,c
  1522  000A0A  1024               	iorwf	??_refreshShiftRegister+33,w,c
  1523  000A0C  6E28               	movwf	(??_refreshShiftRegister+37)& (0+255),c
  1524  000A0E  5013               	movf	??_refreshShiftRegister+16,w,c
  1525  000A10  1025               	iorwf	??_refreshShiftRegister+34,w,c
  1526  000A12  6E29               	movwf	(??_refreshShiftRegister+38)& (0+255),c
  1527  000A14  5014               	movf	??_refreshShiftRegister+17,w,c
  1528  000A16  1026               	iorwf	??_refreshShiftRegister+35,w,c
  1529  000A18  6E2A               	movwf	(??_refreshShiftRegister+39)& (0+255),c
  1530  000A1A  0E00               	movlw	0
  1531  000A1C  1027               	iorwf	??_refreshShiftRegister+36,w,c
  1532  000A1E  6E2B               	movwf	(??_refreshShiftRegister+40)& (0+255),c
  1533  000A20  0E00               	movlw	0
  1534  000A22  1028               	iorwf	??_refreshShiftRegister+37,w,c
  1535  000A24  6E2C               	movwf	(??_refreshShiftRegister+41)& (0+255),c
  1536  000A26  500F               	movf	??_refreshShiftRegister+12,w,c
  1537  000A28  1029               	iorwf	??_refreshShiftRegister+38,w,c
  1538  000A2A  6E2D               	movwf	(??_refreshShiftRegister+42)& (0+255),c
  1539  000A2C  5010               	movf	??_refreshShiftRegister+13,w,c
  1540  000A2E  102A               	iorwf	??_refreshShiftRegister+39,w,c
  1541  000A30  6E2E               	movwf	(??_refreshShiftRegister+43)& (0+255),c
  1542  000A32  5011               	movf	??_refreshShiftRegister+14,w,c
  1543  000A34  102B               	iorwf	??_refreshShiftRegister+40,w,c
  1544  000A36  6E2F               	movwf	(??_refreshShiftRegister+44)& (0+255),c
  1545  000A38  5012               	movf	??_refreshShiftRegister+15,w,c
  1546  000A3A  102C               	iorwf	??_refreshShiftRegister+41,w,c
  1547  000A3C  6E30               	movwf	(??_refreshShiftRegister+45)& (0+255),c
  1548  000A3E  5009               	movf	??_refreshShiftRegister+6,w,c
  1549  000A40  102D               	iorwf	??_refreshShiftRegister+42,w,c
  1550  000A42  6E31               	movwf	(??_refreshShiftRegister+46)& (0+255),c
  1551  000A44  500A               	movf	??_refreshShiftRegister+7,w,c
  1552  000A46  102E               	iorwf	??_refreshShiftRegister+43,w,c
  1553  000A48  6E32               	movwf	(??_refreshShiftRegister+47)& (0+255),c
  1554  000A4A  500B               	movf	??_refreshShiftRegister+8,w,c
  1555  000A4C  102F               	iorwf	??_refreshShiftRegister+44,w,c
  1556  000A4E  6E33               	movwf	(??_refreshShiftRegister+48)& (0+255),c
  1557  000A50  500C               	movf	??_refreshShiftRegister+9,w,c
  1558  000A52  1030               	iorwf	??_refreshShiftRegister+45,w,c
  1559  000A54  6E34               	movwf	(??_refreshShiftRegister+49)& (0+255),c
  1560  000A56  C03B  F035         	movff	refreshShiftRegister@ledSelector,??_refreshShiftRegister+50
  1561  000A5A  C03C  F036         	movff	refreshShiftRegister@ledSelector+1,??_refreshShiftRegister+51
  1562  000A5E  90D8               	bcf	status,0,c
  1563  000A60  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1564  000A62  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1565  000A64  90D8               	bcf	status,0,c
  1566  000A66  3236               	rrcf	??_refreshShiftRegister+51,f,c
  1567  000A68  3235               	rrcf	??_refreshShiftRegister+50,f,c
  1568  000A6A  5035               	movf	??_refreshShiftRegister+50,w,c
  1569  000A6C  1031               	iorwf	??_refreshShiftRegister+46,w,c
  1570  000A6E  6E37               	movwf	refreshShiftRegister@map,c
  1571  000A70  5032               	movf	??_refreshShiftRegister+47,w,c
  1572  000A72  6E38               	movwf	refreshShiftRegister@map+1,c
  1573  000A74  5033               	movf	??_refreshShiftRegister+48,w,c
  1574  000A76  6E39               	movwf	refreshShiftRegister@map+2,c
  1575  000A78  5034               	movf	??_refreshShiftRegister+49,w,c
  1576  000A7A  6E3A               	movwf	refreshShiftRegister@map+3,c
  1577                           
  1578                           ;main.c: 88: for (int i = 0; i < 32; i++) {
  1579  000A7C  0E00               	movlw	0
  1580  000A7E  6E3E               	movwf	refreshShiftRegister@i+1,c
  1581  000A80  0E00               	movlw	0
  1582  000A82  6E3D               	movwf	refreshShiftRegister@i,c
  1583  000A84  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1584  000A86  D003               	goto	i2l86
  1585  000A88  503E               	movf	refreshShiftRegister@i+1,w,c
  1586  000A8A  E12E               	bnz	i2l87
  1587  000A8C  D029               	goto	L1
  1588  000A8E                     i2l86:
  1589                           
  1590                           ;main.c: 89: LATBbits.LATB2 = (map >> i) & 1;
  1591  000A8E  503D               	movf	refreshShiftRegister@i,w,c
  1592  000A90  C037  F003         	movff	refreshShiftRegister@map,??_refreshShiftRegister
  1593  000A94  C038  F004         	movff	refreshShiftRegister@map+1,??_refreshShiftRegister+1
  1594  000A98  C039  F005         	movff	refreshShiftRegister@map+2,??_refreshShiftRegister+2
  1595  000A9C  C03A  F006         	movff	refreshShiftRegister@map+3,??_refreshShiftRegister+3
  1596  000AA0  2AE8               	incf	wreg,f,c
  1597  000AA2  D005               	goto	i2u50_40
  1598  000AA4                     i2u50_45:
  1599  000AA4  90D8               	bcf	status,0,c
  1600  000AA6  3206               	rrcf	??_refreshShiftRegister+3,f,c
  1601  000AA8  3205               	rrcf	??_refreshShiftRegister+2,f,c
  1602  000AAA  3204               	rrcf	??_refreshShiftRegister+1,f,c
  1603  000AAC  3203               	rrcf	??_refreshShiftRegister,f,c
  1604  000AAE                     i2u50_40:
  1605  000AAE  2EE8               	decfsz	wreg,f,c
  1606  000AB0  D7F9               	goto	i2u50_45
  1607  000AB2  0E01               	movlw	1
  1608  000AB4  1603               	andwf	??_refreshShiftRegister,f,c
  1609  000AB6  4603               	rlncf	??_refreshShiftRegister,f,c
  1610  000AB8  4603               	rlncf	??_refreshShiftRegister,f,c
  1611  000ABA  508A               	movf	3978,w,c	;volatile
  1612  000ABC  1803               	xorwf	??_refreshShiftRegister,w,c
  1613  000ABE  0BFB               	andlw	-5
  1614  000AC0  1803               	xorwf	??_refreshShiftRegister,w,c
  1615  000AC2  6E8A               	movwf	3978,c	;volatile
  1616                           
  1617                           ;main.c: 90: LATBbits.LATB3 = 1;
  1618  000AC4  868A               	bsf	3978,3,c	;volatile
  1619                           
  1620                           ;main.c: 91: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1621  000AC6  D000               	nop2		;2 cycle nop
  1622  000AC8  D000               	nop2		;2 cycle nop
  1623  000ACA  F000               	nop	
  1624                           
  1625                           ;main.c: 92: LATBbits.LATB3 = 0;
  1626  000ACC  968A               	bcf	3978,3,c	;volatile
  1627                           
  1628                           ;main.c: 93: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1629  000ACE  D000               	nop2		;2 cycle nop
  1630  000AD0  D000               	nop2		;2 cycle nop
  1631  000AD2  F000               	nop	
  1632  000AD4  4A3D               	infsnz	refreshShiftRegister@i,f,c
  1633  000AD6  2A3E               	incf	refreshShiftRegister@i+1,f,c
  1634  000AD8  BE3E               	btfsc	refreshShiftRegister@i+1,7,c
  1635  000ADA  D7D9               	goto	i2l86
  1636  000ADC  503E               	movf	refreshShiftRegister@i+1,w,c
  1637  000ADE  E104               	bnz	i2u51_40
  1638  000AE0                     L1:
  1639  000AE0  0E20               	movlw	32
  1640  000AE2  5C3D               	subwf	refreshShiftRegister@i,w,c
  1641  000AE4  A0D8               	btfss	status,0,c
  1642  000AE6  D7D3               	goto	i2l86
  1643  000AE8                     i2u51_40:
  1644  000AE8                     i2l87:
  1645                           
  1646                           ;main.c: 94: }
  1647                           ;main.c: 96: LATBbits.LATB4 = 1;
  1648  000AE8  888A               	bsf	3978,4,c	;volatile
  1649                           
  1650                           ;main.c: 97: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1651  000AEA  D000               	nop2		;2 cycle nop
  1652  000AEC  D000               	nop2		;2 cycle nop
  1653  000AEE  F000               	nop	
  1654                           
  1655                           ;main.c: 98: LATBbits.LATB4 = 0;
  1656  000AF0  988A               	bcf	3978,4,c	;volatile
  1657                           
  1658                           ;main.c: 99: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1659  000AF2  D000               	nop2		;2 cycle nop
  1660  000AF4  D000               	nop2		;2 cycle nop
  1661  000AF6  F000               	nop	
  1662  000AF8  0012               	return		;funcret
  1663  000AFA                     __end_of_refreshShiftRegister:
  1664                           	opt stack 0
  1665                           pclatu	equ	0xFFB
  1666                           pclath	equ	0xFFA
  1667                           tblptru	equ	0xFF8
  1668                           tblptrh	equ	0xFF7
  1669                           tblptrl	equ	0xFF6
  1670                           tablat	equ	0xFF5
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           intcon	equ	0xFF2
  1674                           postinc0	equ	0xFEE
  1675                           fsr0h	equ	0xFEA
  1676                           fsr0l	equ	0xFE9
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1h	equ	0xFE2
  1680                           fsr1l	equ	0xFE1
  1681                           postinc2	equ	0xFDE
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _handleMessage *****************
  1687 ;; Defined at:
  1688 ;;		line 189 in file "main.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1702 ;;      Params:         0       0       0       0       0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1704 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1705 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1706 ;;Total ram usage:        6 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    1
  1709 ;; This function calls:
  1710 ;;		_setMsgWithDot
  1711 ;;		_strncpy
  1712 ;; This function is called by:
  1713 ;;		_isr
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text3
  1718  000FCC                     __ptext3:
  1719                           	opt stack 0
  1720  000FCC                     _handleMessage:
  1721                           	opt stack 28
  1722                           
  1723                           ;main.c: 190: if (divisor++ == 500) {
  1724                           
  1725                           ;incstack = 0
  1726  000FCC  4A53               	infsnz	_divisor,f,c
  1727  000FCE  2A54               	incf	_divisor+1,f,c
  1728  000FD0  0EF5               	movlw	245
  1729  000FD2  1853               	xorwf	_divisor,w,c
  1730  000FD4  E153               	bnz	i2l117
  1731  000FD6  0454               	decf	_divisor+1,w,c
  1732  000FD8  A4D8               	btfss	status,2,c
  1733  000FDA  0012               	return	
  1734                           
  1735                           ;main.c: 191: divisor = 0;
  1736  000FDC  0E00               	movlw	0
  1737  000FDE  6E54               	movwf	_divisor+1,c
  1738  000FE0  0E00               	movlw	0
  1739  000FE2  6E53               	movwf	_divisor,c
  1740                           
  1741                           ;main.c: 193: if (writeItr++ == MESSAGE_LENGTH-9) writeItr = 0;
  1742  000FE4  5051               	movf	_writeItr,w,c
  1743  000FE6  6E17               	movwf	??_handleMessage& (0+255),c
  1744  000FE8  5052               	movf	_writeItr+1,w,c
  1745  000FEA  6E18               	movwf	(??_handleMessage+1)& (0+255),c
  1746  000FEC  4A51               	infsnz	_writeItr,f,c
  1747  000FEE  2A52               	incf	_writeItr+1,f,c
  1748  000FF0  0EF7               	movlw	247
  1749  000FF2  6E19               	movwf	(??_handleMessage+2)& (0+255),c
  1750  000FF4  0EFF               	movlw	255
  1751  000FF6  6E1A               	movwf	(??_handleMessage+3)& (0+255),c
  1752  000FF8  0E01               	movlw	low _MESSAGE_LENGTH
  1753  000FFA  6EF6               	movwf	tblptrl,c
  1754  000FFC                     	if	0	;There is only one active tblptr byte
  1755  000FFC                     	endif
  1756  000FFC                     	if	0	;There are less than 3 active tblptr bytes
  1757  000FFC                     	endif
  1758  000FFC  0009               	tblrd		*+
  1759  000FFE  CFF5 F01B          	movff	tablat,??_handleMessage+4
  1760  001002  0009               	tblrd		*+
  1761  001004  CFF5 F01C          	movff	tablat,??_handleMessage+5
  1762  001008  5019               	movf	??_handleMessage+2,w,c
  1763  00100A  261B               	addwf	??_handleMessage+4,f,c
  1764  00100C  501A               	movf	??_handleMessage+3,w,c
  1765  00100E  221C               	addwfc	??_handleMessage+5,f,c
  1766  001010  5017               	movf	??_handleMessage,w,c
  1767  001012  181B               	xorwf	??_handleMessage+4,w,c
  1768  001014  E108               	bnz	i2l1099
  1769  001016  5018               	movf	??_handleMessage+1,w,c
  1770  001018  181C               	xorwf	??_handleMessage+5,w,c
  1771  00101A  A4D8               	btfss	status,2,c
  1772  00101C  D004               	goto	i2l116
  1773  00101E  0E00               	movlw	0
  1774  001020  6E52               	movwf	_writeItr+1,c
  1775  001022  0E00               	movlw	0
  1776  001024  6E51               	movwf	_writeItr,c
  1777  001026                     i2l116:
  1778  001026                     i2l1099:
  1779                           
  1780                           ;main.c: 194: strncpy(display, DEMO_MESSAGE + writeItr, 9);
  1781  001026  0E8E               	movlw	low _display
  1782  001028  6E01               	movwf	strncpy@to,c
  1783  00102A  0E00               	movlw	high _display
  1784  00102C  6E02               	movwf	strncpy@to+1,c
  1785  00102E  0E55               	movlw	low _DEMO_MESSAGE
  1786  001030  2451               	addwf	_writeItr,w,c
  1787  001032  6E03               	movwf	strncpy@from,c
  1788  001034  0E08               	movlw	high _DEMO_MESSAGE
  1789  001036  2052               	addwfc	_writeItr+1,w,c
  1790  001038  6E04               	movwf	strncpy@from+1,c
  1791  00103A  0E00               	movlw	0
  1792  00103C  6E06               	movwf	strncpy@size+1,c
  1793  00103E  0E09               	movlw	9
  1794  001040  6E05               	movwf	strncpy@size,c
  1795  001042  ECAD  F008         	call	_strncpy	;wreg free
  1796                           
  1797                           ;main.c: 195: strncpy(disdot, DEMO_DOTFLAG + writeItr, 9);
  1798  001046  0E85               	movlw	low _disdot
  1799  001048  6E01               	movwf	strncpy@to,c
  1800  00104A  0E00               	movlw	high _disdot
  1801  00104C  6E02               	movwf	strncpy@to+1,c
  1802  00104E  0E03               	movlw	low _DEMO_DOTFLAG
  1803  001050  2451               	addwf	_writeItr,w,c
  1804  001052  6E03               	movwf	strncpy@from,c
  1805  001054  0E08               	movlw	high _DEMO_DOTFLAG
  1806  001056  2052               	addwfc	_writeItr+1,w,c
  1807  001058  6E04               	movwf	strncpy@from+1,c
  1808  00105A  0E00               	movlw	0
  1809  00105C  6E06               	movwf	strncpy@size+1,c
  1810  00105E  0E09               	movlw	9
  1811  001060  6E05               	movwf	strncpy@size,c
  1812  001062  ECAD  F008         	call	_strncpy	;wreg free
  1813                           
  1814                           ;main.c: 197: setMsgWithDot(display, disdot);
  1815  001066  0E8E               	movlw	low _display
  1816  001068  6E01               	movwf	setMsgWithDot@message,c
  1817  00106A  0E00               	movlw	high _display
  1818  00106C  6E02               	movwf	setMsgWithDot@message+1,c
  1819  00106E  0E85               	movlw	low _disdot
  1820  001070  6E03               	movwf	setMsgWithDot@dotFlag,c
  1821  001072  0E00               	movlw	high _disdot
  1822  001074  6E04               	movwf	setMsgWithDot@dotFlag+1,c
  1823  001076  EC7F  F007         	call	_setMsgWithDot	;wreg free
  1824  00107A  0012               	return	
  1825  00107C                     i2l117:
  1826  00107C  0012               	return		;funcret
  1827  00107E                     __end_of_handleMessage:
  1828                           	opt stack 0
  1829                           pclatu	equ	0xFFB
  1830                           pclath	equ	0xFFA
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           intcon	equ	0xFF2
  1838                           postinc0	equ	0xFEE
  1839                           fsr0h	equ	0xFEA
  1840                           fsr0l	equ	0xFE9
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           postinc2	equ	0xFDE
  1846                           fsr2h	equ	0xFDA
  1847                           fsr2l	equ	0xFD9
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function _strncpy *****************
  1851 ;; Defined at:
  1852 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\strncpy.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  to              2    0[COMRAM] PTR unsigned char 
  1855 ;;		 -> disdot(9), display(9), 
  1856 ;;  from            2    2[COMRAM] PTR const unsigned char 
  1857 ;;		 -> DEMO_DOTFLAG(82), DEMO_MESSAGE(82), 
  1858 ;;  size            2    4[COMRAM] unsigned int 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  cp              2    6[COMRAM] PTR unsigned char 
  1861 ;;		 -> disdot(9), display(9), 
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  2    0[COMRAM] PTR unsigned char 
  1864 ;; Registers used:
  1865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1871 ;;      Params:         6       0       0       0       0       0       0       0       0
  1872 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1874 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1875 ;;Total ram usage:        8 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_handleMessage
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text4
  1885  00115A                     __ptext4:
  1886                           	opt stack 0
  1887  00115A                     _strncpy:
  1888                           	opt stack 28
  1889                           
  1890                           ;incstack = 0
  1891  00115A  C001  F007         	movff	strncpy@to,strncpy@cp
  1892  00115E  C002  F008         	movff	strncpy@to+1,strncpy@cp+1
  1893  001162  D015               	goto	i2l727
  1894  001164  0605               	decf	strncpy@size,f,c
  1895  001166  A0D8               	btfss	status,0,c
  1896  001168  0606               	decf	strncpy@size+1,f,c
  1897  00116A  C003  FFF6         	movff	strncpy@from,tblptrl
  1898  00116E  C004  FFF7         	movff	strncpy@from+1,tblptrh
  1899  001172  4A03               	infsnz	strncpy@from,f,c
  1900  001174  2A04               	incf	strncpy@from+1,f,c
  1901  001176                     	if	0	;tblptru may be non-zero
  1902  001176                     	endif
  1903  001176                     	if	0	;tblptru may be non-zero
  1904  001176                     	endif
  1905  001176  C007  FFD9         	movff	strncpy@cp,fsr2l
  1906  00117A  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  1907  00117E  4A07               	infsnz	strncpy@cp,f,c
  1908  001180  2A08               	incf	strncpy@cp+1,f,c
  1909  001182  0008               	tblrd		*
  1910  001184  CFF5 FFDF          	movff	tablat,indf2
  1911  001188  50DF               	movf	indf2,w,c
  1912  00118A  B4D8               	btfsc	status,2,c
  1913  00118C  D00D               	goto	i2l729
  1914  00118E                     i2l727:
  1915  00118E  5005               	movf	strncpy@size,w,c
  1916  001190  1006               	iorwf	strncpy@size+1,w,c
  1917  001192  B4D8               	btfsc	status,2,c
  1918  001194  D009               	goto	i2l729
  1919  001196  D7E6               	goto	i2l726
  1920  001198                     i2l1061:
  1921  001198  C007  FFD9         	movff	strncpy@cp,fsr2l
  1922  00119C  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  1923  0011A0  0E00               	movlw	0
  1924  0011A2  6EDF               	movwf	indf2,c
  1925  0011A4  4A07               	infsnz	strncpy@cp,f,c
  1926  0011A6  2A08               	incf	strncpy@cp+1,f,c
  1927  0011A8                     i2l729:
  1928  0011A8  0605               	decf	strncpy@size,f,c
  1929  0011AA  A0D8               	btfss	status,0,c
  1930  0011AC  0606               	decf	strncpy@size+1,f,c
  1931  0011AE  2805               	incf	strncpy@size,w,c
  1932  0011B0  E1F3               	bnz	i2l1061
  1933  0011B2  2806               	incf	strncpy@size+1,w,c
  1934  0011B4  B4D8               	btfsc	status,2,c
  1935  0011B6  0012               	return	
  1936  0011B8  D7EF               	goto	i2l730
  1937  0011BA                     __end_of_strncpy:
  1938                           	opt stack 0
  1939                           pclatu	equ	0xFFB
  1940                           pclath	equ	0xFFA
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           prodh	equ	0xFF4
  1946                           prodl	equ	0xFF3
  1947                           intcon	equ	0xFF2
  1948                           postinc0	equ	0xFEE
  1949                           fsr0h	equ	0xFEA
  1950                           fsr0l	equ	0xFE9
  1951                           wreg	equ	0xFE8
  1952                           postdec1	equ	0xFE5
  1953                           fsr1h	equ	0xFE2
  1954                           fsr1l	equ	0xFE1
  1955                           indf2	equ	0xFDF
  1956                           postinc2	equ	0xFDE
  1957                           fsr2h	equ	0xFDA
  1958                           fsr2l	equ	0xFD9
  1959                           status	equ	0xFD8
  1960                           
  1961 ;; *************** function _setMsgWithDot *****************
  1962 ;; Defined at:
  1963 ;;		line 72 in file "main.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  message         2    0[COMRAM] PTR unsigned char 
  1966 ;;		 -> display(9), 
  1967 ;;  dotFlag         2    2[COMRAM] PTR unsigned char 
  1968 ;;		 -> disdot(9), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  i               2   20[COMRAM] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1980 ;;      Params:         4       0       0       0       0       0       0       0       0
  1981 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1982 ;;      Temps:         16       0       0       0       0       0       0       0       0
  1983 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1984 ;;Total ram usage:       22 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_handleMessage
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text5
  1994  000EFE                     __ptext5:
  1995                           	opt stack 0
  1996  000EFE                     _setMsgWithDot:
  1997                           	opt stack 28
  1998                           
  1999                           ;main.c: 73: for (int i = 0; i < 9; i++) {
  2000                           
  2001                           ;incstack = 0
  2002  000EFE  0E00               	movlw	0
  2003  000F00  6E16               	movwf	setMsgWithDot@i+1,c
  2004  000F02  0E00               	movlw	0
  2005  000F04  6E15               	movwf	setMsgWithDot@i,c
  2006  000F06                     i2l1041:
  2007  000F06  BE16               	btfsc	setMsgWithDot@i+1,7,c
  2008  000F08  D006               	goto	i2l81
  2009  000F0A  5016               	movf	setMsgWithDot@i+1,w,c
  2010  000F0C  E15E               	bnz	i2l83
  2011  000F0E  0E09               	movlw	9
  2012  000F10  5C15               	subwf	setMsgWithDot@i,w,c
  2013  000F12  B0D8               	btfsc	status,0,c
  2014  000F14  0012               	return	
  2015  000F16                     i2l81:
  2016                           
  2017                           ;main.c: 74: segMap[i] = ~(fontList[message[i]] | ((uint32_t)(dotFlag[i] == '.') << 16))
      +                          ;
  2018  000F16  5015               	movf	setMsgWithDot@i,w,c
  2019  000F18  2401               	addwf	setMsgWithDot@message,w,c
  2020  000F1A  6ED9               	movwf	fsr2l,c
  2021  000F1C  5016               	movf	setMsgWithDot@i+1,w,c
  2022  000F1E  2002               	addwfc	setMsgWithDot@message+1,w,c
  2023  000F20  6EDA               	movwf	fsr2h,c
  2024  000F22  50DF               	movf	indf2,w,c
  2025  000F24  6E05               	movwf	??_setMsgWithDot& (0+255),c
  2026  000F26  5005               	movf	??_setMsgWithDot,w,c
  2027  000F28  0D04               	mullw	4
  2028  000F2A  0EA9               	movlw	low _fontList
  2029  000F2C  24F3               	addwf	prodl,w,c
  2030  000F2E  6ED9               	movwf	fsr2l,c
  2031  000F30  0E00               	movlw	high _fontList
  2032  000F32  20F4               	addwfc	prodh,w,c
  2033  000F34  6EDA               	movwf	fsr2h,c
  2034  000F36  CFDE F006          	movff	postinc2,??_setMsgWithDot+1
  2035  000F3A  CFDE F007          	movff	postinc2,??_setMsgWithDot+2
  2036  000F3E  CFDE F008          	movff	postinc2,??_setMsgWithDot+3
  2037  000F42  CFDE F009          	movff	postinc2,??_setMsgWithDot+4
  2038  000F46  5015               	movf	setMsgWithDot@i,w,c
  2039  000F48  2403               	addwf	setMsgWithDot@dotFlag,w,c
  2040  000F4A  6ED9               	movwf	fsr2l,c
  2041  000F4C  5016               	movf	setMsgWithDot@i+1,w,c
  2042  000F4E  2004               	addwfc	setMsgWithDot@dotFlag+1,w,c
  2043  000F50  6EDA               	movwf	fsr2h,c
  2044  000F52  0E2E               	movlw	46
  2045  000F54  18DE               	xorwf	postinc2,w,c
  2046  000F56  A4D8               	btfss	status,2,c
  2047  000F58  D002               	goto	i2u40_40
  2048  000F5A  0E01               	movlw	1
  2049  000F5C  D001               	goto	i2u41_40
  2050  000F5E                     i2u40_40:
  2051  000F5E  0E00               	movlw	0
  2052  000F60                     i2u41_40:
  2053  000F60  6E0B               	movwf	(??_setMsgWithDot+6)& (0+255),c
  2054  000F62  6A0C               	clrf	(??_setMsgWithDot+7)& (0+255),c
  2055  000F64  6A0D               	clrf	(??_setMsgWithDot+8)& (0+255),c
  2056  000F66  6A0E               	clrf	(??_setMsgWithDot+9)& (0+255),c
  2057  000F68  C00C  F00E         	movff	??_setMsgWithDot+7,??_setMsgWithDot+9
  2058  000F6C  C00B  F00D         	movff	??_setMsgWithDot+6,??_setMsgWithDot+8
  2059  000F70  6A0C               	clrf	??_setMsgWithDot+7,c
  2060  000F72  6A0B               	clrf	??_setMsgWithDot+6,c
  2061  000F74  5006               	movf	??_setMsgWithDot+1,w,c
  2062  000F76  100B               	iorwf	??_setMsgWithDot+6,w,c
  2063  000F78  6E0F               	movwf	(??_setMsgWithDot+10)& (0+255),c
  2064  000F7A  5007               	movf	??_setMsgWithDot+2,w,c
  2065  000F7C  100C               	iorwf	??_setMsgWithDot+7,w,c
  2066  000F7E  6E10               	movwf	(??_setMsgWithDot+11)& (0+255),c
  2067  000F80  5008               	movf	??_setMsgWithDot+3,w,c
  2068  000F82  100D               	iorwf	??_setMsgWithDot+8,w,c
  2069  000F84  6E11               	movwf	(??_setMsgWithDot+12)& (0+255),c
  2070  000F86  5009               	movf	??_setMsgWithDot+4,w,c
  2071  000F88  100E               	iorwf	??_setMsgWithDot+9,w,c
  2072  000F8A  6E12               	movwf	(??_setMsgWithDot+13)& (0+255),c
  2073  000F8C  1E0F               	comf	??_setMsgWithDot+10,f,c
  2074  000F8E  1E10               	comf	??_setMsgWithDot+11,f,c
  2075  000F90  1E11               	comf	??_setMsgWithDot+12,f,c
  2076  000F92  1E12               	comf	??_setMsgWithDot+13,f,c
  2077  000F94  0E60               	movlw	low _segMap
  2078  000F96  6E13               	movwf	(??_setMsgWithDot+14)& (0+255),c
  2079  000F98  0E00               	movlw	high _segMap
  2080  000F9A  6E14               	movwf	(??_setMsgWithDot+15)& (0+255),c
  2081  000F9C  90D8               	bcf	status,0,c
  2082  000F9E  3415               	rlcf	setMsgWithDot@i,w,c
  2083  000FA0  6ED9               	movwf	fsr2l,c
  2084  000FA2  3416               	rlcf	setMsgWithDot@i+1,w,c
  2085  000FA4  6EDA               	movwf	fsr2h,c
  2086  000FA6  90D8               	bcf	status,0,c
  2087  000FA8  36D9               	rlcf	fsr2l,f,c
  2088  000FAA  36DA               	rlcf	fsr2h,f,c
  2089  000FAC  5013               	movf	??_setMsgWithDot+14,w,c
  2090  000FAE  26D9               	addwf	fsr2l,f,c
  2091  000FB0  5014               	movf	??_setMsgWithDot+15,w,c
  2092  000FB2  22DA               	addwfc	fsr2h,f,c
  2093  000FB4  C00F  FFDE         	movff	??_setMsgWithDot+10,postinc2
  2094  000FB8  C010  FFDE         	movff	??_setMsgWithDot+11,postinc2
  2095  000FBC  C011  FFDE         	movff	??_setMsgWithDot+12,postinc2
  2096  000FC0  C012  FFDE         	movff	??_setMsgWithDot+13,postinc2
  2097  000FC4  4A15               	infsnz	setMsgWithDot@i,f,c
  2098  000FC6  2A16               	incf	setMsgWithDot@i+1,f,c
  2099  000FC8  D79E               	goto	i2l1041
  2100  000FCA                     i2l83:
  2101  000FCA  0012               	return		;funcret
  2102  000FCC                     __end_of_setMsgWithDot:
  2103                           	opt stack 0
  2104                           pclatu	equ	0xFFB
  2105                           pclath	equ	0xFFA
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           prodh	equ	0xFF4
  2111                           prodl	equ	0xFF3
  2112                           intcon	equ	0xFF2
  2113                           postinc0	equ	0xFEE
  2114                           fsr0h	equ	0xFEA
  2115                           fsr0l	equ	0xFE9
  2116                           wreg	equ	0xFE8
  2117                           postdec1	equ	0xFE5
  2118                           fsr1h	equ	0xFE2
  2119                           fsr1l	equ	0xFE1
  2120                           indf2	equ	0xFDF
  2121                           postinc2	equ	0xFDE
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function ___awmod *****************
  2127 ;; Defined at:
  2128 ;;		line 8 in file "D:\Microchip\xc8\v1.45\sources\common\awmod.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  dividend        2    0[COMRAM] int 
  2131 ;;  divisor         2    2[COMRAM] int 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  sign            1    5[COMRAM] unsigned char 
  2134 ;;  counter         1    4[COMRAM] unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  2    0[COMRAM] int 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2144 ;;      Params:         4       0       0       0       0       0       0       0       0
  2145 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2147 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2148 ;;Total ram usage:        6 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_isr
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text6
  2158  00107E                     __ptext6:
  2159                           	opt stack 0
  2160  00107E                     ___awmod:
  2161                           	opt stack 29
  2162                           
  2163                           ;incstack = 0
  2164  00107E  0E00               	movlw	0
  2165  001080  6E06               	movwf	___awmod@sign,c
  2166  001082  AE02               	btfss	___awmod@dividend+1,7,c
  2167  001084  D006               	goto	i2l358
  2168  001086  6C01               	negf	___awmod@dividend,c
  2169  001088  1E02               	comf	___awmod@dividend+1,f,c
  2170  00108A  B0D8               	btfsc	status,0,c
  2171  00108C  2A02               	incf	___awmod@dividend+1,f,c
  2172  00108E  0E01               	movlw	1
  2173  001090  6E06               	movwf	___awmod@sign,c
  2174  001092                     i2l358:
  2175  001092  AE04               	btfss	___awmod@divisor+1,7,c
  2176  001094  D004               	goto	i2l359
  2177  001096  6C03               	negf	___awmod@divisor,c
  2178  001098  1E04               	comf	___awmod@divisor+1,f,c
  2179  00109A  B0D8               	btfsc	status,0,c
  2180  00109C  2A04               	incf	___awmod@divisor+1,f,c
  2181  00109E                     i2l359:
  2182  00109E  5003               	movf	___awmod@divisor,w,c
  2183  0010A0  1004               	iorwf	___awmod@divisor+1,w,c
  2184  0010A2  B4D8               	btfsc	status,2,c
  2185  0010A4  D018               	goto	i2l366
  2186  0010A6  0E01               	movlw	1
  2187  0010A8  6E05               	movwf	___awmod@counter,c
  2188  0010AA  D004               	goto	i2l361
  2189  0010AC  90D8               	bcf	status,0,c
  2190  0010AE  3603               	rlcf	___awmod@divisor,f,c
  2191  0010B0  3604               	rlcf	___awmod@divisor+1,f,c
  2192  0010B2  2A05               	incf	___awmod@counter,f,c
  2193  0010B4                     i2l361:
  2194  0010B4  AE04               	btfss	___awmod@divisor+1,7,c
  2195  0010B6  D7FA               	goto	i2l362
  2196  0010B8                     i2u57_40:
  2197  0010B8  5003               	movf	___awmod@divisor,w,c
  2198  0010BA  5C01               	subwf	___awmod@dividend,w,c
  2199  0010BC  5004               	movf	___awmod@divisor+1,w,c
  2200  0010BE  5802               	subwfb	___awmod@dividend+1,w,c
  2201  0010C0  A0D8               	btfss	status,0,c
  2202  0010C2  D004               	goto	i2l365
  2203  0010C4  5003               	movf	___awmod@divisor,w,c
  2204  0010C6  5E01               	subwf	___awmod@dividend,f,c
  2205  0010C8  5004               	movf	___awmod@divisor+1,w,c
  2206  0010CA  5A02               	subwfb	___awmod@dividend+1,f,c
  2207  0010CC                     i2l365:
  2208  0010CC  90D8               	bcf	status,0,c
  2209  0010CE  3204               	rrcf	___awmod@divisor+1,f,c
  2210  0010D0  3203               	rrcf	___awmod@divisor,f,c
  2211  0010D2  2E05               	decfsz	___awmod@counter,f,c
  2212  0010D4  D7F1               	goto	i2u57_40
  2213  0010D6                     i2l366:
  2214  0010D6  5006               	movf	___awmod@sign,w,c
  2215  0010D8  B4D8               	btfsc	status,2,c
  2216  0010DA  D004               	goto	i2l367
  2217  0010DC  6C01               	negf	___awmod@dividend,c
  2218  0010DE  1E02               	comf	___awmod@dividend+1,f,c
  2219  0010E0  B0D8               	btfsc	status,0,c
  2220  0010E2  2A02               	incf	___awmod@dividend+1,f,c
  2221  0010E4                     i2l367:
  2222  0010E4  C001  F001         	movff	___awmod@dividend,?___awmod
  2223  0010E8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2224  0010EC  0012               	return	
  2225  0010EE                     __end_of___awmod:
  2226                           	opt stack 0
  2227                           pclatu	equ	0xFFB
  2228                           pclath	equ	0xFFA
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           intcon	equ	0xFF2
  2236                           postinc0	equ	0xFEE
  2237                           fsr0h	equ	0xFEA
  2238                           fsr0l	equ	0xFE9
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1h	equ	0xFE2
  2242                           fsr1l	equ	0xFE1
  2243                           indf2	equ	0xFDF
  2244                           postinc2	equ	0xFDE
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           pclatu	equ	0xFFB
  2249                           pclath	equ	0xFFA
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           intcon	equ	0xFF2
  2257                           postinc0	equ	0xFEE
  2258                           fsr0h	equ	0xFEA
  2259                           fsr0l	equ	0xFE9
  2260                           wreg	equ	0xFE8
  2261                           postdec1	equ	0xFE5
  2262                           fsr1h	equ	0xFE2
  2263                           fsr1l	equ	0xFE1
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270                           	psect	rparam
  2271  0000                     pclatu	equ	0xFFB
  2272                           pclath	equ	0xFFA
  2273                           tblptru	equ	0xFF8
  2274                           tblptrh	equ	0xFF7
  2275                           tblptrl	equ	0xFF6
  2276                           tablat	equ	0xFF5
  2277                           prodh	equ	0xFF4
  2278                           prodl	equ	0xFF3
  2279                           intcon	equ	0xFF2
  2280                           postinc0	equ	0xFEE
  2281                           fsr0h	equ	0xFEA
  2282                           fsr0l	equ	0xFE9
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           indf2	equ	0xFDF
  2288                           postinc2	equ	0xFDE
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293                           	psect	temp
  2294  000058                     btemp:
  2295                           	opt stack 0
  2296  000058                     	ds	1
  2297  0000                     int$flags	set	btemp
  2298  0000                     wtemp6	set	btemp+1
  2299                           pclatu	equ	0xFFB
  2300                           pclath	equ	0xFFA
  2301                           tblptru	equ	0xFF8
  2302                           tblptrh	equ	0xFF7
  2303                           tblptrl	equ	0xFF6
  2304                           tablat	equ	0xFF5
  2305                           prodh	equ	0xFF4
  2306                           prodl	equ	0xFF3
  2307                           intcon	equ	0xFF2
  2308                           postinc0	equ	0xFEE
  2309                           fsr0h	equ	0xFEA
  2310                           fsr0l	equ	0xFE9
  2311                           wreg	equ	0xFE8
  2312                           postdec1	equ	0xFE5
  2313                           fsr1h	equ	0xFE2
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    166
    Data        552
    BSS         24
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      87
    BANK0           160     18      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 82
		 -> DEMO_DOTFLAG(CODE[82]), DEMO_MESSAGE(CODE[82]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), display(BANK0[9]), 

    setMsgWithDot@dotFlag	PTR unsigned char  size(2) Largest target is 9
		 -> disdot(BANK0[9]), 

    setMsgWithDot@message	PTR unsigned char  size(2) Largest target is 9
		 -> display(BANK0[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_refreshShiftRegister
    _handleMessage->_setMsgWithDot

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0     203
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 18    18      0    1653
                                             62 COMRAM    18    18      0
                            ___awmod
                      _handleMessage
               _refreshShiftRegister
 ---------------------------------------------------------------------------------
 (2) _refreshShiftRegister                                62    60      2     300
                                              0 COMRAM    62    60      2
 ---------------------------------------------------------------------------------
 (2) _handleMessage                                        6     6      0     905
                                             22 COMRAM     6     6      0
                      _setMsgWithDot
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     597
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _setMsgWithDot                                       22    18      4     308
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___awmod
   _handleMessage
     _setMsgWithDot
     _strncpy
   _refreshShiftRegister

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     204      21       25.2%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      49       5       45.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      57       1       92.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A0      20        0.0%
DATA                 0      0     2A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 03 18:32:22 2018

           __end_of_DEMO_DOTFLAG 0855                      _SSPSTATbits 000FC7  
                             l93 0D54                               l95 0E20  
                             l97 0D88                               l99 0D9C  
           __end_of_DEMO_MESSAGE 08A7                              l101 0DA4  
                            _PR2 000FCB                              _isr 0008  
                   ___awmod@sign 0006                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                     __CFG_WDT$OFF 000000  
                           ?_isr 0001                      main@dotflag 00A3  
                           _BRGH 007D62                             i2l81 0F16  
                           i2l83 0FCA                             i2l86 0A8E  
                           i2l87 0AE8                             _TMR2 000FCC  
                           _main 0CFE                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 0058                             prodh 000FF4  
                           prodl 000FF3                             start 000E  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
  __size_of_refreshShiftRegister 0252                            ??_isr 003F  
                          ?_main 0001                  __end_of___awmod 10EE  
                          _CMCON 000FB4                            _T2CON 000FCA  
                          i2l122 0EB2                            i2l116 1026  
                          i2l117 107C                            i2l361 10B4  
                          i2l362 10AC                            i2l365 10CC  
                          i2l366 10D6                            i2l358 1092  
                          i2l367 10E4                            i2l359 109E  
                          i2l730 1198                            i2l726 1164  
                          i2l727 118E                            i2l729 11A8  
                          _RCREG 000FAE                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _SSPIE 007CEB  
                          _TRISE 000F96                            _SSPIF 007CF3  
                          pclath 000FFA                            tablat 000FF5  
                          status 000FD8                            wtemp6 0059  
                __end_of_strncpy 11BA            __end_of_setMsgWithDot 0FCC  
                _showDemoMessage 0056                  __initialization 10EE  
                   __end_of_main 0E2E                           ??_main 0097  
                  __activetblptr 000001                           _ADCON1 000FC1  
        refreshShiftRegister@map 0037          refreshShiftRegister@ptr 0001  
                         i2l1041 0F06                           i2l1061 1198  
                         i2l1099 1026                           _SPBRGH 000FB0  
                         _SSPADD 000FC8                           _SSPBUF 000FC9  
                      ??___awmod 0005                           _disdot 0085  
                         _segMap 0060                           clear_0 1138  
                ___awmod@divisor 0003                           _tmrIsr 0084  
                ___awmod@counter 0005                   _MESSAGE_LENGTH 0801  
                   __pdataBIGRAM 00A9                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ??_strncpy 0007  
                   _DEMO_DOTFLAG 0803                     _DEMO_MESSAGE 0855  
                     __accesstop 0060          __end_of__initialization 1148  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                   __pidataBANK0 11BA           __end_of_MESSAGE_LENGTH 0803  
          __end_of_handleMessage 107E            refreshShiftRegister@i 003D  
                     __pbssBANK0 0084                       __pnvCOMRAM 0056  
                        _BAUDCON 000FB8     __end_of_refreshShiftRegister 0AFA  
                        i2u40_40 0F5E                          i2u41_40 0F60  
                        i2u50_40 0AAE                          i2u50_45 0AA4  
                        i2u51_40 0AE8                          i2u46_44 08BE  
                        i2u46_45 08B8                          i2u47_45 092A  
                        i2u48_45 0954                          i2u57_40 10B8  
                        _SSPCON1 000FC6                          _SSPCON2 000FC5  
                        _SSPSTAT 000FC7                          __Hparam 0000  
                        __Lparam 0000                          ___awmod 107E  
                   __psmallconst 0800                          __pcinit 10EE  
                        __ramtop 0800                          __ptext0 0CFE  
                        __ptext2 08A8                          __ptext3 0FCC  
                        __ptext4 115A                          __ptext5 0EFE  
                        __ptext6 107E                          _display 008E  
                        _divisor 0053                     __size_of_isr 0EF6  
               ___awmod@dividend 0001                main@digitSelector 00A7  
                 __pintcode_body 0E2E                          _strncpy 115A  
           end_of_initialization 1148                          int_func 0E2E  
                        postdec1 000FE5                          postinc0 000FEE  
                        postinc2 000FDE           __size_of_setMsgWithDot 00CE  
                     main@RxData 00A8             _refreshShiftRegister 08A8  
                  __pidataBIGRAM 0AFA              start_initialization 10EE  
                    __end_of_isr 0EFE                    _setMsgWithDot 0EFE  
          ?_refreshShiftRegister 0001                      __pdataBANK0 0060  
                    __pbssCOMRAM 0051                    __pcstackBANK0 0097  
refreshShiftRegister@ledSelector 003B                   ?_setMsgWithDot 0001  
         __size_of_handleMessage 00B2                        __pintcode 0008  
                       ?___awmod 0001                      __smallconst 0800  
                       ?_strncpy 0001                         _LATAbits 000F89  
                       _LATBbits 000F8A                         _LATCbits 000F8B  
                    strncpy@from 0003                         _PIE1bits 000F9D  
                    strncpy@size 0005           ??_refreshShiftRegister 0003  
                       _PIR1bits 000F9E             setMsgWithDot@dotFlag 0003  
           setMsgWithDot@message 0001                    _handleMessage 0FCC  
                      copy_data0 1102                        copy_data1 1126  
                ??_setMsgWithDot 0005                         __Hrparam 0000  
                       __Lrparam 0000                     __Lsmallconst 0800  
               __size_of___awmod 0070                   ?_handleMessage 0001  
                       _digitPtr 0055                         _led_stat 0057  
               __size_of_strncpy 0060                         _fontList 00A9  
                  __size_of_main 0130                         int$flags 0058  
                       _writeItr 0051                       _INTCONbits 000FF2  
                       intlevel2 0000                   setMsgWithDot@i 0015  
                      strncpy@cp 0007                        strncpy@to 0001  
                ??_handleMessage 0017                      _SSPCON2bits 000FC5  
